name: Weekly Tripwire Validation

on:
  schedule:
    # Run every Sunday at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      baseline_fingerprint:
        description: 'Baseline fingerprint to compare against'
        required: false
        default: 'v22_1f3db391_1757345166574'

jobs:
  tripwire-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup baseline configuration
        run: |
          mkdir -p ./cron-tripwires/baselines
          # In real implementation, would download baseline from secure storage
          echo "Setting up baseline fingerprint: ${{ github.event.inputs.baseline_fingerprint || 'v22_1f3db391_1757345166574' }}"
          
      - name: Run tripwire validation
        id: validation
        run: |
          BASELINE="${{ github.event.inputs.baseline_fingerprint || 'v22_1f3db391_1757345166574' }}"
          node ./cron-tripwires/scripts/validate-weekly-tripwires.js --baseline "$BASELINE"
        continue-on-error: true
        
      - name: Check validation results
        id: check_results
        run: |
          RESULT_FILE=$(find . -name "validation-results-*.json" -type f | head -1)
          if [ -n "$RESULT_FILE" ]; then
            echo "results_file=$RESULT_FILE" >> $GITHUB_OUTPUT
            node ./cron-tripwires/scripts/check-tripwire-results.js "$RESULT_FILE"
          else
            echo "‚ùå No validation results file found"
            exit 1
          fi
        continue-on-error: true
        
      - name: Upload validation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tripwire-validation-results-${{ github.run_number }}
          path: |
            validation-results-*.json
            ./cron-tripwires/logs/
          retention-days: 30
          
      - name: Trigger auto-revert on failure
        if: steps.check_results.outcome == 'failure'
        run: |
          echo "üö® Tripwire validation failed - would trigger auto-revert in production"
          # In production deployment, this would trigger actual auto-revert
          # For GitHub Actions, we create an issue instead
          
      - name: Create issue on tripwire failure
        if: steps.check_results.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Find the results file
            const files = fs.readdirSync('.').filter(f => f.startsWith('validation-results-'));
            if (files.length === 0) return;
            
            const results = JSON.parse(fs.readFileSync(files[0], 'utf8'));
            
            const issueBody = `## üö® Weekly Tripwire Validation Failed
            
            **Timestamp:** ${results.timestamp}
            **Baseline:** ${results.fingerprint}
            **Status:** ${results.overall_status}
            
            ### Failed Tripwires
            
            ${results.alerts.map(alert => 
              `- **[${alert.severity}] ${alert.tripwire}:** ${alert.message}`
            ).join('\n')}
            
            ### Next Steps
            
            1. Review validation results in workflow artifacts
            2. Investigate root cause of tripwire failures
            3. Consider manual intervention if auto-revert failed
            4. Update baseline if intentional changes were made
            
            ### Validation Details
            
            ${Object.entries(results.tripwires).map(([name, tripwire]) => 
              `- **${name}:** ${tripwire.status}`
            ).join('\n')}
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Weekly Tripwire Validation Failed - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['P0', 'tripwire-failure', 'auto-revert']
            });
            
      - name: Send Slack notification on failure
        if: steps.check_results.outcome == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          custom_payload: |
            {
              "text": "üö® Lens v2.2 Weekly Tripwire Validation Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üö® Weekly Tripwire Validation Failed*\n\nOne or more standing tripwires detected drift from baseline."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Baseline:*\n${{ github.event.inputs.baseline_fingerprint || 'v22_1f3db391_1757345166574' }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Results"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Update status badge
        if: always()
        run: |
          STATUS="${{ steps.check_results.outcome == 'success' && '‚úÖ PASSING' || '‚ùå FAILING' }}"
          COLOR="${{ steps.check_results.outcome == 'success' && 'green' || 'red' }}"
          
          echo "Tripwire status: $STATUS"
          # In real implementation, would update status badge or dashboard
