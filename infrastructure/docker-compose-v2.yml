version: '3.8'

# Benchmark Protocol v2.0 - Complete Competitor Infrastructure
# All systems deployed with authentic configurations for scientific benchmarking

services:
  # === LENS CORE SYSTEM ===
  lens-core:
    build: 
      context: ..
      dockerfile: infrastructure/containers/lens/Dockerfile
      args:
        GIT_SHA: ${GIT_SHA:-unknown}
        BUILD_TIMESTAMP: ${BUILD_TIMESTAMP:-$(date -Iseconds)}
    ports:
      - "50051:50051"
    environment:
      - LENS_MODE=benchmark-v2
      - RUST_LOG=info
      - BENCHMARK_PROTOCOL=v2.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50051/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    volumes:
      - ../index:/app/index:rw
      - benchmark-datasets:/datasets:ro
      - benchmark-results:/results:rw
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - benchmark-net

  # === LEXICAL SEARCH SYSTEMS ===
  
  # Zoekt - Fast trigram-based code search (GitLab/Sourcegraph)
  zoekt-webserver:
    image: sourcegraph/zoekt-webserver:v3.3.0
    ports:
      - "6070:6070"
    environment:
      - ZOEKT_LISTEN_ADDRESS=:6070
      - ZOEKT_INDEX_DIR=/index
    volumes:
      - zoekt-index:/index:rw
      - benchmark-datasets:/datasets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6070/"]
      interval: 10s
      timeout: 5s 
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - benchmark-net

  # Zoekt Indexer - For building search indices
  zoekt-indexserver:
    image: sourcegraph/zoekt-indexserver:v3.3.0
    volumes:
      - zoekt-index:/index:rw
      - benchmark-datasets:/datasets:ro
    environment:
      - ZOEKT_INDEX_DIR=/index
    command: >
      sh -c "
        echo 'Building Zoekt indices for benchmark datasets...' &&
        zoekt-archive-index -index /index /datasets/coir.tar.gz &&
        zoekt-archive-index -index /index /datasets/swebench.tar.gz &&
        zoekt-archive-index -index /index /datasets/codesearchnet.tar.gz &&
        echo 'Zoekt indexing complete.'
      "
    depends_on:
      - dataset-loader
    networks:
      - benchmark-net

  # livegrep - Codesearch-based real-time grep
  livegrep:
    build:
      context: containers/livegrep/
      dockerfile: Dockerfile
    ports:
      - "9898:9898"
    environment:
      - LIVEGREP_LISTEN=:9898
      - LIVEGREP_INDEX_DIR=/index
    volumes:
      - livegrep-index:/index:rw
      - benchmark-datasets:/datasets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9898/"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - benchmark-net

  # ripgrep - Rust-based fast grep with JSON API wrapper
  ripgrep-server:
    build:
      context: containers/ripgrep-server/
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - RIPGREP_SERVER_PORT=8080
      - CORPUS_PATH=/datasets
    volumes:
      - benchmark-datasets:/datasets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    networks:
      - benchmark-net

  # === STRUCTURAL/AST SEARCH SYSTEMS ===

  # comby - Structural search and rewrite
  comby-server:
    build:
      context: containers/comby/
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - COMBY_SERVER_PORT=8081
      - CORPUS_PATH=/datasets
    volumes:
      - benchmark-datasets:/datasets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    networks:
      - benchmark-net

  # ast-grep - Tree-sitter structural search
  ast-grep-server:
    build:
      context: containers/ast-grep/
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - AST_GREP_SERVER_PORT=8082
      - CORPUS_PATH=/datasets
    volumes:
      - benchmark-datasets:/datasets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    networks:
      - benchmark-net

  # === VECTOR/HYBRID SEARCH SYSTEMS ===

  # OpenSearch with k-NN plugin for hybrid sparse+dense
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: benchmark-opensearch
    environment:
      - cluster.name=benchmark-opensearch
      - node.name=benchmark-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
      - benchmark-datasets:/datasets:ro
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    networks:
      - benchmark-net

  # Qdrant - Dense + sparse vector search
  qdrant:
    image: qdrant/qdrant:v1.7.0
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    volumes:
      - qdrant-data:/qdrant/storage
      - benchmark-datasets:/datasets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '2.0'
          memory: 3G
    networks:
      - benchmark-net

  # Vespa - HNSW with filters and complex ranking
  vespa:
    image: vespaengine/vespa:8.277.17
    container_name: benchmark-vespa
    hostname: vespa
    privileged: true
    volumes:
      - vespa-data:/opt/vespa/var
      - ./containers/vespa/application:/app
      - benchmark-datasets:/datasets:ro
    ports:
      - "8083:8080"
      - "19071:19071"
    environment:
      - VESPA_CONFIGSERVERS=vespa
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ApplicationStatus"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    networks:
      - benchmark-net

  # FAISS Server - Pure ANN library wrapper
  faiss-server:
    build:
      context: containers/faiss/
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - FAISS_SERVER_PORT=8084
      - INDEX_TYPE=IVF_HNSW
      - VECTOR_DIM=512
    volumes:
      - faiss-indices:/indices
      - benchmark-datasets:/datasets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '2.0'
          memory: 3G
    networks:
      - benchmark-net

  # === DATASET & INFRASTRUCTURE SERVICES ===

  # Dataset loader and preprocessor
  dataset-loader:
    build:
      context: containers/dataset-loader/
      dockerfile: Dockerfile
    environment:
      - DATASETS_DIR=/datasets
      - COIR_URL=https://huggingface.co/datasets/CoIR/code-search/resolve/main/codesearch.tar.gz
      - SWEBENCH_REPO=https://github.com/princeton-nlp/SWE-bench.git
      - CODESEARCHNET_BASE_URL=https://s3.amazonaws.com/code-search-net/CodeSearchNet/v2/
    volumes:
      - benchmark-datasets:/datasets:rw
      - ../scripts:/scripts:ro
    command: >
      sh -c "
        echo 'Starting dataset acquisition and preprocessing...' &&
        /scripts/acquire-datasets.sh &&
        /scripts/preprocess-datasets.sh &&
        echo 'Dataset preparation complete. SHA256 hashes:' &&
        find /datasets -name '*.tar.gz' -o -name '*.json' -o -name '*.jsonl' | xargs sha256sum
      "
    networks:
      - benchmark-net

  # Hardware attestation and monitoring
  system-monitor:
    build:
      context: containers/monitor/
      dockerfile: Dockerfile
    privileged: true
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - benchmark-results:/results:rw
    ports:
      - "9090:9090"  # Prometheus
      - "3000:3000"  # Grafana
    environment:
      - MONITOR_INTERVAL=1s
      - ATTESTATION_MODE=enabled
      - RESULTS_DIR=/results
    networks:
      - benchmark-net

  # Benchmark orchestrator and coordinator  
  benchmark-coordinator:
    build:
      context: containers/coordinator/
      dockerfile: Dockerfile
    depends_on:
      - lens-core
      - zoekt-webserver  
      - livegrep
      - ripgrep-server
      - comby-server
      - ast-grep-server
      - opensearch
      - qdrant
      - vespa
      - faiss-server
      - system-monitor
    environment:
      - PROTOCOL_VERSION=v2.0
      - SLA_TIMEOUT_MS=150
      - BENCHMARK_RUNS=1000
      - STATISTICAL_CONFIDENCE=0.95
      - BOOTSTRAP_SAMPLES=10000
    volumes:
      - benchmark-datasets:/datasets:ro
      - benchmark-results:/results:rw
      - ../config:/config:ro
    ports:
      - "8085:8085"
    command: >
      sh -c "
        echo 'Waiting for all systems to be healthy...' &&
        /scripts/wait-for-services.sh &&
        echo 'Starting Protocol v2.0 benchmark matrix execution...' &&
        /scripts/run-benchmark-matrix.sh
      "
    networks:
      - benchmark-net

  # Results publisher and attestation generator
  results-publisher:
    build:
      context: containers/publisher/
      dockerfile: Dockerfile
    depends_on:
      - benchmark-coordinator
    environment:
      - PUBLISH_URL=${BENCHMARK_PUBLISH_URL:-https://benchmark.lens.dev/}
      - ATTESTATION_KEY_PATH=/keys/attestation.key
      - PROVENANCE_CHAIN=enabled
    volumes:
      - benchmark-results:/results:ro
      - ../keys:/keys:ro
    ports:
      - "8086:8086"
    networks:
      - benchmark-net

# === PERSISTENT VOLUMES ===
volumes:
  # Search indices for each system
  zoekt-index:
    driver: local
  livegrep-index:
    driver: local
  opensearch-data:
    driver: local  
  qdrant-data:
    driver: local
  vespa-data:
    driver: local
  faiss-indices:
    driver: local
  
  # Shared datasets and results
  benchmark-datasets:
    driver: local
  benchmark-results:
    driver: local

# === NETWORK ===
networks:
  benchmark-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16