{"qid": "lens_main_symbol_ce2d6d83", "query": "find function __getattr__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12031759097881158, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09073127716529923, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.08773385919450417, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.08600238343301046, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/functional_serializers.py", "score": 0.060325178006705886, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 6, "path": "tests/test_migration.py", "score": 0.047405586254373605, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d"}, {"qid": "", "rank": 7, "path": "pydantic/v1/decorator.py", "score": 0.04605980477909844, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_decorators.py", "score": 0.04395445530463675, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 9, "path": "pydantic/deprecated/config.py", "score": 0.03781219964614957, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from typing import TYPE CHECKING, Any from typing extensions import Literal, deprecated from .. internal import  config from ..warnin"}, {"qid": "", "rank": 10, "path": "pydantic/functional_validators.py", "score": 0.03642342592688965, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 11, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03606351674783579, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_typing_extra.py", "score": 0.03324518985392227, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}, {"qid": "", "rank": 13, "path": "pydantic/deprecated/class_validators.py", "score": 0.03274229314829177, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 14, "path": "tests/test_validate_call.py", "score": 0.03125030176520211, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_generate_schema.py", "score": 0.030150287553165074, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/utils.py", "score": 0.030051979112118783, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 17, "path": "pydantic/errors.py", "score": 0.027407170113346774, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_core_metadata.py", "score": 0.027237342784530036, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 19, "path": "tests/test_docs.py", "score": 0.024893497030750958, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/class_validators.py", "score": 0.024320155712567633, "span_start": null, "span_end": null, "passage": "...p from functools import partial, partialmethod, wraps from itertools import chain from types import Function Type from typing import TYPE CHECKING, Any, Callable, Dict, Iterable, List, Optional, Set, ..."}], "latency_ms": 1.729726791381836, "gold_paths": ["pydantic/__init__.py"]}
{"qid": "lens_main_symbol_512ac469", "query": "find function __dir__", "results": [{"qid": "", "rank": 1, "path": "tests/check_usage_docs.py", "score": 0.1636751542284828, "span_start": null, "span_end": null, "passage": "import re import sys from pathlib import Path ROOT DIR = Path(  file  ).parent.parent PYDANTIC DIR = ROOT DIR / 'pydantic' version file = PYDANTIC DIR / 'version.py' version = re.search(rb\"VERSION = '"}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_git.py", "score": 0.16040777772267803, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.1120358120903512, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08448600272423308, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "tests/conftest.py", "score": 0.08169490498199708, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 6, "path": "pydantic/validate_call_decorator.py", "score": 0.08008261128931611, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 7, "path": "docs/plugins/using_update.py", "score": 0.059600665722966524, "span_start": null, "span_end": null, "passage": "from pathlib import Path from time import sleep import requests import tomli THIS DIR = Path(  file  ).parent session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'h"}, {"qid": "", "rank": 8, "path": "release/make_history.py", "score": 0.05678054176792279, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import argparse import json import re import subprocess import sys from datetime import date from pathlib import Path import requests def main(): roo"}, {"qid": "", "rank": 9, "path": "pydantic/functional_serializers.py", "score": 0.05617283601253704, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/env_settings.py", "score": 0.05386230456572769, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/decorator.py", "score": 0.040237353752693376, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_decorators.py", "score": 0.03593126426168736, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 13, "path": "tests/mypy/test_mypy.py", "score": 0.03571019236775685, "span_start": null, "span_end": null, "passage": "... a boolean for key: init forbid extra' def get expected return code(source code: str) -> int: if re.findall(r'^\\s*# MYPY:', source code, flags=re.MULTILINE): return 1 return 0 @pytest.mark.parametrize..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.03391630491962283, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "tests/test_json.py", "score": 0.03385890271062827, "span_start": null, "span_end": null, "passage": "... dataclass from pydantic.deprecated.json import pydantic encoder, timedelta isoformat from pydantic.functional serializers import ( field serializer, ) from pydantic.json schema import Json Schema Val..."}, {"qid": "", "rank": 16, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03358116924389964, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 17, "path": "pydantic/deprecated/class_validators.py", "score": 0.030488554273125495, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 18, "path": "tests/test_validate_call.py", "score": 0.029099260613932348, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 19, "path": "docs/plugins/main.py", "score": 0.027232314517837884, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import json import logging import os import re import textwrap from pathlib import Path from textwrap import indent import autoflake import pyupgrade"}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_generate_schema.py", "score": 0.02547111923037229, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}], "latency_ms": 1.3844966888427734, "gold_paths": ["pydantic/__init__.py"]}
{"qid": "lens_main_symbol_6f39089e", "query": "find function getattr_migration", "results": [{"qid": "", "rank": 1, "path": "tests/test_migration.py", "score": 0.21329744174386622, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d"}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07693380045813675, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/errors.py", "score": 0.07076278544863213, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05801563940867375, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "tests/conftest.py", "score": 0.05609902227747313, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 6, "path": "pydantic/validate_call_decorator.py", "score": 0.0549918773483803, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_serializers.py", "score": 0.038573288989693935, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 8, "path": "tests/test_warnings.py", "score": 0.0380725724242829, "span_start": null, "span_end": null, "passage": "from pydantic import Pydantic Deprecated Since20, Pydantic Deprecation Warning from pydantic.version import version short def test pydantic deprecation warning(): warning = Pydantic Deprecation Warnin"}, {"qid": "", "rank": 9, "path": "pydantic/v1/decorator.py", "score": 0.029451685337017162, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_decorators.py", "score": 0.028105477064019054, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 11, "path": "pydantic/__init__.py", "score": 0.02736809166270976, "span_start": null, "span_end": null, "passage": "...re from pydantic core.core schema import ( Field Serialization Info, Serialization Info, Serializer Function Wrap Handler, Validation Info, Validator Function Wrap Handler, ) from . import dataclasses..."}, {"qid": "", "rank": 12, "path": "pydantic/deprecated/config.py", "score": 0.024177979286274052, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from typing import TYPE CHECKING, Any from typing extensions import Literal, deprecated from .. internal import  config from ..warnin"}, {"qid": "", "rank": 13, "path": "pydantic/functional_validators.py", "score": 0.02328996582681356, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 14, "path": "docs/plugins/griffe_doclinks.py", "score": 0.023059831723070925, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_typing_extra.py", "score": 0.021257729494143097, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/class_validators.py", "score": 0.020936165918216416, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 17, "path": "tests/test_validate_call.py", "score": 0.019982152740109366, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_generate_schema.py", "score": 0.019278778668192696, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/utils.py", "score": 0.01921591801809758, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 20, "path": "pydantic/_migration.py", "score": 0.01794148634007092, "span_start": null, "span_end": null, "passage": "import sys from typing import Any, Callable, Dict from .version import version short MOVED IN V2 = { 'pydantic.utils:version info': 'pydantic.version:version info', 'pydantic.error wrappers:Validation"}], "latency_ms": 1.405954360961914, "gold_paths": ["pydantic/_migration.py"]}
{"qid": "lens_main_symbol_c1f6b005", "query": "find function wrapper", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail3.py", "score": 0.14403728134908447, "span_start": null, "span_end": null, "passage": "...pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T model instance = Model(list of ints=[1]) wrapper i..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail3.py", "score": 0.14403728134908447, "span_start": null, "span_end": null, "passage": "...pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T model instance = Model(list of ints=[1]) wrapper i..."}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/fail3.py", "score": 0.14403728134908447, "span_start": null, "span_end": null, "passage": "...pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T model instance = Model(list of ints=[1]) wrapper i..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_config.py", "score": 0.1404276174077942, "span_start": null, "span_end": null, "passage": "...N MESSAGE = 'Support for class-based `config` is deprecated, use Config Dict instead.' class Config Wrapper: The config wrapper built based on (in descending order of priority): - options from `kwargs..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.126755488579478, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11714247552148932, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_validate_call.py", "score": 0.10116030742950101, "span_start": null, "span_end": null, "passage": "...t create schema validator from . import  generate schema,  typing extra from . config import Config Wrapper class Validate Call Wrapper:"}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08833692835689544, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/conftest.py", "score": 0.08541861060788593, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/decorator.py", "score": 0.06255033243900422, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.05873322953436205, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_dataclasses.py", "score": 0.05444094182498182, "span_start": null, "span_end": null, "passage": "...e dataclass. Args: cls: The class. types namespace: The types namespace, defaults to `None`. config wrapper: The config wrapper instance, defaults to `None`. This logic is called on a class which has ..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_signature.py", "score": 0.043332930090800914, "span_start": null, "span_end": null, "passage": "...PE CHECKING, Any, Callable from pydantic core import Pydantic Undefined from . config import Config Wrapper from . utils import is valid identifier if TYPE CHECKING: from ..fields import Field Info de..."}, {"qid": "", "rank": 14, "path": "pydantic/plugin/_schema_validator.py", "score": 0.041345488200094135, "span_start": null, "span_end": null, "passage": "... handlers.append(j) if s is not None: strings event handlers.append(s) self.validate python = build wrapper(self. schema validator.validate python, python event handlers) self.validate json = build wr..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_fields.py", "score": 0.040982376422694415, "span_start": null, "span_end": null, "passage": "...pe: ignore def  update fields from docstrings(cls: type[Any], fields: dict[str, Field Info], config wrapper: Config Wrapper) -> None: if config wrapper.use attribute docstrings: fields docs = extract ..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators.py", "score": 0.03971303648023612, "span_start": null, "span_end": null, "passage": "...ributes: wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type..."}, {"qid": "", "rank": 17, "path": "pydantic/functional_validators.py", "score": 0.035462231626635865, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03511182025408187, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_generate_schema.py", "score": 0.034172168214844284, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 20, "path": "pydantic/deprecated/class_validators.py", "score": 0.03187824192986582, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}], "latency_ms": 1.3883113861083984, "gold_paths": ["pydantic/_migration.py"]}
{"qid": "lens_main_symbol_183278f9", "query": "find constant MOVED_IN_V2", "results": [{"qid": "", "rank": 1, "path": "tests/test_migration.py", "score": 0.3923303642239447, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d"}, {"qid": "", "rank": 2, "path": "pydantic/_migration.py", "score": 0.10668408109727082, "span_start": null, "span_end": null, "passage": "...c.errors:Url Scheme Permitted Error', 'pydantic.errors:Url User Info Error', 'pydantic.errors:Wrong Constant Error', 'pydantic.main:validate model', 'pydantic.networks:stricturl', 'pydantic:parse file..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.05631700501672485, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_config.py", "score": 0.049705340425784415, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from contextlib import contextmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schem"}, {"qid": "", "rank": 5, "path": "tests/test_warnings.py", "score": 0.046449545409870605, "span_start": null, "span_end": null, "passage": "from pydantic import Pydantic Deprecated Since20, Pydantic Deprecation Warning from pydantic.version import version short def test pydantic deprecation warning(): warning = Pydantic Deprecation Warnin"}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.0463976325977609, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.025688225429608302, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args"}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.02491062601026342, "span_start": null, "span_end": null, "passage": "def   call  (self,   value: Any) -> Any: ... class V1Validator With Values(Protocol): def   call  (self,   value: Any, *, values: dict[str, Any]) -> Any: ... class V1Validator With Kwargs(Protocol): d"}, {"qid": "", "rank": 9, "path": "pydantic/warnings.py", "score": 0.02483392397208146, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality"}, {"qid": "", "rank": 10, "path": "docs/plugins/griffe_doclinks.py", "score": 0.024168243358603913, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/utils.py", "score": 0.021907628602976386, "span_start": null, "span_end": null, "passage": "...e intersection of keys if ``intersect`` is set to ``True``. Hide class attribute from its instances Find out what sort of thing a path is. Return type as is for immutable built-in types Use obj.copy()..."}, {"qid": "", "rank": 12, "path": "pydantic/config.py", "score": 0.021017220823985508, "span_start": null, "span_end": null, "passage": "...oat values. Defaults to `'null'`. - `'null'` will serialize infinity and Na N values as `null`. - `'constants'` will serialize infinity and Na N values as `Infinity` and `Na N`. - `'strings'` will ser..."}, {"qid": "", "rank": 13, "path": "pydantic/experimental/pipeline.py", "score": 0.01853866960762159, "span_start": null, "span_end": null, "passage": " steps: tuple[ Step, ...] def transform( self, func: Callable[[ Out T],  New Out T], ) ->  Pipeline[ In T,  New Out T]: return  Pipeline[ In T,  New Out T](self. steps + ( Transform(func),)) @overload"}, {"qid": "", "rank": 14, "path": "tests/test_docs.py", "score": 0.01758090434041585, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 15, "path": "tests/test_exports.py", "score": 0.015191590129176768, "span_start": null, "span_end": null, "passage": "import importlib import importlib.util import json import platform import sys from pathlib import Path from types import Module Type import pytest import pydantic @pytest.mark.filterwarnings('ignore::"}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_generics.py", "score": 0.014855737473912028, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p"}, {"qid": "", "rank": 17, "path": "tests/test_validate_call.py", "score": 0.014627315814484535, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_fields.py", "score": 0.014238886298684725, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo"}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.013948309679792624, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core "}, {"qid": "", "rank": 20, "path": "pydantic/v1/mypy.py", "score": 0.013066840551004688, "span_start": null, "span_end": null, "passage": "import sys from configparser import Config Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes "}], "latency_ms": 1.4951229095458984, "gold_paths": ["pydantic/_migration.py"]}
{"qid": "lens_main_symbol_29894507", "query": "find constant DEPRECATED_MOVED_IN_V2", "results": [{"qid": "", "rank": 1, "path": "tests/test_migration.py", "score": 0.3910760802915802, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d"}, {"qid": "", "rank": 2, "path": "pydantic/_migration.py", "score": 0.11665503048636963, "span_start": null, "span_end": null, "passage": "...c.errors:Url Scheme Permitted Error', 'pydantic.errors:Url User Info Error', 'pydantic.errors:Wrong Constant Error', 'pydantic.main:validate model', 'pydantic.networks:stricturl', 'pydantic:parse file..."}, {"qid": "", "rank": 3, "path": "tests/test_deprecated_fields.py", "score": 0.1056999047511376, "span_start": null, "span_end": null, "passage": "import importlib.metadata import pytest from packaging.version import Version from typing extensions import Annotated, Self, deprecated from pydantic import Base Model, Field, computed field, field va"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_config.py", "score": 0.07807175150889342, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from contextlib import contextmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schem"}, {"qid": "", "rank": 5, "path": "tests/test_warnings.py", "score": 0.06806965105970003, "span_start": null, "span_end": null, "passage": "from pydantic import Pydantic Deprecated Since20, Pydantic Deprecation Warning from pydantic.version import version short def test pydantic deprecation warning(): warning = Pydantic Deprecation Warnin"}, {"qid": "", "rank": 6, "path": "tests/test_deprecated.py", "score": 0.06522141554248578, "span_start": null, "span_end": null, "passage": "import platform import re from datetime import date, timedelta from pathlib import Path from types import Simple Namespace from typing import Any, Dict, Iterable, List, Type import pytest from pydanti"}, {"qid": "", "rank": 7, "path": "pydantic/deprecated/config.py", "score": 0.06351640443490592, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from typing import TYPE CHECKING, Any from typing extensions import Literal, deprecated from .. internal import  config from ..warnin"}, {"qid": "", "rank": 8, "path": "pydantic/deprecated/tools.py", "score": 0.060304795108231495, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.05482044166099899, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 10, "path": "pydantic/deprecated/json.py", "score": 0.05259473902946786, "span_start": null, "span_end": null, "passage": "...E[base] except Key Error: continue return encoder(obj) else:  # We have exited the for loop without finding a suitable encoder raise Type Error(f\"Object of type '{obj.  class  .  name  }' is not JSON ..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.045164665810595646, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 12, "path": "pydantic/warnings.py", "score": 0.04340577658968589, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality"}, {"qid": "", "rank": 13, "path": "pydantic/deprecated/parse.py", "score": 0.0411617891721029, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import pickle import warnings from enum import Enum from pathlib import Path from typing import TYPE CHECKING, Any, Callable from typing extensions impor"}, {"qid": "", "rank": 14, "path": "pydantic/fields.py", "score": 0.037646392475990866, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias"}, {"qid": "", "rank": 15, "path": "pydantic/deprecated/decorator.py", "score": 0.0362998086131448, "span_start": null, "span_end": null, "passage": "import warnings from functools import wraps from typing import TYPE CHECKING, Any, Callable, Dict, List, Mapping, Optional, Tuple, Type, Type Var, Union, overload from typing extensions import depreca"}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_model_construction.py", "score": 0.03113355647485492, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr"}, {"qid": "", "rank": 17, "path": "pydantic/dataclasses.py", "score": 0.029055706909503654, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args"}, {"qid": "", "rank": 18, "path": "tests/test_type_hints.py", "score": 0.027874798885038257, "span_start": null, "span_end": null, "passage": "import inspect import sys from typing import ( Any, Dict, Generic, Optional, Set, Type Var, ) import pytest import typing extensions from pydantic import ( Base Model, Root Model, ) from pydantic.data"}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.024248653129353284, "span_start": null, "span_end": null, "passage": "def   call  (self,   value: Any) -> Any: ... class V1Validator With Values(Protocol): def   call  (self,   value: Any, *, values: dict[str, Any]) -> Any: ... class V1Validator With Kwargs(Protocol): d"}, {"qid": "", "rank": 20, "path": "docs/plugins/griffe_doclinks.py", "score": 0.023525998491853453, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}], "latency_ms": 1.3842582702636719, "gold_paths": ["pydantic/_migration.py"]}
{"qid": "lens_main_symbol_81d3193d", "query": "find constant REDIRECT_TO_V1", "results": [{"qid": "", "rank": 1, "path": "tests/test_migration.py", "score": 0.18551872942242464, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d"}, {"qid": "", "rank": 2, "path": "tests/test_v1.py", "score": 0.11957455919327872, "span_start": null, "span_end": null, "passage": "from pydantic import VERSION from pydantic.v1 import VERSION as V1 VERSION from pydantic.v1 import Base Model as V1Base Model from pydantic.v1 import root validator as v1 root validator def test versi"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.09247580358445738, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/__init__.py", "score": 0.07969811343998774, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator"}, {"qid": "", "rank": 5, "path": "pydantic/_migration.py", "score": 0.05219746661931681, "span_start": null, "span_end": null, "passage": "...c.errors:Url Scheme Permitted Error', 'pydantic.errors:Url User Info Error', 'pydantic.errors:Wrong Constant Error', 'pydantic.main:validate model', 'pydantic.networks:stricturl', 'pydantic:parse file..."}, {"qid": "", "rank": 6, "path": "pydantic/deprecated/class_validators.py", "score": 0.050454777120075615, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t"}, {"qid": "", "rank": 7, "path": "pydantic/config.py", "score": 0.0485007803289246, "span_start": null, "span_end": null, "passage": "...oat values. Defaults to `'null'`. - `'null'` will serialize infinity and Na N values as `null`. - `'constants'` will serialize infinity and Na N values as `Infinity` and `Na N`. - `'strings'` will ser..."}, {"qid": "", "rank": 8, "path": "pydantic/dataclasses.py", "score": 0.04739868073511703, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args"}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.04651235656864105, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/utils.py", "score": 0.030031437525691707, "span_start": null, "span_end": null, "passage": "...e intersection of keys if ``intersect`` is set to ``True``. Hide class attribute from its instances Find out what sort of thing a path is. Return type as is for immutable built-in types Use obj.copy()..."}, {"qid": "", "rank": 11, "path": "pydantic/alias_generators.py", "score": 0.023385039330357703, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv"}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_dataclasses.py", "score": 0.022359947753938913, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 13, "path": "pydantic/fields.py", "score": 0.022188131905841773, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias"}, {"qid": "", "rank": 14, "path": "tests/test_validators.py", "score": 0.020914709671954846, "span_start": null, "span_end": null, "passage": "import contextlib import re from collections import deque from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools import partial, partialmethod from "}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.020333707118873764, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 16, "path": "tests/test_utils.py", "score": 0.020216522266763546, "span_start": null, "span_end": null, "passage": "import collections.abc import json import os import pickle import sys from copy import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest f"}, {"qid": "", "rank": 17, "path": "pydantic/functional_serializers.py", "score": 0.01983127015828515, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin"}, {"qid": "", "rank": 18, "path": "pydantic/v1/json.py", "score": 0.019706288731167202, "span_start": null, "span_end": null, "passage": "...E[base] except Key Error: continue return encoder(obj) else:  # We have exited the for loop without finding a suitable encoder raise Type Error(f\"Object of type '{obj.  class  .  name  }' is not JSON ..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/annotated_types.py", "score": 0.01916312847887565, "span_start": null, "span_end": null, "passage": "import sys from typing import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typ"}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.018638286492429663, "span_start": null, "span_end": null, "passage": "def   call  (self,   value: Any) -> Any: ... class V1Validator With Values(Protocol): def   call  (self,   value: Any, *, values: dict[str, Any]) -> Any: ... class V1Validator With Kwargs(Protocol): d"}], "latency_ms": 1.5134811401367188, "gold_paths": ["pydantic/_migration.py"]}
{"qid": "lens_main_symbol_a85f2c49", "query": "find constant REMOVED_IN_V2", "results": [{"qid": "", "rank": 1, "path": "tests/test_migration.py", "score": 0.31140429389686886, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d"}, {"qid": "", "rank": 2, "path": "pydantic/warnings.py", "score": 0.13326895461956884, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality"}, {"qid": "", "rank": 3, "path": "tests/test_warnings.py", "score": 0.12648406902178327, "span_start": null, "span_end": null, "passage": "from pydantic import Pydantic Deprecated Since20, Pydantic Deprecation Warning from pydantic.version import version short def test pydantic deprecation warning(): warning = Pydantic Deprecation Warnin"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_config.py", "score": 0.10970571754491265, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from contextlib import contextmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schem"}, {"qid": "", "rank": 5, "path": "pydantic/_migration.py", "score": 0.07008964765921426, "span_start": null, "span_end": null, "passage": "...c.errors:Url Scheme Permitted Error', 'pydantic.errors:Url User Info Error', 'pydantic.errors:Wrong Constant Error', 'pydantic.main:validate model', 'pydantic.networks:stricturl', 'pydantic:parse file..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.06045302006632263, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.04980515234482588, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 8, "path": "tests/test_deprecated.py", "score": 0.04363832329972279, "span_start": null, "span_end": null, "passage": "import platform import re from datetime import date, timedelta from pathlib import Path from types import Simple Namespace from typing import Any, Dict, Iterable, List, Type import pytest from pydanti"}, {"qid": "", "rank": 9, "path": "pydantic/config.py", "score": 0.030792845833125772, "span_start": null, "span_end": null, "passage": "...oat values. Defaults to `'null'`. - `'null'` will serialize infinity and Na N values as `null`. - `'constants'` will serialize infinity and Na N values as `Infinity` and `Na N`. - `'strings'` will ser..."}, {"qid": "", "rank": 10, "path": "pydantic/dataclasses.py", "score": 0.027574811673723512, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args"}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.02674010405233532, "span_start": null, "span_end": null, "passage": "def   call  (self,   value: Any) -> Any: ... class V1Validator With Values(Protocol): def   call  (self,   value: Any, *, values: dict[str, Any]) -> Any: ... class V1Validator With Kwargs(Protocol): d"}, {"qid": "", "rank": 12, "path": "docs/plugins/griffe_doclinks.py", "score": 0.025943199576958235, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/utils.py", "score": 0.02351656149235855, "span_start": null, "span_end": null, "passage": "...e intersection of keys if ``intersect`` is set to ``True``. Hide class attribute from its instances Find out what sort of thing a path is. Return type as is for immutable built-in types Use obj.copy()..."}, {"qid": "", "rank": 14, "path": "pydantic/experimental/pipeline.py", "score": 0.019900180513144225, "span_start": null, "span_end": null, "passage": " steps: tuple[ Step, ...] def transform( self, func: Callable[[ Out T],  New Out T], ) ->  Pipeline[ In T,  New Out T]: return  Pipeline[ In T,  New Out T](self. steps + ( Transform(func),)) @overload"}, {"qid": "", "rank": 15, "path": "tests/test_docs.py", "score": 0.018872075362665774, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 16, "path": "tests/test_exports.py", "score": 0.016307285919159496, "span_start": null, "span_end": null, "passage": "import importlib import importlib.util import json import platform import sys from pathlib import Path from types import Module Type import pytest import pydantic @pytest.mark.filterwarnings('ignore::"}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_generics.py", "score": 0.015946767683113077, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p"}, {"qid": "", "rank": 18, "path": "tests/test_validate_call.py", "score": 0.015701570354937477, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_fields.py", "score": 0.015284613925773238, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo"}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.01497269687394366, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core "}], "latency_ms": 1.554250717163086, "gold_paths": ["pydantic/_migration.py"]}
{"qid": "lens_main_symbol_766c3e00", "query": "find function to_pascal", "results": [{"qid": "", "rank": 1, "path": "pydantic/validate_call_decorator.py", "score": 0.12818962724140592, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11470808409184802, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/deprecated/class_validators.py", "score": 0.11390251669572862, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 4, "path": "pydantic/config.py", "score": 0.10330050764544074, "span_start": null, "span_end": null, "passage": "...specified mode will be used to generate the JSON schema regardless of what `mode` was passed to the function call. Defaults to `None`. This provides a way to force the JSON schema generation to reflec..."}, {"qid": "", "rank": 5, "path": "pydantic/alias_generators.py", "score": 0.08231157767576339, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv"}, {"qid": "", "rank": 6, "path": "pydantic/functional_serializers.py", "score": 0.07513344566599926, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.06644866759047688, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 8, "path": "pydantic/deprecated/decorator.py", "score": 0.05883667568417709, "span_start": null, "span_end": null, "passage": "...ping extra from ..alias generators import to pascal from ..errors import Pydantic User Error from ..functional validators import field validator from ..main import Base Model, create model from ..warn..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05769447900728944, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "tests/conftest.py", "score": 0.050217468691537405, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 11, "path": "tests/test_utils.py", "score": 0.04364646218573332, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 12, "path": "pydantic/functional_validators.py", "score": 0.037563810501790786, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/utils.py", "score": 0.037531043928977825, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_decorators.py", "score": 0.03639856686703635, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 15, "path": "pydantic/fields.py", "score": 0.033272423136468554, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 16, "path": "pydantic/types.py", "score": 0.030545667643197244, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_dataclasses.py", "score": 0.027735544519012282, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 18, "path": "pydantic/v1/decorator.py", "score": 0.026472579798648872, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.0261217591777605, "span_start": null, "span_end": null, "passage": "...js schema.update(f()) return js schema if 'metadata' in s: metadata = s['metadata'] if 'pydantic js functions' in s: metadata['pydantic js functions'].append(update js schema) else: metadata['pydantic..."}, {"qid": "", "rank": 20, "path": "docs/plugins/griffe_doclinks.py", "score": 0.02522217159173515, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}], "latency_ms": 1.4700889587402344, "gold_paths": ["pydantic/alias_generators.py"]}
{"qid": "lens_main_symbol_e2b08db4", "query": "find function to_camel", "results": [{"qid": "", "rank": 1, "path": "tests/test_utils.py", "score": 0.2042496967357909, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 2, "path": "pydantic/validate_call_decorator.py", "score": 0.133648238550794, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 3, "path": "pydantic/alias_generators.py", "score": 0.12521762748987325, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11959262006075946, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 5, "path": "pydantic/deprecated/class_validators.py", "score": 0.11875274973862679, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.09065821768584043, "span_start": null, "span_end": null, "passage": "...specified mode will be used to generate the JSON schema regardless of what `mode` was passed to the function call. Defaults to `None`. This provides a way to force the JSON schema generation to reflec..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_serializers.py", "score": 0.07833280184677177, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 8, "path": "pydantic/dataclasses.py", "score": 0.06927820580046072, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.060151243586262455, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/utils.py", "score": 0.055615272798618484, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 11, "path": "tests/conftest.py", "score": 0.05235584484901114, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/decorator.py", "score": 0.04557659328019449, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 13, "path": "pydantic/functional_validators.py", "score": 0.03916336457836707, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_decorators.py", "score": 0.037948502170083595, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 15, "path": "pydantic/fields.py", "score": 0.03783276109547541, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 16, "path": "pydantic/types.py", "score": 0.03184637293767452, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_dataclasses.py", "score": 0.02891658826055, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.027234084200754072, "span_start": null, "span_end": null, "passage": "...js schema.update(f()) return js schema if 'metadata' in s: metadata = s['metadata'] if 'pydantic js functions' in s: metadata['pydantic js functions'].append(update js schema) else: metadata['pydantic..."}, {"qid": "", "rank": 19, "path": "docs/plugins/griffe_doclinks.py", "score": 0.02629619009120935, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 20, "path": "pydantic/color.py", "score": 0.023866961409351076, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}], "latency_ms": 1.5532970428466797, "gold_paths": ["pydantic/alias_generators.py"]}
{"qid": "lens_main_symbol_b62e11a1", "query": "find function to_snake", "results": [{"qid": "", "rank": 1, "path": "tests/test_utils.py", "score": 0.27228525988658286, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 2, "path": "pydantic/alias_generators.py", "score": 0.2036076150847004, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv"}, {"qid": "", "rank": 3, "path": "pydantic/validate_call_decorator.py", "score": 0.1227976970453887, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10988321646681495, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 5, "path": "pydantic/deprecated/class_validators.py", "score": 0.1091115329602234, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.07368241464452616, "span_start": null, "span_end": null, "passage": "...specified mode will be used to generate the JSON schema regardless of what `mode` was passed to the function call. Defaults to `None`. This provides a way to force the JSON schema generation to reflec..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_serializers.py", "score": 0.07197317206871037, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 8, "path": "pydantic/dataclasses.py", "score": 0.06365369435452635, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.055267725687248546, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "tests/conftest.py", "score": 0.048105214434837375, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_validators.py", "score": 0.03598379620203274, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 12, "path": "pydantic/fields.py", "score": 0.035752487618828856, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.03486756520952679, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/types.py", "score": 0.029260851459024254, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_dataclasses.py", "score": 0.02656892813036007, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 16, "path": "pydantic/v1/decorator.py", "score": 0.02535908641034214, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.025023022055930703, "span_start": null, "span_end": null, "passage": "...js schema.update(f()) return js schema if 'metadata' in s: metadata = s['metadata'] if 'pydantic js functions' in s: metadata['pydantic js functions'].append(update js schema) else: metadata['pydantic..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.02416127304993272, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/utils.py", "score": 0.02197220373833737, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 20, "path": "pydantic/color.py", "score": 0.021929266919785122, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}], "latency_ms": 1.5802383422851562, "gold_paths": ["pydantic/alias_generators.py"]}
{"qid": "lens_main_symbol_0c5d01a7", "query": "find function __init__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12374659517325025, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/dataclasses.py", "score": 0.09496710100636703, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09331708300994399, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.09023423980156955, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.08845341765938099, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/errors.py", "score": 0.08685779347548213, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.07346440999595533, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 8, "path": "tests/test_dataclasses.py", "score": 0.06964617672208902, "span_start": null, "span_end": null, "passage": "...e)) class Built In Dataclass For Pickle: value: int The reason for the convoluted structure of this function is to avoid creating the classes while collecting tests, which may trigger breakpoints etc...."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.062044421940468504, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/decorator.py", "score": 0.05346925701646643, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.039687056573199354, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.03746147929267824, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03709131284305777, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 16, "path": "pydantic/mypy.py", "score": 0.03670085345009195, "span_start": null, "span_end": null, "passage": "...MODEL METACLASS FULLNAME: return self. pydantic model metaclass marker callback return None def get function hook(self, fullname: str) -> Callable[[Function Context], Type] | None: if fullname.endswit..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/env_settings.py", "score": 0.03555322061256917, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/errors.py", "score": 0.03552027217402846, "span_start": null, "span_end": null, "passage": "from decimal import Decimal from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING:"}, {"qid": "", "rank": 19, "path": "pydantic/deprecated/class_validators.py", "score": 0.033675435672403685, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_core_metadata.py", "score": 0.033418430511128736, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}], "latency_ms": 1.4286041259765625, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_3dc10b0f", "query": "find function convert_to_aliases", "results": [{"qid": "", "rank": 1, "path": "pydantic/alias_generators.py", "score": 0.15871584384895307, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv"}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.1216145696912518, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/aliases.py", "score": 0.12038254779627136, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat"}, {"qid": "", "rank": 4, "path": "pydantic/functional_serializers.py", "score": 0.09874206661276821, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 5, "path": "pydantic/deprecated/class_validators.py", "score": 0.08622244156234557, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 6, "path": "pydantic/validate_call_decorator.py", "score": 0.07542834571249638, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 7, "path": "pydantic/config.py", "score": 0.07201660419967017, "span_start": null, "span_end": null, "passage": "...specified mode will be used to generate the JSON schema regardless of what `mode` was passed to the function call. Defaults to `None`. This provides a way to force the JSON schema generation to reflec..."}, {"qid": "", "rank": 8, "path": "pydantic/dataclasses.py", "score": 0.07044949080574155, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06116821925483722, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/utils.py", "score": 0.055491198127321, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 11, "path": "tests/conftest.py", "score": 0.05324102389344372, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 12, "path": "pydantic/fields.py", "score": 0.0380992842641506, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.03557614658053519, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/types.py", "score": 0.03504132408509215, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 15, "path": "tests/test_utils.py", "score": 0.03363788453706108, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 16, "path": "pydantic/functional_validators.py", "score": 0.032839846992840996, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 17, "path": "tests/mypy/test_mypy.py", "score": 0.02985925544218786, "span_start": null, "span_end": null, "passage": "... a boolean for key: init forbid extra' def get expected return code(source code: str) -> int: if re.findall(r'^\\s*# MYPY:', source code, flags=re.MULTILINE): return 1 return 0 @pytest.mark.parametrize..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_dataclasses.py", "score": 0.029405480342007986, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 19, "path": "pydantic/v1/decorator.py", "score": 0.028066473486316433, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.027694530225421274, "span_start": null, "span_end": null, "passage": "...js schema.update(f()) return js schema if 'metadata' in s: metadata = s['metadata'] if 'pydantic js functions' in s: metadata['pydantic js functions'].append(update js schema) else: metadata['pydantic..."}], "latency_ms": 1.5256404876708984, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_76307c9a", "query": "find function search_dict_for_path", "results": [{"qid": "", "rank": 1, "path": "docs/plugins/griffe_doclinks.py", "score": 0.12142982621545473, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 2, "path": "tests/check_usage_docs.py", "score": 0.10692546637155509, "span_start": null, "span_end": null, "passage": "import re import sys from pathlib import Path ROOT DIR = Path(  file  ).parent.parent PYDANTIC DIR = ROOT DIR / 'pydantic' version file = PYDANTIC DIR / 'version.py' version = re.search(rb\"VERSION = '"}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.09823325773863056, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.0893021427544112, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07865515393391206, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_typing_extra.py", "score": 0.07612481701060601, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}, {"qid": "", "rank": 7, "path": "tests/test_fastapi_json_schema.py", "score": 0.07340786346780523, "span_start": null, "span_end": null, "passage": "... info: str) -> Json Schema Value: if Core Metadata Handler(schema).metadata.get('pydantic js modify function') is not None: return {} else: error = Pydantic Invalid For Json Schema(f'Cannot generate a..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/utils.py", "score": 0.06354946020017763, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 9, "path": "pydantic/functional_serializers.py", "score": 0.06090654002491799, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_git.py", "score": 0.058946879962071486, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 11, "path": "pydantic/validate_call_decorator.py", "score": 0.05622229179104849, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/success.py", "score": 0.05479309551534661, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro"}, {"qid": "", "rank": 13, "path": "tests/mypy/modules/success.py", "score": 0.05479309551534661, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro"}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/success.py", "score": 0.05479309551534661, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro"}, {"qid": "", "rank": 15, "path": "pydantic/v1/env_settings.py", "score": 0.05219553206371003, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 16, "path": "tests/test_json.py", "score": 0.05200342193851848, "span_start": null, "span_end": null, "passage": "... dataclass from pydantic.deprecated.json import pydantic encoder, timedelta isoformat from pydantic.functional serializers import ( field serializer, ) from pydantic.json schema import Json Schema Val..."}, {"qid": "", "rank": 17, "path": "tests/mypy/modules/with_config_decorator.py", "score": 0.0516706217763473, "span_start": null, "span_end": null, "passage": "from typing import Typed Dict from pydantic import Config Dict, with config @with config(Config Dict(str to lower=True)) class Model(Typed Dict): a: str model = Model(a='ABC')"}, {"qid": "", "rank": 18, "path": "tests/test_docs.py", "score": 0.0515461639441451, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_decorators.py", "score": 0.05089354073862526, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 20, "path": "tests/mypy/test_mypy.py", "score": 0.048437738291206386, "span_start": null, "span_end": null, "passage": "... a boolean for key: init forbid extra' def get expected return code(source code: str) -> int: if re.findall(r'^\\s*# MYPY:', source code, flags=re.MULTILINE): return 1 return 0 @pytest.mark.parametrize..."}], "latency_ms": 1.2934207916259766, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_0c5d01a7", "query": "find function __init__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12374659517325025, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/dataclasses.py", "score": 0.09496710100636703, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09331708300994399, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.09023423980156955, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.08845341765938099, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/errors.py", "score": 0.08685779347548213, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.07346440999595533, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 8, "path": "tests/test_dataclasses.py", "score": 0.06964617672208902, "span_start": null, "span_end": null, "passage": "...e)) class Built In Dataclass For Pickle: value: int The reason for the convoluted structure of this function is to avoid creating the classes while collecting tests, which may trigger breakpoints etc...."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.062044421940468504, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/decorator.py", "score": 0.05346925701646643, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.039687056573199354, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.03746147929267824, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03709131284305777, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 16, "path": "pydantic/mypy.py", "score": 0.03670085345009195, "span_start": null, "span_end": null, "passage": "...MODEL METACLASS FULLNAME: return self. pydantic model metaclass marker callback return None def get function hook(self, fullname: str) -> Callable[[Function Context], Type] | None: if fullname.endswit..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/env_settings.py", "score": 0.03555322061256917, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/errors.py", "score": 0.03552027217402846, "span_start": null, "span_end": null, "passage": "from decimal import Decimal from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING:"}, {"qid": "", "rank": 19, "path": "pydantic/deprecated/class_validators.py", "score": 0.033675435672403685, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_core_metadata.py", "score": 0.033418430511128736, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}], "latency_ms": 1.3089179992675781, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_3dc10b0f", "query": "find function convert_to_aliases", "results": [{"qid": "", "rank": 1, "path": "pydantic/alias_generators.py", "score": 0.15871584384895307, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv"}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.1216145696912518, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/aliases.py", "score": 0.12038254779627136, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat"}, {"qid": "", "rank": 4, "path": "pydantic/functional_serializers.py", "score": 0.09874206661276821, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 5, "path": "pydantic/deprecated/class_validators.py", "score": 0.08622244156234557, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 6, "path": "pydantic/validate_call_decorator.py", "score": 0.07542834571249638, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 7, "path": "pydantic/config.py", "score": 0.07201660419967017, "span_start": null, "span_end": null, "passage": "...specified mode will be used to generate the JSON schema regardless of what `mode` was passed to the function call. Defaults to `None`. This provides a way to force the JSON schema generation to reflec..."}, {"qid": "", "rank": 8, "path": "pydantic/dataclasses.py", "score": 0.07044949080574155, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06116821925483722, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/utils.py", "score": 0.055491198127321, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 11, "path": "tests/conftest.py", "score": 0.05324102389344372, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 12, "path": "pydantic/fields.py", "score": 0.0380992842641506, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.03557614658053519, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/types.py", "score": 0.03504132408509215, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 15, "path": "tests/test_utils.py", "score": 0.03363788453706108, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 16, "path": "pydantic/functional_validators.py", "score": 0.032839846992840996, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 17, "path": "tests/mypy/test_mypy.py", "score": 0.02985925544218786, "span_start": null, "span_end": null, "passage": "... a boolean for key: init forbid extra' def get expected return code(source code: str) -> int: if re.findall(r'^\\s*# MYPY:', source code, flags=re.MULTILINE): return 1 return 0 @pytest.mark.parametrize..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_dataclasses.py", "score": 0.029405480342007986, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 19, "path": "pydantic/v1/decorator.py", "score": 0.028066473486316433, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.027694530225421274, "span_start": null, "span_end": null, "passage": "...js schema.update(f()) return js schema if 'metadata' in s: metadata = s['metadata'] if 'pydantic js functions' in s: metadata['pydantic js functions'].append(update js schema) else: metadata['pydantic..."}], "latency_ms": 1.4619827270507812, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_1bec8db8", "query": "find function _generate_alias", "results": [{"qid": "", "rank": 1, "path": "tests/test_aliases.py", "score": 0.20654411584503637, "span_start": null, "span_end": null, "passage": "...g Dict(alias generator=return bytes) bar: Any assert str(e.value) == Is Str(regex=\"alias generator <function .*> must return str, not <class 'bytes'>\") def test basic alias(): class Model(Base Model):..."}, {"qid": "", "rank": 2, "path": "tests/conftest.py", "score": 0.15718024124283006, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10890371000289308, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 13, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.09510993896587583, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):"}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.09339436573502907, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base"}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.09339436573502907, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base"}, {"qid": "", "rank": 19, "path": "tests/mypy/modules/plugin_fail.py", "score": 0.09339436573502907, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base"}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail.py", "score": 0.09339436573502907, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base"}], "latency_ms": 1.2445449829101562, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_9b500636", "query": "find function generate_aliases", "results": [{"qid": "", "rank": 1, "path": "pydantic/aliases.py", "score": 0.14320948099755734, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat"}, {"qid": "", "rank": 2, "path": "tests/conftest.py", "score": 0.14148793595667952, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.09803115852538502, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07392511886785076, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.0700721583211146, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "tests/test_fastapi_json_schema.py", "score": 0.06532208844065876, "span_start": null, "span_end": null, "passage": "... info: str) -> Json Schema Value: if Core Metadata Handler(schema).metadata.get('pydantic js modify function') is not None: return {} else: error = Pydantic Invalid For Json Schema(f'Cannot generate a..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/utils.py", "score": 0.06010010249265886, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 8, "path": "pydantic/annotated_handlers.py", "score": 0.05180540313406451, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_generate_schema.py", "score": 0.049985264731335056, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 10, "path": "pydantic/functional_serializers.py", "score": 0.04915114273929312, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_validate_call.py", "score": 0.046450992189065884, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import inspect from functools import partial from typing import Any, Awaitable, Callable import pydantic core from ..config import Config Dict from ."}, {"qid": "", "rank": 12, "path": "pydantic/type_adapter.py", "score": 0.03594589390542876, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/decorator.py", "score": 0.0352076209452673, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 14, "path": "pydantic/deprecated/tools.py", "score": 0.03430538231128868, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 15, "path": "tests/test_config.py", "score": 0.03422357680397369, "span_start": null, "span_end": null, "passage": "...st.warns(User Warning, match=re.escape(warning message)): @validate call(config=config dict) def my function(): pass def test invalid extra(): extra error = re.escape( \"Input should be 'allow', 'forbi..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators.py", "score": 0.03143979944568395, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 17, "path": "pydantic/functional_validators.py", "score": 0.029676713205680293, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.029383470019047814, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 19, "path": "tests/test_type_adapter.py", "score": 0.028584280180219294, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp"}, {"qid": "", "rank": 20, "path": "pydantic/mypy.py", "score": 0.027380668209690748, "span_start": null, "span_end": null, "passage": "...MODEL METACLASS FULLNAME: return self. pydantic model metaclass marker callback return None def get function hook(self, fullname: str) -> Callable[[Function Context], Type] | None: if fullname.endswit..."}], "latency_ms": 1.3837814331054688, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_f76f2259", "query": "find class AliasPath", "results": [{"qid": "", "rank": 1, "path": "tests/test_aliases.py", "score": 0.20495057001771977, "span_start": null, "span_end": null, "passage": "...s generator(): def to camel(string: str): return ''.join(x.capitalize() for x in string.split(' ')) class My Model(Base Model): model config = Config Dict(alias generator=to camel) a: List[str] = None..."}, {"qid": "", "rank": 2, "path": "pydantic/aliases.py", "score": 0.1408781017238067, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat..."}, {"qid": "", "rank": 3, "path": "docs/plugins/griffe_doclinks.py", "score": 0.11833658884839092, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 6, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.11184092339060359, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.10328524557481468, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail.py", "score": 0.10328524557481468, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.10328524557481468, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.10328524557481468, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}], "latency_ms": 1.214742660522461, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_e8db5eb6", "query": "find class AliasChoices", "results": [{"qid": "", "rank": 1, "path": "tests/test_aliases.py", "score": 0.1898582281739182, "span_start": null, "span_end": null, "passage": "...s generator(): def to camel(string: str): return ''.join(x.capitalize() for x in string.split(' ')) class My Model(Base Model): model config = Config Dict(alias generator=to camel) a: List[str] = None..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.10291304245437327, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail.py", "score": 0.09504033533081782, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.09504033533081782, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.09504033533081782, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail.py", "score": 0.09504033533081782, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.09504033533081782, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail.py", "score": 0.09504033533081782, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}], "latency_ms": 1.262664794921875, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_c4f077f6", "query": "find class AliasGenerator", "results": [{"qid": "", "rank": 1, "path": "tests/test_aliases.py", "score": 0.31303578105738156, "span_start": null, "span_end": null, "passage": "...s generator(): def to camel(string: str): return ''.join(x.capitalize() for x in string.split(' ')) class My Model(Base Model): model config = Config Dict(alias generator=to camel) a: List[str] = None..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.2684803705484249, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.2561542822673447, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.2561542822673447, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail.py", "score": 0.2561542822673447, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail.py", "score": 0.2561542822673447, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.2561542822673447, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail.py", "score": 0.2561542822673447, "span_start": null, "span_end": null, "passage": "...Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): model config = Config Dict(alias generator=None, f..."}], "latency_ms": 1.222848892211914, "gold_paths": ["pydantic/aliases.py"]}
{"qid": "lens_main_symbol_8b32ffac", "query": "find function __call__", "results": [{"qid": "", "rank": 1, "path": "pydantic/validate_call_decorator.py", "score": 0.15780202245445996, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 2, "path": "tests/test_validate_call.py", "score": 0.12225469194599867, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12031759097881158, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.11664642733325173, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09073127716529923, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.4.1/pyproject-default_toml/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.07039775002596847, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.04916809894821393, "span_start": null, "span_end": null, "passage": "...NLY) def make generic v1 field validator(validator: V1Validator) -> core schema.With Info Validator Function: sig = signature(validator) needs values kw = False for param num, (param name, parameter) ..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/decorator.py", "score": 0.048907877697119476, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.04886319718234666, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_validate_call.py", "score": 0.0422060919881379, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import inspect from functools import partial from typing import Any, Awaitable, Callable import pydantic core from ..config import Config Dict from ."}, {"qid": "", "rank": 16, "path": "pydantic/annotated_handlers.py", "score": 0.040484256690795875, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_decorators.py", "score": 0.04037637357621104, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_forward_ref.py", "score": 0.036508960065641416, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations from dataclasses import dataclass from typing import Union @dataclass class Pydantic Recursive Ref: type ref: str   name   = 'Pydantic Recursive Ref'"}, {"qid": "", "rank": 19, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03606351674783579, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 20, "path": "pydantic/deprecated/class_validators.py", "score": 0.03274229314829177, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}], "latency_ms": 1.165628433227539, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_82752dd1", "query": "find function resolve_ref_schema", "results": [{"qid": "", "rank": 1, "path": "pydantic/annotated_handlers.py", "score": 0.2772616956061112, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_generate_schema.py", "score": 0.21937294498933507, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.2136281168461325, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_core_utils.py", "score": 0.19656033102416445, "span_start": null, "span_end": null, "passage": "...ype Guard, get args, get origin from . import  repr from . typing extra import is generic alias Any Function Schema = Union[ core schema.After Validator Function Schema, core schema.Before Validator F..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.19421066109788063, "span_start": null, "span_end": null, "passage": "...on Schema Handler if typing.TYPE CHECKING: from . generate schema import Generate Schema Std Schema Function = Callable[[Generate Schema, type[Any]], core schema.Core Schema] @dataclasses.dataclass(**..."}, {"qid": "", "rank": 6, "path": "tests/test_types_self.py", "score": 0.13709654737501414, "span_start": null, "span_end": null, "passage": "import dataclasses import typing from typing import List, Optional, Union import pytest import typing extensions from typing extensions import Named Tuple, Typed Dict from pydantic import Base Model, "}, {"qid": "", "rank": 7, "path": "pydantic/json_schema.py", "score": 0.1321302911660206, "span_start": null, "span_end": null, "passage": "...aclasses import Pydantic Dataclass from . internal. schema generation shared import Get Json Schema Function from .main import Base Model Core Schema Or Field Type = Literal[core schema.Core Schema Ty..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/schema.py", "score": 0.1217317125754563, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu"}, {"qid": "", "rank": 9, "path": "tests/test_internal.py", "score": 0.11983721508211452, "span_start": null, "span_end": null, "passage": "from dataclasses import dataclass import pytest from pydantic core import Core Schema, Schema Validator from pydantic core import core schema as cs from pydantic. internal. core utils import ( HAS INV"}, {"qid": "", "rank": 10, "path": "tests/test_json_schema.py", "score": 0.11690140873374372, "span_start": null, "span_end": null, "passage": "...data(): assert build metadata dict(initial metadata={'foo': 'bar'}) == { 'foo': 'bar', 'pydantic js functions': [], 'pydantic js annotation functions': [], } with pytest.raises(Type Error, match=re.es..."}, {"qid": "", "rank": 11, "path": "tests/test_fastapi_json_schema.py", "score": 0.11069060589175599, "span_start": null, "span_end": null, "passage": "... info: str) -> Json Schema Value: if Core Metadata Handler(schema).metadata.get('pydantic js modify function') is not None: return {} else: error = Pydantic Invalid For Json Schema(f'Cannot generate a..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.09965945941066917, "span_start": null, "span_end": null, "passage": "...-union', 'lax-or-strict', 'dataclass', 'dataclass-args', 'definition-ref', } and not  core utils.is function with inner schema(choice): raise Type Error( f'{choice[\"type\"]!r} is not a valid discrimina..."}, {"qid": "", "rank": 13, "path": "pydantic/types.py", "score": 0.09238132129897667, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 14, "path": "tests/test_utils.py", "score": 0.0917538426106022, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 15, "path": "pydantic/deprecated/tools.py", "score": 0.08897331852941369, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 16, "path": "pydantic/type_adapter.py", "score": 0.08420295938323974, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 17, "path": "pydantic/functional_validators.py", "score": 0.07689171221738283, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 18, "path": "tests/conftest.py", "score": 0.07680190498106651, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_core_metadata.py", "score": 0.07325090094608762, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 20, "path": "tests/test_json.py", "score": 0.07296126302645606, "span_start": null, "span_end": null, "passage": "... dataclass from pydantic.deprecated.json import pydantic encoder, timedelta isoformat from pydantic.functional serializers import ( field serializer, ) from pydantic.json schema import Json Schema Val..."}], "latency_ms": 1.4801025390625, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_8b32ffac", "query": "find function __call__", "results": [{"qid": "", "rank": 1, "path": "pydantic/validate_call_decorator.py", "score": 0.15780202245445996, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 2, "path": "tests/test_validate_call.py", "score": 0.12225469194599867, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12031759097881158, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.11664642733325173, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09073127716529923, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.4.1/pyproject-default_toml/fail4.py", "score": 0.08072970631779028, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.07039775002596847, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.04916809894821393, "span_start": null, "span_end": null, "passage": "...NLY) def make generic v1 field validator(validator: V1Validator) -> core schema.With Info Validator Function: sig = signature(validator) needs values kw = False for param num, (param name, parameter) ..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/decorator.py", "score": 0.048907877697119476, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.04886319718234666, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_validate_call.py", "score": 0.0422060919881379, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import inspect from functools import partial from typing import Any, Awaitable, Callable import pydantic core from ..config import Config Dict from ."}, {"qid": "", "rank": 16, "path": "pydantic/annotated_handlers.py", "score": 0.040484256690795875, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_decorators.py", "score": 0.04037637357621104, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_forward_ref.py", "score": 0.036508960065641416, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations from dataclasses import dataclass from typing import Union @dataclass class Pydantic Recursive Ref: type ref: str   name   = 'Pydantic Recursive Ref'"}, {"qid": "", "rank": 19, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03606351674783579, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 20, "path": "pydantic/deprecated/class_validators.py", "score": 0.03274229314829177, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}], "latency_ms": 1.2776851654052734, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_f575552d", "query": "find function generate_schema", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_generate_schema.py", "score": 0.26810715033366755, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 2, "path": "tests/conftest.py", "score": 0.26081280991389044, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 3, "path": "pydantic/annotated_handlers.py", "score": 0.2288478266080546, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_core_utils.py", "score": 0.2132920889395048, "span_start": null, "span_end": null, "passage": "...ype Guard, get args, get origin from . import  repr from . typing extra import is generic alias Any Function Schema = Union[ core schema.After Validator Function Schema, core schema.Before Validator F..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.20692544376837088, "span_start": null, "span_end": null, "passage": "...on Schema Handler if typing.TYPE CHECKING: from . generate schema import Generate Schema Std Schema Function = Callable[[Generate Schema, type[Any]], core schema.Core Schema] @dataclasses.dataclass(**..."}, {"qid": "", "rank": 6, "path": "tests/test_fastapi_json_schema.py", "score": 0.1980619992015751, "span_start": null, "span_end": null, "passage": "... info: str) -> Json Schema Value: if Core Metadata Handler(schema).metadata.get('pydantic js modify function') is not None: return {} else: error = Pydantic Invalid For Json Schema(f'Cannot generate a..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.1696158216141211, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_validate_call.py", "score": 0.16928791356934336, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import inspect from functools import partial from typing import Any, Awaitable, Callable import pydantic core from ..config import Config Dict from ."}, {"qid": "", "rank": 9, "path": "pydantic/json_schema.py", "score": 0.15677638424636778, "span_start": null, "span_end": null, "passage": "...aclasses import Pydantic Dataclass from . internal. schema generation shared import Get Json Schema Function from .main import Base Model Core Schema Or Field Type = Literal[core schema.Core Schema Ty..."}, {"qid": "", "rank": 10, "path": "tests/test_json_schema.py", "score": 0.13436687416121396, "span_start": null, "span_end": null, "passage": "...data(): assert build metadata dict(initial metadata={'foo': 'bar'}) == { 'foo': 'bar', 'pydantic js functions': [], 'pydantic js annotation functions': [], } with pytest.raises(Type Error, match=re.es..."}, {"qid": "", "rank": 11, "path": "pydantic/types.py", "score": 0.11873003810426419, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 12, "path": "tests/test_config.py", "score": 0.10910009260959672, "span_start": null, "span_end": null, "passage": "...st.warns(User Warning, match=re.escape(warning message)): @validate call(config=config dict) def my function(): pass def test invalid extra(): extra error = re.escape( \"Input should be 'allow', 'forbi..."}, {"qid": "", "rank": 13, "path": "pydantic/deprecated/tools.py", "score": 0.10744260587656498, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 14, "path": "tests/test_utils.py", "score": 0.10256580232780281, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 15, "path": "pydantic/type_adapter.py", "score": 0.09919666030255318, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.0991959152292145, "span_start": null, "span_end": null, "passage": "...-union', 'lax-or-strict', 'dataclass', 'dataclass-args', 'definition-ref', } and not  core utils.is function with inner schema(choice): raise Type Error( f'{choice[\"type\"]!r} is not a valid discrimina..."}, {"qid": "", "rank": 17, "path": "pydantic/functional_validators.py", "score": 0.09792181371347382, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 18, "path": "tests/test_type_adapter.py", "score": 0.09757447150104562, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp"}, {"qid": "", "rank": 19, "path": "tests/test_internal.py", "score": 0.09677332384496481, "span_start": null, "span_end": null, "passage": "from dataclasses import dataclass import pytest from pydantic core import Core Schema, Schema Validator from pydantic core import core schema as cs from pydantic. internal. core utils import ( HAS INV"}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_core_metadata.py", "score": 0.09328523022752189, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}], "latency_ms": 1.5761852264404297, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_82752dd1", "query": "find function resolve_ref_schema", "results": [{"qid": "", "rank": 1, "path": "pydantic/annotated_handlers.py", "score": 0.2772616956061112, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_generate_schema.py", "score": 0.21937294498933507, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.2136281168461325, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_core_utils.py", "score": 0.19656033102416445, "span_start": null, "span_end": null, "passage": "...ype Guard, get args, get origin from . import  repr from . typing extra import is generic alias Any Function Schema = Union[ core schema.After Validator Function Schema, core schema.Before Validator F..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.19421066109788063, "span_start": null, "span_end": null, "passage": "...on Schema Handler if typing.TYPE CHECKING: from . generate schema import Generate Schema Std Schema Function = Callable[[Generate Schema, type[Any]], core schema.Core Schema] @dataclasses.dataclass(**..."}, {"qid": "", "rank": 6, "path": "tests/test_types_self.py", "score": 0.13709654737501414, "span_start": null, "span_end": null, "passage": "import dataclasses import typing from typing import List, Optional, Union import pytest import typing extensions from typing extensions import Named Tuple, Typed Dict from pydantic import Base Model, "}, {"qid": "", "rank": 7, "path": "pydantic/json_schema.py", "score": 0.1321302911660206, "span_start": null, "span_end": null, "passage": "...aclasses import Pydantic Dataclass from . internal. schema generation shared import Get Json Schema Function from .main import Base Model Core Schema Or Field Type = Literal[core schema.Core Schema Ty..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/schema.py", "score": 0.1217317125754563, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu"}, {"qid": "", "rank": 9, "path": "tests/test_internal.py", "score": 0.11983721508211452, "span_start": null, "span_end": null, "passage": "from dataclasses import dataclass import pytest from pydantic core import Core Schema, Schema Validator from pydantic core import core schema as cs from pydantic. internal. core utils import ( HAS INV"}, {"qid": "", "rank": 10, "path": "tests/test_json_schema.py", "score": 0.11690140873374372, "span_start": null, "span_end": null, "passage": "...data(): assert build metadata dict(initial metadata={'foo': 'bar'}) == { 'foo': 'bar', 'pydantic js functions': [], 'pydantic js annotation functions': [], } with pytest.raises(Type Error, match=re.es..."}, {"qid": "", "rank": 11, "path": "tests/test_fastapi_json_schema.py", "score": 0.11069060589175599, "span_start": null, "span_end": null, "passage": "... info: str) -> Json Schema Value: if Core Metadata Handler(schema).metadata.get('pydantic js modify function') is not None: return {} else: error = Pydantic Invalid For Json Schema(f'Cannot generate a..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.09965945941066917, "span_start": null, "span_end": null, "passage": "...-union', 'lax-or-strict', 'dataclass', 'dataclass-args', 'definition-ref', } and not  core utils.is function with inner schema(choice): raise Type Error( f'{choice[\"type\"]!r} is not a valid discrimina..."}, {"qid": "", "rank": 13, "path": "pydantic/types.py", "score": 0.09238132129897667, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 14, "path": "tests/test_utils.py", "score": 0.0917538426106022, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 15, "path": "pydantic/deprecated/tools.py", "score": 0.08897331852941369, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 16, "path": "pydantic/type_adapter.py", "score": 0.08420295938323974, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 17, "path": "pydantic/functional_validators.py", "score": 0.07689171221738283, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 18, "path": "tests/conftest.py", "score": 0.07680190498106651, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_core_metadata.py", "score": 0.07325090094608762, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 20, "path": "tests/test_json.py", "score": 0.07296126302645606, "span_start": null, "span_end": null, "passage": "... dataclass from pydantic.deprecated.json import pydantic encoder, timedelta isoformat from pydantic.functional serializers import ( field serializer, ) from pydantic.json schema import Json Schema Val..."}], "latency_ms": 1.5246868133544922, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_6e72f6f9", "query": "find function field_name", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_signature.py", "score": 0.13119666027913196, "span_start": null, "span_end": null, "passage": "from   future   import annotations import dataclasses from inspect import Parameter, Signature, signature from typing import TYPE CHECKING, Any, Callable from pydantic core import Pydantic Undefined f"}, {"qid": "", "rank": 2, "path": "pydantic/v1/utils.py", "score": 0.11701907751405626, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11110939741215807, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_fields.py", "score": 0.1064799664694612, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo"}, {"qid": "", "rank": 5, "path": "tests/conftest.py", "score": 0.10532801020321099, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 6, "path": "tests/test_fields.py", "score": 0.10510430388106021, "span_start": null, "span_end": null, "passage": "from typing import Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def te"}, {"qid": "", "rank": 7, "path": "pydantic/v1/annotated_types.py", "score": 0.1047150604163392, "span_start": null, "span_end": null, "passage": "import sys from typing import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typ"}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_model_construction.py", "score": 0.09869680686023151, "span_start": null, "span_end": null, "passage": "...space to look for types in. This logic must be called after class has been created since validation functions must be bound and `get type hints` requires a class object. Args: cls: Base Model or datac..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/schema.py", "score": 0.09859080927435748, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu"}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_decorators.py", "score": 0.08924060368060542, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 11, "path": "tests/test_validators.py", "score": 0.087617899502354, "span_start": null, "span_end": null, "passage": "...Deprecated Since20, Pydantic User Error, Type Adapter, Validation Error, Validation Info, Validator Function Wrap Handler, errors, field validator, model validator, root validator, validate call, vali..."}, {"qid": "", "rank": 12, "path": "pydantic/fields.py", "score": 0.08538038905810023, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/main.py", "score": 0.08400486968722967, "span_start": null, "span_end": null, "passage": "...copy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve bases from typing import ( TYPE CHECKING, Abstract Set, Any, C..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08378739509542887, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/decorator.py", "score": 0.08321896921414978, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 16, "path": "tests/test_titles.py", "score": 0.08278486525183555, "span_start": null, "span_end": null, "passage": "import re import typing from typing import Any, Callable, List import pytest import typing extensions import pydantic from pydantic import Base Model, Config Dict, Field, Type Adapter, computed field "}, {"qid": "", "rank": 17, "path": "pydantic/validate_call_decorator.py", "score": 0.07942041493279194, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/mypy.py", "score": 0.07871120295174677, "span_start": null, "span_end": null, "passage": "... mypy.options import Options from mypy.plugin import ( Checker Plugin Interface, Class Def Context, Function Context, Method Context, Plugin, Report Config Context, Semantic Analyzer Plugin Interface,..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/class_validators.py", "score": 0.07122967898500844, "span_start": null, "span_end": null, "passage": "...p from functools import partial, partialmethod, wraps from itertools import chain from types import Function Type from typing import TYPE CHECKING, Any, Callable, Dict, Iterable, List, Optional, Set, ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_generate_schema.py", "score": 0.07053494288634951, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}], "latency_ms": 1.5528202056884766, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_4212c7c0", "query": "find function _get_types_namespace", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_dataclasses.py", "score": 0.1375059715540629, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 2, "path": "pydantic/main.py", "score": 0.10362447181350481, "span_start": null, "span_end": null, "passage": "...alidator and Schema Serializer.   pydantic custom init  : Whether the model has a custom `  init  ` function.   pydantic decorators  : Metadata containing the decorators defined on the model. This rep..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_model_construction.py", "score": 0.09994048375792469, "span_start": null, "span_end": null, "passage": "...space to look for types in. This logic must be called after class has been created since validation functions must be bound and `get type hints` requires a class object. Args: cls: Base Model or datac..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_fields.py", "score": 0.09889164745503795, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo"}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_generate_schema.py", "score": 0.0929155145715489, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08736186509609939, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08231575371462181, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 8, "path": "pydantic/dataclasses.py", "score": 0.07715717147316671, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_typing_extra.py", "score": 0.07429486366196322, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_generics.py", "score": 0.06879424795026114, "span_start": null, "span_end": null, "passage": "...ry: previous caller frame = sys. getframe(depth) except Value Error as e: raise Runtime Error('This function must be used inside another function') from e except Attribute Error:  # sys module does no..."}, {"qid": "", "rank": 11, "path": "tests/conftest.py", "score": 0.06643812801256165, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/typing.py", "score": 0.06539562808960375, "span_start": null, "span_end": null, "passage": "import sys import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Di"}, {"qid": "", "rank": 13, "path": "pydantic/validate_call_decorator.py", "score": 0.062445803296882846, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_decorators.py", "score": 0.0615370341015201, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/main.py", "score": 0.06092461383657698, "span_start": null, "span_end": null, "passage": "...copy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve bases from typing import ( TYPE CHECKING, Abstract Set, Any, C..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.054429605666818655, "span_start": null, "span_end": null, "passage": "...on Schema Handler if typing.TYPE CHECKING: from . generate schema import Generate Schema Std Schema Function = Callable[[Generate Schema, type[Any]], core schema.Core Schema] @dataclasses.dataclass(**..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/generics.py", "score": 0.04925678083330671, "span_start": null, "span_end": null, "passage": "...{}.values().  class   def iter contained typevars(v: Any) -> Iterator[Type Var Type]: Used inside a function to check whether it was called globally Will only work against non-compiled code, therefore..."}, {"qid": "", "rank": 18, "path": "tests/test_typing.py", "score": 0.04878997402264772, "span_start": null, "span_end": null, "passage": "...ield  # noqa: F401 from pydantic. internal. typing extra import ( None Type, eval type lenient, get function type hints, is classvar, is literal type, is namedtuple, is none type, origin is union, par..."}, {"qid": "", "rank": 19, "path": "pydantic/functional_serializers.py", "score": 0.04837693723150617, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 20, "path": "pydantic/types.py", "score": 0.04789135508268925, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}], "latency_ms": 1.4128684997558594, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_53a08647", "query": "find class GetJsonSchemaHandler", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.4655906577674739, "span_start": null, "span_end": null, "passage": "...   future   import annotations as  annotations import collections import collections.abc import dataclasses import decimal import inspect import os import typing from enum import Enum from functools i..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.38758946296996316, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "tests/test_json_schema.py", "score": 0.32866023658404786, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 4, "path": "tests/test_fastapi_json_schema.py", "score": 0.30566054956165806, "span_start": null, "span_end": null, "passage": "from   future   import annotations from dataclasses import dataclass from typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pyd..."}, {"qid": "", "rank": 5, "path": "pydantic/annotated_handlers.py", "score": 0.2789825372836108, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w"}, {"qid": "", "rank": 6, "path": "pydantic/json_schema.py", "score": 0.2675099450477339, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import inspect import math import re import warnings from collections import defaultdict from copy import deepcopy from dataclasse..."}, {"qid": "", "rank": 7, "path": "pydantic/types.py", "score": 0.2418870719766605, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_generate_schema.py", "score": 0.22705864736302764, "span_start": null, "span_end": null, "passage": "...o generate a JSON schema from. handler: The `Get Core Schema Handler` instance. cls: The model-like class. title: The title to set for the model's schema, defaults to the model's name Returns: Json Sc..."}, {"qid": "", "rank": 9, "path": "tests/test_parse.py", "score": 0.21267786470073927, "span_start": null, "span_end": null, "passage": "...c.functional serializers import model serializer from pydantic.json schema import Json Schema Value class Model(Base Model): a: float b: int = 10 def test obj(): m = Model.model validate(dict(a=10.2))..."}, {"qid": "", "rank": 10, "path": "tests/test_json.py", "score": 0.20219620332458255, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_core_utils.py", "score": 0.18481785210595678, "span_start": null, "span_end": null, "passage": "...ap Validator Function Schema, ] Core Schema Field = Union[ core schema.Model Field, core schema.Dataclass Field, core schema.Typed Dict Field, core schema.Computed Field ] Core Schema Or Field = Union..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_core_metadata.py", "score": 0.1625879490062578, "span_start": null, "span_end": null, "passage": "...eld as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: list[Get Json..."}, {"qid": "", "rank": 13, "path": "pydantic/plugin/__init__.py", "score": 0.1562407288728898, "span_start": null, "span_end": null, "passage": "... Protocol | None, Validate Json Handler Protocol | None, Validate Strings Handler Protocol | None]' class Schema Type Path(Named Tuple): def new schema validator( self, schema: Core Schema, schema typ..."}, {"qid": "", "rank": 14, "path": "pydantic/networks.py", "score": 0.15343076849722023, "span_start": null, "span_end": null, "passage": "...* Host required * Max length 2083 ```py from pydantic import Base Model, Http Url, Validation Error class My Model(Base Model): url: Http Url m = My Model(url='http://www.example.com')  # (1)! print(m..."}, {"qid": "", "rank": 15, "path": "pydantic/plugin/_schema_validator.py", "score": 0.14457636006517544, "span_start": null, "span_end": null, "passage": "...rror as e:  # pragma: no cover raise Type Error(f'Error using plugin `{plugin.  module  }:{plugin.  class  .  name  }`: {e}') from e if p is not None: python event handlers.append(p) if j is not None:..."}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/tools.py", "score": 0.13869586248163257, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 17, "path": "pydantic/functional_validators.py", "score": 0.1325592060364186, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 18, "path": "pydantic/type_adapter.py", "score": 0.13071639689143344, "span_start": null, "span_end": null, "passage": "...nctionality from `Base Model` instance methods for types that do not have such methods (such as dataclasses, primitive types, and more). **Note:** `Type Adapter` instances are not types, and cannot be..."}, {"qid": "", "rank": 19, "path": "pydantic/color.py", "score": 0.10262255900824765, "span_start": null, "span_end": null, "passage": "... Tuple, str] Hsl Color Tuple = Union[Tuple[float, float, float], Tuple[float, float, float, float]] class RGBA:   slots   = ' original', ' rgba' def   init  (self, value: Color Type) -> None: self. rg..."}, {"qid": "", "rank": 20, "path": "tests/test_annotated.py", "score": 0.10181326259864111, "span_start": null, "span_end": null, "passage": "import datetime as dt import sys from dataclasses import dataclass from typing import Any, Callable, Generic, Iterator, List, Optional, Set, Type Var import pytest import pytz from annotated types imp..."}], "latency_ms": 1.4772415161132812, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_531c529f", "query": "find class GetCoreSchemaHandler", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.4618559631453625, "span_start": null, "span_end": null, "passage": "...   future   import annotations as  annotations import collections import collections.abc import dataclasses import decimal import inspect import os import typing from enum import Enum from functools i..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_core_utils.py", "score": 0.36176485702233063, "span_start": null, "span_end": null, "passage": "...ap Validator Function Schema, ] Core Schema Field = Union[ core schema.Model Field, core schema.Dataclass Field, core schema.Typed Dict Field, core schema.Computed Field ] Core Schema Or Field = Union..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_generate_schema.py", "score": 0.3566748953084331, "span_start": null, "span_end": null, "passage": "...o generate a JSON schema from. handler: The `Get Core Schema Handler` instance. cls: The model-like class. title: The title to set for the model's schema, defaults to the model's name Returns: Json Sc..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.33966293859149593, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "pydantic/types.py", "score": 0.32087649739107926, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 6, "path": "pydantic/annotated_handlers.py", "score": 0.28484483451063514, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w"}, {"qid": "", "rank": 7, "path": "tests/test_json_schema.py", "score": 0.22834278835479138, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 8, "path": "pydantic/json_schema.py", "score": 0.22095378926420217, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import inspect import math import re import warnings from collections import defaultdict from copy import deepcopy from dataclasse..."}, {"qid": "", "rank": 9, "path": "pydantic/networks.py", "score": 0.21070171036442015, "span_start": null, "span_end": null, "passage": "...* Host required * Max length 2083 ```py from pydantic import Base Model, Http Url, Validation Error class My Model(Base Model): url: Http Url m = My Model(url='http://www.example.com')  # (1)! print(m..."}, {"qid": "", "rank": 10, "path": "pydantic/functional_validators.py", "score": 0.20284812874395525, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 11, "path": "tests/test_json.py", "score": 0.18513023069266585, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.17415015017789498, "span_start": null, "span_end": null, "passage": "...inator CORE SCHEMA METADATA DISCRIMINATOR PLACEHOLDER KEY = 'pydantic.internal.union discriminator' class Missing Definition For Union Ref(Exception): def   init  (self, ref: str) -> None: self.ref = ..."}, {"qid": "", "rank": 13, "path": "docs/plugins/conversion_table.py", "score": 0.1733222160907448, "span_start": null, "span_end": null, "passage": "...annotations as  annotations import collections import typing from collections import deque from dataclasses import dataclass from datetime import date, datetime, time, timedelta from decimal import De..."}, {"qid": "", "rank": 14, "path": "pydantic/plugin/__init__.py", "score": 0.17307342370620976, "span_start": null, "span_end": null, "passage": "... Protocol | None, Validate Json Handler Protocol | None, Validate Strings Handler Protocol | None]' class Schema Type Path(Named Tuple): def new schema validator( self, schema: Core Schema, schema typ..."}, {"qid": "", "rank": 15, "path": "tests/test_annotated.py", "score": 0.16776552191939895, "span_start": null, "span_end": null, "passage": "import datetime as dt import sys from dataclasses import dataclass from typing import Any, Callable, Generic, Iterator, List, Optional, Set, Type Var import pytest import pytz from annotated types imp..."}, {"qid": "", "rank": 16, "path": "tests/test_fastapi_json_schema.py", "score": 0.16391728601614636, "span_start": null, "span_end": null, "passage": "from   future   import annotations from dataclasses import dataclass from typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pyd..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_core_metadata.py", "score": 0.15796674908927194, "span_start": null, "span_end": null, "passage": "...eld as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: list[Get Json..."}, {"qid": "", "rank": 18, "path": "tests/test_utils.py", "score": 0.15742258796660036, "span_start": null, "span_end": null, "passage": "...iteral values, get origin, is new type from pydantic. internal. utils import ( BUILTIN COLLECTIONS, Class Attribute, Value Items, all identical, deep update, lenient issubclass, smart deepcopy, unique..."}, {"qid": "", "rank": 19, "path": "pydantic/plugin/_schema_validator.py", "score": 0.14122259357358338, "span_start": null, "span_end": null, "passage": "...rror as e:  # pragma: no cover raise Type Error(f'Error using plugin `{plugin.  module  }:{plugin.  class  .  name  }`: {e}') from e if p is not None: python event handlers.append(p) if j is not None:..."}, {"qid": "", "rank": 20, "path": "tests/test_parse.py", "score": 0.1285298180626184, "span_start": null, "span_end": null, "passage": "...c.functional serializers import model serializer from pydantic.json schema import Json Schema Value class Model(Base Model): a: float b: int = 10 def test obj(): m = Model.model validate(dict(a=10.2))..."}], "latency_ms": 1.7366409301757812, "gold_paths": ["pydantic/annotated_handlers.py"]}
{"qid": "lens_main_symbol_c7adc651", "query": "find function __init__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12374659517325025, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/dataclasses.py", "score": 0.09496710100636703, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09331708300994399, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.09023423980156955, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.08845341765938099, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/errors.py", "score": 0.08685779347548213, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.07346440999595533, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 8, "path": "tests/test_dataclasses.py", "score": 0.06964617672208902, "span_start": null, "span_end": null, "passage": "...e)) class Built In Dataclass For Pickle: value: int The reason for the convoluted structure of this function is to avoid creating the classes while collecting tests, which may trigger breakpoints etc...."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.062044421940468504, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/decorator.py", "score": 0.05346925701646643, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.039687056573199354, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.03746147929267824, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03709131284305777, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 16, "path": "pydantic/mypy.py", "score": 0.03670085345009195, "span_start": null, "span_end": null, "passage": "...MODEL METACLASS FULLNAME: return self. pydantic model metaclass marker callback return None def get function hook(self, fullname: str) -> Callable[[Function Context], Type] | None: if fullname.endswit..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/env_settings.py", "score": 0.03555322061256917, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/errors.py", "score": 0.03552027217402846, "span_start": null, "span_end": null, "passage": "from decimal import Decimal from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING:"}, {"qid": "", "rank": 19, "path": "pydantic/deprecated/class_validators.py", "score": 0.033675435672403685, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_core_metadata.py", "score": 0.033418430511128736, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}], "latency_ms": 1.375436782836914, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_9e173315", "query": "find function __getitem__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10417031101780079, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07855464262923911, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.07595949457376439, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.0744603923466732, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/functional_serializers.py", "score": 0.05222920858072534, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_validators.py", "score": 0.048794609992149324, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/decorator.py", "score": 0.03741248067690249, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_decorators.py", "score": 0.03340870123192615, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_utils.py", "score": 0.03231011020683158, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 10, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03122359519880431, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 11, "path": "pydantic/deprecated/class_validators.py", "score": 0.028348098004174746, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 12, "path": "tests/test_validate_call.py", "score": 0.027056340039708023, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_generate_schema.py", "score": 0.023682913192610133, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_core_metadata.py", "score": 0.023581942142297464, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_generics.py", "score": 0.022827810403495997, "span_start": null, "span_end": null, "passage": "...ry: previous caller frame = sys. getframe(depth) except Value Error as e: raise Runtime Error('This function must be used inside another function') from e except Attribute Error:  # sys module does no..."}, {"qid": "", "rank": 16, "path": "tests/test_docs.py", "score": 0.02155265333122149, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 17, "path": "docs/extra/feedback.js", "score": 0.017179035439381016, "span_start": null, "span_end": null, "passage": "...ar feedback = document.forms.feedback feedback.hidden = false feedback.add Event Listener(\"submit\", function(ev) { ev.prevent Default() var data = ev.submitter.get Attribute(\"data-md-value\") feedback...."}, {"qid": "", "rank": 18, "path": "pydantic/v1/utils.py", "score": 0.016008181897675472, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 19, "path": "pydantic/annotated_handlers.py", "score": 0.015562441773795323, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/generics.py", "score": 0.015227250839419162, "span_start": null, "span_end": null, "passage": "...{}.values().  class   def iter contained typevars(v: Any) -> Iterator[Type Var Type]: Used inside a function to check whether it was called globally Will only work against non-compiled code, therefore..."}], "latency_ms": 1.373291015625, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_c7adc651", "query": "find function __init__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12374659517325025, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/dataclasses.py", "score": 0.09496710100636703, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09331708300994399, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.09023423980156955, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.08845341765938099, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/errors.py", "score": 0.08685779347548213, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.07346440999595533, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 8, "path": "tests/test_dataclasses.py", "score": 0.06964617672208902, "span_start": null, "span_end": null, "passage": "...e)) class Built In Dataclass For Pickle: value: int The reason for the convoluted structure of this function is to avoid creating the classes while collecting tests, which may trigger breakpoints etc...."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.062044421940468504, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/decorator.py", "score": 0.05346925701646643, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.039687056573199354, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.03746147929267824, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03709131284305777, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 16, "path": "pydantic/mypy.py", "score": 0.03670085345009195, "span_start": null, "span_end": null, "passage": "...MODEL METACLASS FULLNAME: return self. pydantic model metaclass marker callback return None def get function hook(self, fullname: str) -> Callable[[Function Context], Type] | None: if fullname.endswit..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/env_settings.py", "score": 0.03555322061256917, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/errors.py", "score": 0.03552027217402846, "span_start": null, "span_end": null, "passage": "from decimal import Decimal from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING:"}, {"qid": "", "rank": 19, "path": "pydantic/deprecated/class_validators.py", "score": 0.033675435672403685, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_core_metadata.py", "score": 0.033418430511128736, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}], "latency_ms": 1.3089179992675781, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_8592bc6e", "query": "find function __get_pydantic_json_schema__", "results": [{"qid": "", "rank": 1, "path": "tests/test_fastapi_json_schema.py", "score": 0.32781448615158515, "span_start": null, "span_end": null, "passage": "... info: str) -> Json Schema Value: if Core Metadata Handler(schema).metadata.get('pydantic js modify function') is not None: return {} else: error = Pydantic Invalid For Json Schema(f'Cannot generate a..."}, {"qid": "", "rank": 2, "path": "pydantic/annotated_handlers.py", "score": 0.3192650078108631, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.31644556377539024, "span_start": null, "span_end": null, "passage": "...on Schema Handler if typing.TYPE CHECKING: from . generate schema import Generate Schema Std Schema Function = Callable[[Generate Schema, type[Any]], core schema.Core Schema] @dataclasses.dataclass(**..."}, {"qid": "", "rank": 4, "path": "tests/test_json_schema.py", "score": 0.29460909496862697, "span_start": null, "span_end": null, "passage": "...data(): assert build metadata dict(initial metadata={'foo': 'bar'}) == { 'foo': 'bar', 'pydantic js functions': [], 'pydantic js annotation functions': [], } with pytest.raises(Type Error, match=re.es..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.28160265299995013, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "pydantic/json_schema.py", "score": 0.27451340307461114, "span_start": null, "span_end": null, "passage": "...aclasses import Pydantic Dataclass from . internal. schema generation shared import Get Json Schema Function from .main import Base Model Core Schema Or Field Type = Literal[core schema.Core Schema Ty..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_generate_schema.py", "score": 0.24873901687523436, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 8, "path": "pydantic/types.py", "score": 0.216178667638609, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_core_utils.py", "score": 0.20016285518179794, "span_start": null, "span_end": null, "passage": "...ype Guard, get args, get origin from . import  repr from . typing extra import is generic alias Any Function Schema = Union[ core schema.After Validator Function Schema, core schema.Before Validator F..."}, {"qid": "", "rank": 10, "path": "tests/test_json.py", "score": 0.17156380997573295, "span_start": null, "span_end": null, "passage": "... dataclass from pydantic.deprecated.json import pydantic encoder, timedelta isoformat from pydantic.functional serializers import ( field serializer, ) from pydantic.json schema import Json Schema Val..."}, {"qid": "", "rank": 11, "path": "tests/test_parse.py", "score": 0.1567827563236081, "span_start": null, "span_end": null, "passage": "... Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydantic.functional serializers import model serializer from pydantic.json schema import Json Schema Value cl..."}, {"qid": "", "rank": 12, "path": "pydantic/deprecated/tools.py", "score": 0.15325992857321802, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 13, "path": "pydantic/type_adapter.py", "score": 0.1454847178161813, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_core_metadata.py", "score": 0.14222777314701615, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 15, "path": "pydantic/networks.py", "score": 0.13076157215807532, "span_start": null, "span_end": null, "passage": "...: Get Core Schema Handler, ) -> core schema.Core Schema: return core schema.no info plain validator function( cls. validate, serialization=core schema.to string ser schema() ) @classmethod def  valida..."}, {"qid": "", "rank": 16, "path": "pydantic/functional_validators.py", "score": 0.11814773766156297, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 17, "path": "pydantic/main.py", "score": 0.10366476018586293, "span_start": null, "span_end": null, "passage": "...alidator and Schema Serializer.   pydantic custom init  : Whether the model has a custom `  init  ` function.   pydantic decorators  : Metadata containing the decorators defined on the model. This rep..."}, {"qid": "", "rank": 18, "path": "tests/test_utils.py", "score": 0.09869682483694164, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.09489338068557977, "span_start": null, "span_end": null, "passage": "...-union', 'lax-or-strict', 'dataclass', 'dataclass-args', 'definition-ref', } and not  core utils.is function with inner schema(choice): raise Type Error( f'{choice[\"type\"]!r} is not a valid discrimina..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/schema.py", "score": 0.09474424986170607, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu"}], "latency_ms": 2.1042823791503906, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_f277f6d0", "query": "find function original", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10997942779409514, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08293528705560875, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.0801954190894538, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.0786127185721042, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/functional_validators.py", "score": 0.0748469236164653, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_serializers.py", "score": 0.06355326955354533, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 7, "path": "pydantic/types.py", "score": 0.041683617100093925, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/decorator.py", "score": 0.039498808988870794, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.038127425001564554, "span_start": null, "span_end": null, "passage": "...on Schema Handler if typing.TYPE CHECKING: from . generate schema import Generate Schema Std Schema Function = Callable[[Generate Schema, type[Any]], core schema.Core Schema] @dataclasses.dataclass(**..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_decorators.py", "score": 0.035271756500787, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 11, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03296479678410631, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 12, "path": "pydantic/color.py", "score": 0.03295934616807311, "span_start": null, "span_end": null, "passage": "...le = Union[Tuple[float, float, float], Tuple[float, float, float, float]] class RGBA:   slots   = ' original', ' rgba' def   init  (self, value: Color Type) -> None: self. rgba: RGBA self. original: C..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_generate_schema.py", "score": 0.030841532285185873, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 14, "path": "pydantic/deprecated/class_validators.py", "score": 0.029928945849238272, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 15, "path": "tests/test_validate_call.py", "score": 0.028565152265515186, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_core_metadata.py", "score": 0.024897002588771637, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 17, "path": "tests/test_docs.py", "score": 0.02275454933034796, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_typing_extra.py", "score": 0.02263573959608981, "span_start": null, "span_end": null, "passage": "...[X, Y]` and `list[X]` into `typing.List[X]` etc. (for all the types made generic in PEP 585) if the original syntax is not supported in the current Python version. copes with `partial`. The `module` a..."}, {"qid": "", "rank": 19, "path": "tests/test_generics.py", "score": 0.021861007416334177, "span_start": null, "span_end": null, "passage": "...(clean cache): types cache size = len( GENERIC TYPES CACHE) def run() -> None:  # Run inside nested function to get classes in local vars cleaned also T1 = Type Var('T1') T2 = Type Var('T2') class A(B..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_utils.py", "score": 0.021292834744616986, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}], "latency_ms": 1.6994476318359375, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_3ef90843", "query": "find function as_named", "results": [{"qid": "", "rank": 1, "path": "tests/test_types_namedtuple.py", "score": 0.1008001233514205, "span_start": null, "span_end": null, "passage": "from collections import namedtuple from typing import Generic, Named Tuple, Optional, Tuple, Type Var import pytest from typing extensions import Named Tuple as Typing Extensions Named Tuple from pyda"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/fail_defaults.py", "score": 0.08259834369952268, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Model(Base Model): undefined default no args: int = Field() undefined default: int = Field(description='my desc') positional ellipsis default: int = Field("}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/fail_defaults.py", "score": 0.08259834369952268, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Model(Base Model): undefined default no args: int = Field() undefined default: int = Field(description='my desc') positional ellipsis default: int = Field("}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/fail_defaults.py", "score": 0.08259834369952268, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Model(Base Model): undefined default no args: int = Field() undefined default: int = Field(description='my desc') positional ellipsis default: int = Field("}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08145886067297008, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 6, "path": "tests/test_color.py", "score": 0.0717173225837596, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 7, "path": "pydantic/validate_call_decorator.py", "score": 0.06814889778994876, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06142797911063814, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/conftest.py", "score": 0.059398631191723686, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 10, "path": "pydantic/functional_serializers.py", "score": 0.045018089653365984, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 11, "path": "tests/test_tools.py", "score": 0.03680491178366818, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 12, "path": "tests/pyright/pipeline_api.py", "score": 0.03660040627743858, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 13, "path": "pydantic/deprecated/class_validators.py", "score": 0.033500513815255754, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 14, "path": "tests/test_typing.py", "score": 0.03344991547843205, "span_start": null, "span_end": null, "passage": "...ield  # noqa: F401 from pydantic. internal. typing extra import ( None Type, eval type lenient, get function type hints, is classvar, is literal type, is namedtuple, is none type, origin is union, par..."}, {"qid": "", "rank": 15, "path": "pydantic/functional_validators.py", "score": 0.03268250374870026, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/color.py", "score": 0.031970664457504454, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 17, "path": "pydantic/v1/decorator.py", "score": 0.030830112062542454, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 18, "path": "tests/test_validate_call.py", "score": 0.030140725993690144, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 19, "path": "tests/test_serialize_as_any.py", "score": 0.029394798327668226, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret "}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_typing_extra.py", "score": 0.028989024473416045, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}], "latency_ms": 1.4467239379882812, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_c01b7565", "query": "find function as_hex", "results": [{"qid": "", "rank": 1, "path": "tests/test_color.py", "score": 0.0894025723890682, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 2, "path": "pydantic/v1/color.py", "score": 0.08554764074546367, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07671348274458362, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.06565428841466381, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.06417889044213428, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.057849498220421944, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_serializers.py", "score": 0.04239556526185934, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 8, "path": "tests/test_tools.py", "score": 0.03466084526234027, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 9, "path": "tests/pyright/pipeline_api.py", "score": 0.03446825320429149, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 10, "path": "pydantic/deprecated/class_validators.py", "score": 0.031548944673051055, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_validators.py", "score": 0.03077858770258556, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/decorator.py", "score": 0.029034106912180512, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 13, "path": "tests/test_validate_call.py", "score": 0.02838488096106423, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 14, "path": "pydantic/color.py", "score": 0.028113269266645168, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 15, "path": "tests/test_serialize_as_any.py", "score": 0.02768240723796847, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret "}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators.py", "score": 0.02506863434693131, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 17, "path": "docs/plugins/griffe_doclinks.py", "score": 0.024295523270247126, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_core_metadata.py", "score": 0.02091763285628937, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_typing_extra.py", "score": 0.020540789676191985, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_utils.py", "score": 0.019408146250743014, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}], "latency_ms": 1.268625259399414, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_f452cfc7", "query": "find function as_rgb", "results": [{"qid": "", "rank": 1, "path": "tests/test_color.py", "score": 0.162210476565121, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 2, "path": "pydantic/v1/color.py", "score": 0.11334001964095945, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07711424990176918, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.06451417428734119, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05815171600687809, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "tests/conftest.py", "score": 0.056230603419936014, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 7, "path": "pydantic/color.py", "score": 0.05475655045974031, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 8, "path": "pydantic/functional_serializers.py", "score": 0.042617048494785176, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 9, "path": "tests/test_tools.py", "score": 0.034841920712501834, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 10, "path": "tests/pyright/pipeline_api.py", "score": 0.0346483225135657, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 11, "path": "pydantic/deprecated/class_validators.py", "score": 0.03171376290860061, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 12, "path": "pydantic/functional_validators.py", "score": 0.030939381433419306, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 13, "path": "tests/test_rich_repr.py", "score": 0.029667941557759175, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional import pytest from pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fi"}, {"qid": "", "rank": 14, "path": "pydantic/v1/decorator.py", "score": 0.02918578711326535, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 15, "path": "tests/test_validate_call.py", "score": 0.028533169471021358, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 16, "path": "tests/test_serialize_as_any.py", "score": 0.027827025879384498, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret "}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_decorators.py", "score": 0.02519959809622678, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.02442244812680424, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_core_metadata.py", "score": 0.021026910912179207, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_typing_extra.py", "score": 0.020648099025088094, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}], "latency_ms": 1.3661384582519531, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_863cff20", "query": "find function as_rgb_tuple", "results": [{"qid": "", "rank": 1, "path": "tests/test_color.py", "score": 0.17804411668496006, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 2, "path": "pydantic/v1/color.py", "score": 0.13159486552738633, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 3, "path": "pydantic/color.py", "score": 0.08216397989434218, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.0645899697794393, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.054036297738393066, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.048707179078981366, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 7, "path": "tests/conftest.py", "score": 0.047098078243642205, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 8, "path": "tests/test_types_namedtuple.py", "score": 0.0451807440511741, "span_start": null, "span_end": null, "passage": "from collections import namedtuple from typing import Generic, Named Tuple, Optional, Tuple, Type Var import pytest from typing extensions import Named Tuple as Typing Extensions Named Tuple from pyda"}, {"qid": "", "rank": 9, "path": "pydantic/v1/utils.py", "score": 0.03818132713388793, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_utils.py", "score": 0.03740926812820889, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.03569552810114181, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "tests/test_tools.py", "score": 0.029183174429431663, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 13, "path": "tests/pyright/pipeline_api.py", "score": 0.029021018902605326, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_decorators.py", "score": 0.028859475565518145, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/decorator.py", "score": 0.028559592716332814, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/class_validators.py", "score": 0.026563067013789646, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 17, "path": "tests/test_validate_call.py", "score": 0.02624640114760686, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 18, "path": "pydantic/functional_validators.py", "score": 0.02591445438845215, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 19, "path": "tests/test_rich_repr.py", "score": 0.024849511615230965, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional import pytest from pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fi"}, {"qid": "", "rank": 20, "path": "docs/plugins/griffe_doclinks.py", "score": 0.02406782239091319, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}], "latency_ms": 1.3229846954345703, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_c37d903c", "query": "find function as_hsl", "results": [{"qid": "", "rank": 1, "path": "tests/test_color.py", "score": 0.1556826595583595, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 2, "path": "pydantic/v1/color.py", "score": 0.07830279405545969, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07552728457355451, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.06318651100976505, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.056954988330778576, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "tests/conftest.py", "score": 0.05507341109652368, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 7, "path": "pydantic/color.py", "score": 0.042289509705054504, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 8, "path": "pydantic/functional_serializers.py", "score": 0.041740015022525265, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 9, "path": "tests/test_tools.py", "score": 0.034124894738579006, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 10, "path": "tests/pyright/pipeline_api.py", "score": 0.03393528067525604, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 11, "path": "pydantic/deprecated/class_validators.py", "score": 0.031061112558927496, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 12, "path": "pydantic/functional_validators.py", "score": 0.03030266739322842, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/decorator.py", "score": 0.02858516099961701, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 14, "path": "tests/test_validate_call.py", "score": 0.027945973839704645, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 15, "path": "tests/test_serialize_as_any.py", "score": 0.027254362262554035, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret "}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators.py", "score": 0.024681005378089756, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 17, "path": "docs/plugins/griffe_doclinks.py", "score": 0.023919848692111813, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_core_metadata.py", "score": 0.020594189610738892, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_typing_extra.py", "score": 0.020223173446636655, "span_start": null, "span_end": null, "passage": "...ts` which is a close as possible to the implementation in CPython 3.10.8. * type annotations of the function definition above. * prefixing `typing.` where appropriate * Use ` make forward ref` instead..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_utils.py", "score": 0.019108043755561722, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}], "latency_ms": 1.556396484375, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_bd94f629", "query": "find function as_hsl_tuple", "results": [{"qid": "", "rank": 1, "path": "tests/test_color.py", "score": 0.15674083065129865, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 2, "path": "pydantic/v1/color.py", "score": 0.0923420274047004, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 3, "path": "pydantic/color.py", "score": 0.0628713397305496, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.06279299566964461, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.0525329400443636, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.047352084161536065, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 7, "path": "tests/conftest.py", "score": 0.045787750533102675, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 8, "path": "tests/test_types_namedtuple.py", "score": 0.043923758986798594, "span_start": null, "span_end": null, "passage": "from collections import namedtuple from typing import Generic, Named Tuple, Optional, Tuple, Type Var import pytest from typing extensions import Named Tuple as Typing Extensions Named Tuple from pyda"}, {"qid": "", "rank": 9, "path": "pydantic/v1/utils.py", "score": 0.03711907464218543, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_utils.py", "score": 0.03636849528805564, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.034702433661676385, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "tests/test_tools.py", "score": 0.028371261851203387, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 13, "path": "tests/pyright/pipeline_api.py", "score": 0.02821361769486479, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_decorators.py", "score": 0.02805656869637765, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/decorator.py", "score": 0.027765028964828038, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/class_validators.py", "score": 0.025824049115755015, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 17, "path": "tests/test_validate_call.py", "score": 0.02551619329182692, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 18, "path": "pydantic/functional_validators.py", "score": 0.02519348170856823, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 19, "path": "docs/plugins/griffe_doclinks.py", "score": 0.02339822533330045, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 20, "path": "tests/test_serialize_as_any.py", "score": 0.022659136511981957, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret "}], "latency_ms": 1.6970634460449219, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_0270b388", "query": "find function _alpha_float", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/color.py", "score": 0.24167865575127273, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 2, "path": "pydantic/color.py", "score": 0.23113035741236457, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07319206856610437, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.055194006174394517, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "tests/conftest.py", "score": 0.05337060512509707, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 6, "path": "pydantic/validate_call_decorator.py", "score": 0.052317307002812424, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 7, "path": "tests/test_color.py", "score": 0.039580788179563314, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 8, "path": "pydantic/functional_serializers.py", "score": 0.03669724874816372, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 9, "path": "tests/benchmarks/generate_north_star_data.py", "score": 0.034388582656843615, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import Any, Callable, List, Type Var, Union from faker import Faker f = Faker() Faker.seed(0) T = Type Var('T')  END DATETIME = datetime(2023, 1, 1, 0, 0, 0, "}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/computed_fields.py", "score": 0.03051480235089538, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, computed field class Square(Base Model): side: float @computed field @property def area(self) -> float: return self.side**2 @area.setter def area(self, area: float) ->"}, {"qid": "", "rank": 11, "path": "tests/mypy/modules/computed_fields.py", "score": 0.03051480235089538, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, computed field class Square(Base Model): side: float @computed field @property def area(self) -> float: return self.side**2 @area.setter def area(self, area: float) ->"}, {"qid": "", "rank": 12, "path": "pydantic/v1/types.py", "score": 0.0304839819325937, "span_start": null, "span_end": null, "passage": "import abc import math import re import warnings from datetime import date from decimal import Decimal, Invalid Operation from enum import Enum from pathlib import Path from types import new class fro"}, {"qid": "", "rank": 13, "path": "pydantic/v1/__init__.py", "score": 0.029324423516182686, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator"}, {"qid": "", "rank": 14, "path": "tests/pyright/pyright_example.py", "score": 0.02788638457016401, "span_start": null, "span_end": null, "passage": "from functools import cached property from typing import List from pydantic import Base Model, Field, computed field class My Model(Base Model): x: str y: List[int] m1 = My Model(x='hello', y=[1, 2, 3"}, {"qid": "", "rank": 15, "path": "pydantic/types.py", "score": 0.02766571730989857, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/decorator.py", "score": 0.02628673010742933, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/datetime_parse.py", "score": 0.024036118946122804, "span_start": null, "span_end": null, "passage": "import re from datetime import date, datetime, time, timedelta, timezone from typing import Dict, Optional, Type, Union from pydantic.v1 import errors date expr = r'(?P<year>\\d{4})-(?P<month>\\d{1,2})-"}, {"qid": "", "rank": 18, "path": "tests/mypy/modules/success.py", "score": 0.023881241107742108, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro"}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/success.py", "score": 0.023881241107742108, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro"}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/success.py", "score": 0.023881241107742108, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro"}], "latency_ms": 1.5664100646972656, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_f7b718c5", "query": "find function __get_pydantic_core_schema__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_core_utils.py", "score": 0.39723467006530905, "span_start": null, "span_end": null, "passage": "...ype Guard, get args, get origin from . import  repr from . typing extra import is generic alias Any Function Schema = Union[ core schema.After Validator Function Schema, core schema.Before Validator F..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_generate_schema.py", "score": 0.3917195940325529, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.3614297988865, "span_start": null, "span_end": null, "passage": "...on Schema Handler if typing.TYPE CHECKING: from . generate schema import Generate Schema Std Schema Function = Callable[[Generate Schema, type[Any]], core schema.Core Schema] @dataclasses.dataclass(**..."}, {"qid": "", "rank": 4, "path": "pydantic/annotated_handlers.py", "score": 0.329713380468313, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 5, "path": "pydantic/types.py", "score": 0.30664523319104353, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.24273266073859612, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 7, "path": "pydantic/json_schema.py", "score": 0.23629833860210692, "span_start": null, "span_end": null, "passage": "...aclasses import Pydantic Dataclass from . internal. schema generation shared import Get Json Schema Function from .main import Base Model Core Schema Or Field Type = Literal[core schema.Core Schema Ty..."}, {"qid": "", "rank": 8, "path": "docs/plugins/conversion_table.py", "score": 0.19615177278589632, "span_start": null, "span_end": null, "passage": "...ma], ), Row( deque, deque, strict=True, python input=True, core schemas=[core schema.Wrap Validator Function Schema], ), Row( deque, 'Array', strict=True, json input=True, core schemas=[core schema.Wr..."}, {"qid": "", "rank": 9, "path": "tests/test_json_schema.py", "score": 0.19564256421810253, "span_start": null, "span_end": null, "passage": "...data(): assert build metadata dict(initial metadata={'foo': 'bar'}) == { 'foo': 'bar', 'pydantic js functions': [], 'pydantic js annotation functions': [], } with pytest.raises(Type Error, match=re.es..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.1940382297964759, "span_start": null, "span_end": null, "passage": "...-union', 'lax-or-strict', 'dataclass', 'dataclass-args', 'definition-ref', } and not  core utils.is function with inner schema(choice): raise Type Error( f'{choice[\"type\"]!r} is not a valid discrimina..."}, {"qid": "", "rank": 11, "path": "pydantic/networks.py", "score": 0.19326997638357674, "span_start": null, "span_end": null, "passage": "...: Get Core Schema Handler, ) -> core schema.Core Schema: return core schema.no info plain validator function( cls. validate, serialization=core schema.to string ser schema() ) @classmethod def  valida..."}, {"qid": "", "rank": 12, "path": "pydantic/functional_validators.py", "score": 0.19256590546031715, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_core_metadata.py", "score": 0.19195437324310946, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 14, "path": "tests/test_fastapi_json_schema.py", "score": 0.1786795879110772, "span_start": null, "span_end": null, "passage": "... info: str) -> Json Schema Value: if Core Metadata Handler(schema).metadata.get('pydantic js modify function') is not None: return {} else: error = Pydantic Invalid For Json Schema(f'Cannot generate a..."}, {"qid": "", "rank": 15, "path": "tests/test_utils.py", "score": 0.17588020886187555, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 16, "path": "tests/test_json.py", "score": 0.15082713705871353, "span_start": null, "span_end": null, "passage": "... dataclass from pydantic.deprecated.json import pydantic encoder, timedelta isoformat from pydantic.functional serializers import ( field serializer, ) from pydantic.json schema import Json Schema Val..."}, {"qid": "", "rank": 17, "path": "tests/test_annotated.py", "score": 0.1433783721796042, "span_start": null, "span_end": null, "passage": "...rors import Pydantic Schema Generation Error from pydantic.fields import Private Attr from pydantic.functional validators import After Validator NO VALUE = object() @pytest.mark.parametrize( 'hint fn,..."}, {"qid": "", "rank": 18, "path": "pydantic/main.py", "score": 0.14138863178906844, "span_start": null, "span_end": null, "passage": "...alidator and Schema Serializer.   pydantic custom init  : Whether the model has a custom `  init  ` function.   pydantic decorators  : Metadata containing the decorators defined on the model. This rep..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_dataclasses.py", "score": 0.13694026218552527, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p"}, {"qid": "", "rank": 20, "path": "pydantic/type_adapter.py", "score": 0.1324246804327831, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}], "latency_ms": 1.8231868743896484, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_761c8d81", "query": "find function _validate", "results": [{"qid": "", "rank": 1, "path": "pydantic/validate_call_decorator.py", "score": 0.13599682150037878, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail4.py", "score": 0.1180186882271152, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/fail4.py", "score": 0.1180186882271152, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/fail4.py", "score": 0.1180186882271152, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail4.py", "score": 0.1180186882271152, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.4.1/pyproject-default_toml/fail4.py", "score": 0.1180186882271152, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.09743295151742469, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 8, "path": "tests/test_validate_call.py", "score": 0.07937069407790412, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07347401204797575, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "tests/conftest.py", "score": 0.07104670879622295, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 11, "path": "tests/test_pipeline.py", "score": 0.06976743249576398, "span_start": null, "span_end": null, "passage": "ta = Type Adapter[int](Annotated[int, transform(lambda x: x + 1)]) assert ta.validate python('1') == 2 def test not eq() -> None: ta = Type Adapter[int](Annotated[str, validate as(str).not eq('potato'"}, {"qid": "", "rank": 12, "path": "tests/pyright/pipeline_api.py", "score": 0.061186999236089695, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 13, "path": "pydantic/plugin/__init__.py", "score": 0.05516531629808639, "span_start": null, "span_end": null, "passage": "...o validate the object in strict mode. context: The context to use for validation, this is passed to functional validators. self instance: An instance of a model to set attributes on from validation, t..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/decorator.py", "score": 0.05423062102825914, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 15, "path": "tests/test_plugins.py", "score": 0.04941315815067637, "span_start": null, "span_end": null, "passage": "...schema type path, schema kind, config, plugin settings): assert schema type.  name   == 'my wrapped function' assert schema type path == Schema Type Path( 'tests.test plugins', 'partial(test plugin pa..."}, {"qid": "", "rank": 16, "path": "pydantic/functional_serializers.py", "score": 0.04885121199810648, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 17, "path": "pydantic/deprecated/decorator.py", "score": 0.04161401210879521, "span_start": null, "span_end": null, "passage": "...ping extra from ..alias generators import to pascal from ..errors import Pydantic User Error from ..functional validators import field validator from ..main import Base Model, create model from ..warn..."}, {"qid": "", "rank": 18, "path": "tests/test_deprecated_validate_arguments.py", "score": 0.0373781898444013, "span_start": null, "span_end": null, "passage": "..., Pydantic Deprecated Since20, Validation Error from pydantic.deprecated.decorator import Validated Function from pydantic.deprecated.decorator import validate arguments as validate arguments deprecat..."}, {"qid": "", "rank": 19, "path": "pydantic/plugin/_schema_validator.py", "score": 0.037196609800709234, "span_start": null, "span_end": null, "passage": "Returns: If plugins are installed then return `Pluggable Schema Validator`, otherwise return `Schema Validator`.   slots   = ' schema validator', 'validate json', 'validate python', 'validate strings'"}, {"qid": "", "rank": 20, "path": "pydantic/functional_validators.py", "score": 0.03715960348780206, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}], "latency_ms": 1.2638568878173828, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_b2fc2027", "query": "find function __str__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.13372344181163587, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "tests/conftest.py", "score": 0.10264214998759982, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.10084060496728155, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.09558481534667247, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/functional_serializers.py", "score": 0.07487008077274654, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 6, "path": "pydantic/v1/decorator.py", "score": 0.05813894875795679, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 7, "path": "docs/plugins/griffe_doclinks.py", "score": 0.050069966766840265, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/utils.py", "score": 0.05005737106118287, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_decorators.py", "score": 0.04844499759494698, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 10, "path": "pydantic/functional_validators.py", "score": 0.044162528261857806, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/config.py", "score": 0.04294823768601915, "span_start": null, "span_end": null, "passage": "import json from enum import Enum from typing import TYPE CHECKING, Any, Callable, Dict, Forward Ref, Optional, Tuple, Type, Union from typing extensions import Literal, Protocol from pydantic.v1.typi"}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_utils.py", "score": 0.04272111925267457, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 13, "path": "pydantic/deprecated/class_validators.py", "score": 0.04094003808168808, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 14, "path": "tests/test_model_signature.py", "score": 0.03815706870018104, "span_start": null, "span_end": null, "passage": "import sys from inspect import Parameter, Signature, signature from typing import Any, Generic, Iterable, Optional, Type Var, Union import pytest from typing extensions import Annotated from pydantic "}, {"qid": "", "rank": 15, "path": "tests/test_docs.py", "score": 0.03800898314183096, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_repr.py", "score": 0.0377475452289157, "span_start": null, "span_end": null, "passage": "...ame  ()}({self.  repr str  (\", \")})' def display as type(obj: Any) -> str: if isinstance(obj, types.Function Type): return obj.  name   elif obj is ...: return '...' elif isinstance(obj, Representatio..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail4.py", "score": 0.03772757821988429, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/pyproject-default_toml/fail4.py", "score": 0.03772757821988429, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 19, "path": "tests/mypy/modules/fail4.py", "score": 0.03772757821988429, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail4.py", "score": 0.03772757821988429, "span_start": null, "span_end": null, "passage": "...return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) foo(1, 2) foo(1, d=2) callable(foo.raw function) @validate call def bar() -> str: return 'x' y: int = bar() class Model(Base Model): @root ..."}], "latency_ms": 1.6694068908691406, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_9d0ba9d6", "query": "find function __repr_args__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_repr.py", "score": 0.19781715625423568, "span_start": null, "span_end": null, "passage": "...ame  ()}({self.  repr str  (\", \")})' def display as type(obj: Any) -> str: if isinstance(obj, types.Function Type): return obj.  name   elif obj is ...: return '...' elif isinstance(obj, Representatio..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11992072160599235, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/v1/decorator.py", "score": 0.11903301193301495, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/utils.py", "score": 0.09321069044339819, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09043199869096523, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "pydantic/validate_call_decorator.py", "score": 0.08578286586261201, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 7, "path": "tests/test_rich_repr.py", "score": 0.08421598233429564, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional import pytest from pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fi"}, {"qid": "", "rank": 8, "path": "tests/conftest.py", "score": 0.07813813473327406, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/error_wrappers.py", "score": 0.07494607431921674, "span_start": null, "span_end": null, "passage": "import json from typing import TYPE CHECKING, Any, Dict, Generator, List, Optional, Sequence, Tuple, Type, Union from pydantic.v1.json import pydantic encoder from pydantic.v1.utils import Representat"}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_generics.py", "score": 0.0645570253369313, "span_start": null, "span_end": null, "passage": "...ry: previous caller frame = sys. getframe(depth) except Value Error as e: raise Runtime Error('This function must be used inside another function') from e except Attribute Error:  # sys module does no..."}, {"qid": "", "rank": 11, "path": "tests/test_validate_call.py", "score": 0.058620949775071964, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 12, "path": "pydantic/functional_serializers.py", "score": 0.05751045285841331, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 13, "path": "pydantic/fields.py", "score": 0.05724869562491123, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/typing.py", "score": 0.05531062201709592, "span_start": null, "span_end": null, "passage": "import sys import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Di"}, {"qid": "", "rank": 15, "path": "pydantic/alias_generators.py", "score": 0.05020086897447597, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv"}, {"qid": "", "rank": 16, "path": "pydantic/v1/class_validators.py", "score": 0.04458891804644698, "span_start": null, "span_end": null, "passage": "...p from functools import partial, partialmethod, wraps from itertools import chain from types import Function Type from typing import TYPE CHECKING, Any, Callable, Dict, Iterable, List, Optional, Set, ..."}, {"qid": "", "rank": 17, "path": "tests/test_assert_in_validators.py", "score": 0.044184841868497596, "span_start": null, "span_end": null, "passage": "import difflib import pprint import pytest from dirty equals import Has Repr from pydantic import Base Model, Validation Error, field validator def  pformat lines(obj): return pprint.pformat(obj).spli"}, {"qid": "", "rank": 18, "path": "pydantic/v1/generics.py", "score": 0.04338285828118849, "span_start": null, "span_end": null, "passage": "...{}.values().  class   def iter contained typevars(v: Any) -> Iterator[Type Var Type]: Used inside a function to check whether it was called globally Will only work against non-compiled code, therefore..."}, {"qid": "", "rank": 19, "path": "pydantic/dataclasses.py", "score": 0.03928417208145635, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 20, "path": "tests/test_validators_dataclass.py", "score": 0.03728193594804649, "span_start": null, "span_end": null, "passage": "from dataclasses import asdict, is dataclass from typing import Any, List import pytest from dirty equals import Has Repr from pydantic import Validation Error, field validator, model validator from p"}], "latency_ms": 1.2865066528320312, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_6a876ef3", "query": "find function __eq__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10878616162330769, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08203544720016519, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.07932530653685237, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.07775977816727368, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "tests/test_assert_in_validators.py", "score": 0.07719748001231376, "span_start": null, "span_end": null, "passage": "import difflib import pprint import pytest from dirty equals import Has Repr from pydantic import Base Model, Validation Error, field validator def  pformat lines(obj): return pprint.pformat(obj).spli"}, {"qid": "", "rank": 6, "path": "tests/benchmarks/basemodel_eq_performance.py", "score": 0.06162090880106491, "span_start": null, "span_end": null, "passage": "from   future   import annotations import dataclasses import enum import gc import itertools import operator import sys import textwrap import timeit from importlib import metadata from typing import "}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.05611305950570632, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 8, "path": "pydantic/functional_serializers.py", "score": 0.05454351696376637, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/decorator.py", "score": 0.039070250725764935, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_decorators.py", "score": 0.03488906134896788, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_validators.py", "score": 0.03293254683311422, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 12, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032607131922428714, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/dataclasses.py", "score": 0.032593153184908255, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE"}, {"qid": "", "rank": 14, "path": "tests/test_pipeline.py", "score": 0.032071452260106506, "span_start": null, "span_end": null, "passage": "ta = Type Adapter[int](Annotated[int, transform(lambda x: x + 1)]) assert ta.validate python('1') == 2 def test not eq() -> None: ta = Type Adapter[int](Annotated[str, validate as(str).not eq('potato'"}, {"qid": "", "rank": 15, "path": "pydantic/deprecated/class_validators.py", "score": 0.02960421967703007, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 16, "path": "tests/test_validate_call.py", "score": 0.02825522312198802, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_generate_schema.py", "score": 0.02473231765470871, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_core_metadata.py", "score": 0.024626872515001754, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 19, "path": "pydantic/experimental/pipeline.py", "score": 0.0228864999632895, "span_start": null, "span_end": null, "passage": " steps: tuple[ Step, ...] def transform( self, func: Callable[[ Out T],  New Out T], ) ->  Pipeline[ In T,  New Out T]: return  Pipeline[ In T,  New Out T](self. steps + ( Transform(func),)) @overload"}, {"qid": "", "rank": 20, "path": "tests/test_docs.py", "score": 0.022507664667533994, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}], "latency_ms": 1.3992786407470703, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_1522beba", "query": "find function __hash__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_forward_ref.py", "score": 0.13124953405535442, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations from dataclasses import dataclass from typing import Union @dataclass class Pydantic Recursive Ref: type ref: str   name   = 'Pydantic Recursive Ref'"}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10813758624099493, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08154635768053234, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.07885237468369657, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.07729617988325636, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_validators.py", "score": 0.06255015013999168, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_serializers.py", "score": 0.0542183323829375, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 8, "path": "pydantic/dataclasses.py", "score": 0.04212314629519526, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/decorator.py", "score": 0.03883731666114316, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_decorators.py", "score": 0.034681055238950924, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/dataclasses.py", "score": 0.03343269629230966, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE"}, {"qid": "", "rank": 12, "path": "pydantic/v1/main.py", "score": 0.03281151034453412, "span_start": null, "span_end": null, "passage": "...copy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve bases from typing import ( TYPE CHECKING, Abstract Set, Any, C..."}, {"qid": "", "rank": 13, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032412730513856715, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 14, "path": "pydantic/deprecated/class_validators.py", "score": 0.029427721418349095, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 15, "path": "tests/test_validate_call.py", "score": 0.028086767485120054, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_generate_schema.py", "score": 0.025841460988605902, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_core_metadata.py", "score": 0.024480048847191026, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}, {"qid": "", "rank": 18, "path": "pydantic/types.py", "score": 0.024087368460467946, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 19, "path": "tests/test_docs.py", "score": 0.02237347556665128, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_utils.py", "score": 0.020936240528748217, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}], "latency_ms": 1.3914108276367188, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_7e5d265c", "query": "find function parse_tuple", "results": [{"qid": "", "rank": 1, "path": "tests/test_tools.py", "score": 0.12203863337413615, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11187319430021217, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08436337294359102, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.08157632642514173, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.0799663729452237, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "tests/test_types_namedtuple.py", "score": 0.07359075005277642, "span_start": null, "span_end": null, "passage": "from collections import namedtuple from typing import Generic, Named Tuple, Optional, Tuple, Type Var import pytest from typing extensions import Named Tuple as Typing Extensions Named Tuple from pyda"}, {"qid": "", "rank": 7, "path": "pydantic/color.py", "score": 0.06022383942271341, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 8, "path": "pydantic/v1/color.py", "score": 0.058388885336226076, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_utils.py", "score": 0.05815089827084469, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/tools.py", "score": 0.05788020155920227, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,"}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.05609130223964989, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/utils.py", "score": 0.05515954679142244, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.04930700898526098, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_git.py", "score": 0.048009275027217864, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 15, "path": "pydantic/deprecated/tools.py", "score": 0.04761161557238451, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 16, "path": "pydantic/v1/decorator.py", "score": 0.0473044875306173, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 17, "path": "docs/plugins/griffe_doclinks.py", "score": 0.039788379286278715, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 18, "path": "tests/test_validate_call.py", "score": 0.03908016570102996, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 19, "path": "tests/test_version.py", "score": 0.0381515872103097, "span_start": null, "span_end": null, "passage": "from unittest.mock import patch import pytest from packaging.version import parse as parse version import pydantic from pydantic.version import version info, version short def test version info(): ver"}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_generate_schema.py", "score": 0.036802752050797, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}], "latency_ms": 1.4429092407226562, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_f39af192", "query": "find function parse_str", "results": [{"qid": "", "rank": 1, "path": "tests/test_tools.py", "score": 0.14471135810571573, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11774919422345109, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.09038079106150282, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08879445382978127, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/tools.py", "score": 0.08423093544682915, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,"}, {"qid": "", "rank": 6, "path": "pydantic/validate_call_decorator.py", "score": 0.08416650689354824, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_serializers.py", "score": 0.06592629955526987, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 8, "path": "pydantic/deprecated/tools.py", "score": 0.05823356765182955, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 9, "path": "pydantic/v1/__init__.py", "score": 0.05235128176469656, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator"}, {"qid": "", "rank": 10, "path": "pydantic/v1/decorator.py", "score": 0.051193824182980616, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_git.py", "score": 0.05053090228689605, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 12, "path": "tests/test_version.py", "score": 0.045578447430057685, "span_start": null, "span_end": null, "passage": "from unittest.mock import patch import pytest from packaging.version import parse as parse version import pydantic from pydantic.version import version info, version short def test version info(): ver"}, {"qid": "", "rank": 13, "path": "docs/plugins/griffe_doclinks.py", "score": 0.04408874137337232, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/utils.py", "score": 0.04407765031729613, "span_start": null, "span_end": null, "passage": "...deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_decorators.py", "score": 0.04265788670768173, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 16, "path": "pydantic/functional_validators.py", "score": 0.038886989799657254, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 17, "path": "tests/test_docs.py", "score": 0.03846334884455989, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/config.py", "score": 0.037817755154474116, "span_start": null, "span_end": null, "passage": "import json from enum import Enum from typing import TYPE CHECKING, Any, Callable, Dict, Forward Ref, Optional, Tuple, Type, Union from typing extensions import Literal, Protocol from pydantic.v1.typi"}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_utils.py", "score": 0.037617767686627696, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/color.py", "score": 0.037161176986620706, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}], "latency_ms": 2.127408981323242, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_7bbb7673", "query": "find function ints_to_rgba", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/color.py", "score": 0.18424415866948854, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 2, "path": "pydantic/color.py", "score": 0.17231717997740506, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.09601791791137793, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/fail1.py", "score": 0.09519584948861246, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona"}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail1.py", "score": 0.09519584948861246, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona"}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail1.py", "score": 0.09519584948861246, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona"}, {"qid": "", "rank": 7, "path": "tests/mypy/modules/fail1.py", "score": 0.09519584948861246, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona"}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/fail1.py", "score": 0.09519584948861246, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona"}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail3.py", "score": 0.07675230932341762, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo"}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail3.py", "score": 0.07675230932341762, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo"}, {"qid": "", "rank": 11, "path": "tests/mypy/modules/fail3.py", "score": 0.07675230932341762, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo"}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/fail2.py", "score": 0.0684821465851667, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail2.py", "score": 0.0684821465851667, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/fail2.py", "score": 0.0684821465851667, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/fail2.py", "score": 0.0684821465851667, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail2.py", "score": 0.0684821465851667, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 17, "path": "pydantic/deprecated/class_validators.py", "score": 0.0680748970873299, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 18, "path": "pydantic/validate_call_decorator.py", "score": 0.05955267304896356, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 19, "path": "pydantic/dataclasses.py", "score": 0.055621735473448425, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 20, "path": "pydantic/config.py", "score": 0.05002091749245095, "span_start": null, "span_end": null, "passage": "...specified mode will be used to generate the JSON schema regardless of what `mode` was passed to the function call. Defaults to `None`. This provides a way to force the JSON schema generation to reflec..."}], "latency_ms": 1.5952587127685547, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_71addb78", "query": "find function parse_color_value", "results": [{"qid": "", "rank": 1, "path": "pydantic/color.py", "score": 0.22082574120119747, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 2, "path": "pydantic/v1/color.py", "score": 0.1662217380286551, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 3, "path": "tests/test_color.py", "score": 0.14291869282215783, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 4, "path": "tests/test_rich_repr.py", "score": 0.10486462182664498, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional import pytest from pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fi"}, {"qid": "", "rank": 5, "path": "tests/test_tools.py", "score": 0.07433999819114855, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 6, "path": "pydantic/v1/datetime_parse.py", "score": 0.06447510187656436, "span_start": null, "span_end": null, "passage": "import re from datetime import date, datetime, time, timedelta, timezone from typing import Dict, Optional, Type, Union from pydantic.v1 import errors date expr = r'(?P<year>\\d{4})-(?P<month>\\d{1,2})-"}, {"qid": "", "rank": 7, "path": "pydantic/validate_call_decorator.py", "score": 0.06256896905628614, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.06242678224409485, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/_hypothesis_plugin.py", "score": 0.0481599022054795, "span_start": null, "span_end": null, "passage": "import contextlib import datetime import ipaddress import json import math from fractions import Fraction from typing import Callable, Dict, Type, Union, cast, overload import hypothesis.strategies as"}, {"qid": "", "rank": 10, "path": "pydantic/functional_serializers.py", "score": 0.04766465961425583, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.04707592328144448, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 12, "path": "tests/conftest.py", "score": 0.045520712963193405, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/errors.py", "score": 0.04466001176983302, "span_start": null, "span_end": null, "passage": "from decimal import Decimal from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING:"}, {"qid": "", "rank": 14, "path": "pydantic/v1/json.py", "score": 0.04254050542167742, "span_start": null, "span_end": null, "passage": "...E[base] except Key Error: continue return encoder(obj) else:  # We have exited the for loop without finding a suitable encoder raise Type Error(f\"Object of type '{obj.  class  .  name  }' is not JSON ..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/main.py", "score": 0.03636253717470353, "span_start": null, "span_end": null, "passage": "...copy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve bases from typing import ( TYPE CHECKING, Abstract Set, Any, C..."}, {"qid": "", "rank": 16, "path": "tests/test_validators.py", "score": 0.036254393151092905, "span_start": null, "span_end": null, "passage": "...Deprecated Since20, Pydantic User Error, Type Adapter, Validation Error, Validation Info, Validator Function Wrap Handler, errors, field validator, model validator, root validator, validate call, vali..."}, {"qid": "", "rank": 17, "path": "pydantic/deprecated/json.py", "score": 0.03599166188303207, "span_start": null, "span_end": null, "passage": "...E[base] except Key Error: continue return encoder(obj) else:  # We have exited the for loop without finding a suitable encoder raise Type Error(f\"Object of type '{obj.  class  .  name  }' is not JSON ..."}, {"qid": "", "rank": 18, "path": "tests/test_utils.py", "score": 0.03411741325528719, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/tools.py", "score": 0.032297949134127715, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,"}, {"qid": "", "rank": 20, "path": "pydantic/types.py", "score": 0.02875407827711238, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}], "latency_ms": 1.6329288482666016, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_ce3e00c1", "query": "find function parse_float_alpha", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/color.py", "score": 0.26712812192178703, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 2, "path": "pydantic/color.py", "score": 0.2449220280859918, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 3, "path": "tests/test_tools.py", "score": 0.09367307760411249, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.0858704012144786, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06475471383281232, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "tests/conftest.py", "score": 0.06261546319069311, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/__init__.py", "score": 0.0625898951031223, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator"}, {"qid": "", "rank": 8, "path": "pydantic/validate_call_decorator.py", "score": 0.06137971273123791, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/datetime_parse.py", "score": 0.04706703229548248, "span_start": null, "span_end": null, "passage": "import re from datetime import date, datetime, time, timedelta, timezone from typing import Dict, Optional, Type, Union from pydantic.v1 import errors date expr = r'(?P<year>\\d{4})-(?P<month>\\d{1,2})-"}, {"qid": "", "rank": 10, "path": "tests/test_color.py", "score": 0.04643697367693205, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 11, "path": "pydantic/v1/tools.py", "score": 0.04442705119267487, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,"}, {"qid": "", "rank": 12, "path": "pydantic/functional_serializers.py", "score": 0.043053947445497974, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 13, "path": "tests/benchmarks/generate_north_star_data.py", "score": 0.04034537413399399, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import Any, Callable, List, Type Var, Union from faker import Faker f = Faker() Faker.seed(0) T = Type Var('T')  END DATETIME = datetime(2023, 1, 1, 0, 0, 0, "}, {"qid": "", "rank": 14, "path": "pydantic/v1/types.py", "score": 0.03959096731108817, "span_start": null, "span_end": null, "passage": "import abc import math import re import warnings from datetime import date from decimal import Decimal, Invalid Operation from enum import Enum from pathlib import Path from types import new class fro"}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_git.py", "score": 0.036850433514399324, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/tools.py", "score": 0.03654520242533578, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/computed_fields.py", "score": 0.0358005774694744, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, computed field class Square(Base Model): side: float @computed field @property def area(self) -> float: return self.side**2 @area.setter def area(self, area: float) ->"}, {"qid": "", "rank": 18, "path": "tests/mypy/modules/computed_fields.py", "score": 0.0358005774694744, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, computed field class Square(Base Model): side: float @computed field @property def area(self) -> float: return self.side**2 @area.setter def area(self, area: float) ->"}, {"qid": "", "rank": 19, "path": "pydantic/types.py", "score": 0.03453949306077276, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 20, "path": "tests/pyright/pyright_example.py", "score": 0.0327168650698607, "span_start": null, "span_end": null, "passage": "from functools import cached property from typing import List from pydantic import Base Model, Field, computed field class My Model(Base Model): x: str y: List[int] m1 = My Model(x='hello', y=[1, 2, 3"}], "latency_ms": 1.4235973358154297, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_d329acd9", "query": "find function parse_hsl", "results": [{"qid": "", "rank": 1, "path": "tests/test_color.py", "score": 0.12125443412237281, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 2, "path": "tests/test_tools.py", "score": 0.09783821052946945, "span_start": null, "span_end": null, "passage": "from typing import Dict, List, Mapping, Union import pytest from pydantic import Base Model, Pydantic Deprecated Since20, Validation Error from pydantic.dataclasses import dataclass from pydantic.depr"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.0896885915052216, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/color.py", "score": 0.08489956200872159, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06763400420690455, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 6, "path": "tests/conftest.py", "score": 0.06539963270922063, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 7, "path": "pydantic/validate_call_decorator.py", "score": 0.06410893513947666, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/tools.py", "score": 0.046402480829791926, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,"}, {"qid": "", "rank": 9, "path": "pydantic/functional_serializers.py", "score": 0.04496832261772952, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_git.py", "score": 0.03848897211983705, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 11, "path": "pydantic/color.py", "score": 0.03848503820268126, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 12, "path": "pydantic/deprecated/tools.py", "score": 0.038170169062269665, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 13, "path": "pydantic/v1/decorator.py", "score": 0.03221141094658261, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 14, "path": "tests/test_version.py", "score": 0.030586076870201734, "span_start": null, "span_end": null, "passage": "from unittest.mock import patch import pytest from packaging.version import parse as parse version import pydantic from pydantic.version import version info, version short def test version info(): ver"}, {"qid": "", "rank": 15, "path": "pydantic/v1/__init__.py", "score": 0.02943916752756173, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator"}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators.py", "score": 0.02876423549314537, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 17, "path": "tests/test_validate_call.py", "score": 0.02807100933643486, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 18, "path": "pydantic/functional_validators.py", "score": 0.027151189968163455, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 19, "path": "docs/plugins/griffe_doclinks.py", "score": 0.026882902122001166, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 20, "path": "pydantic/deprecated/class_validators.py", "score": 0.024407155522574466, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}], "latency_ms": 1.283884048461914, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_86e3a258", "query": "find function float_to_255", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/color.py", "score": 0.3080602176773269, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 2, "path": "pydantic/color.py", "score": 0.22377523913582908, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.1066814713476702, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "pydantic/deprecated/class_validators.py", "score": 0.07563515582394242, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.06616647102693882, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/dataclasses.py", "score": 0.06179897157002646, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 7, "path": "pydantic/config.py", "score": 0.05851528567374079, "span_start": null, "span_end": null, "passage": "...specified mode will be used to generate the JSON schema regardless of what `mode` was passed to the function call. Defaults to `None`. This provides a way to force the JSON schema generation to reflec..."}, {"qid": "", "rank": 8, "path": "pydantic/functional_serializers.py", "score": 0.05499067139990241, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05365735081240296, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 10, "path": "tests/pyright/pipeline_api.py", "score": 0.05094016045993406, "span_start": null, "span_end": null, "passage": "import datetime from typing import Annotated from pydantic.experimental.pipeline import validate as Annotated[str, validate as(int)]  # type: ignore Annotated[str, validate as(str).transform(lambda x:"}, {"qid": "", "rank": 11, "path": "tests/conftest.py", "score": 0.046703538724255436, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 12, "path": "pydantic/types.py", "score": 0.04465173331589828, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}, {"qid": "", "rank": 13, "path": "tests/test_utils.py", "score": 0.03632702260778358, "span_start": null, "span_end": null, "passage": "...ped-dict', 'fields': {'foo': {'type': 'model-field', 'schema': {'type': 'int'}}}, } def test handle function schema(): schema = core schema.with info before validator function( lambda v,  info: v, cor..."}, {"qid": "", "rank": 14, "path": "pydantic/fields.py", "score": 0.03247885752260091, "span_start": null, "span_end": null, "passage": "...Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally shouldn't be creating `Field Info` directly, ..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/types.py", "score": 0.03223562019299063, "span_start": null, "span_end": null, "passage": "import abc import math import re import warnings from datetime import date from decimal import Decimal, Invalid Operation from enum import Enum from pathlib import Path from types import new class fro"}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators.py", "score": 0.03120773828108929, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 17, "path": "tests/benchmarks/generate_north_star_data.py", "score": 0.03009275420470949, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import Any, Callable, List, Type Var, Union from faker import Faker f = Faker() Faker.seed(0) T = Type Var('T')  END DATETIME = datetime(2023, 1, 1, 0, 0, 0, "}, {"qid": "", "rank": 18, "path": "pydantic/functional_validators.py", "score": 0.028807429939709375, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.028380516089330433, "span_start": null, "span_end": null, "passage": "...js schema.update(f()) return js schema if 'metadata' in s: metadata = s['metadata'] if 'pydantic js functions' in s: metadata['pydantic js functions'].append(update js schema) else: metadata['pydantic..."}, {"qid": "", "rank": 20, "path": "tests/test_color.py", "score": 0.027662800203860353, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}], "latency_ms": 1.4026165008544922, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_abed80dc", "query": "find class RGBA", "results": [{"qid": "", "rank": 1, "path": "pydantic/color.py", "score": 0.2694188070716491, "span_start": null, "span_end": null, "passage": "... Tuple, str] Hsl Color Tuple = Union[Tuple[float, float, float], Tuple[float, float, float, float]] class RGBA:   slots   = ' original', ' rgba' def   init  (self, value: Color Type) -> None: self. rg..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/color.py", "score": 0.2143903939119686, "span_start": null, "span_end": null, "passage": "... Tuple, str] Hsl Color Tuple = Union[Tuple[float, float, float], Tuple[float, float, float, float]] class RGBA:   slots   = 'r', 'g', 'b', 'alpha', ' tuple' def   init  (self, r: float, g: float, b: f..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10907297619700361, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.076106743992538, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "tests/test_color.py", "score": 0.07329348813337909, "span_start": null, "span_end": null, "passage": "...Error from pydantic.color import Color pytestmark = pytest.mark.filterwarnings( 'ignore:The `Color` class is deprecated, use `pydantic extra types` instead.*:Deprecation Warning' ) @pytest.mark.parame..."}, {"qid": "", "rank": 6, "path": "docs/plugins/griffe_doclinks.py", "score": 0.031064776145541987, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.029686777576305133, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.027881848679117048, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 1.4386177062988281, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_9d755e63", "query": "find class Color", "results": [{"qid": "", "rank": 1, "path": "tests/test_color.py", "score": 0.2563713453029772, "span_start": null, "span_end": null, "passage": "...c core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark.filterwarnings( 'ignore:The `Color` class is deprecated,..."}, {"qid": "", "rank": 2, "path": "pydantic/color.py", "score": 0.24004443620291974, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor..."}, {"qid": "", "rank": 3, "path": "tests/test_rich_repr.py", "score": 0.19323024818266168, "span_start": null, "span_end": null, "passage": "...etime from typing import List, Optional import pytest from pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12246791544686961, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/color.py", "score": 0.11974579236839733, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1...."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08545319485350897, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/json.py", "score": 0.061242940795007084, "span_start": null, "span_end": null, "passage": "...tor Type from typing import Any, Callable, Dict, Type, Union from uuid import UUID from pydantic.v1.color import Color from pydantic.v1.networks import Name Email from pydantic.v1.types import Secret ..."}, {"qid": "", "rank": 8, "path": "pydantic/deprecated/json.py", "score": 0.05181497483321463, "span_start": null, "span_end": null, "passage": "..., Callable, Dict, Type, Union from uuid import UUID from typing extensions import deprecated from ..color import Color from ..networks import Name Email from ..types import Secret Bytes, Secret Str fr..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/_hypothesis_plugin.py", "score": 0.047496213356801764, "span_start": null, "span_end": null, "passage": "...ict, Type, Union, cast, overload import hypothesis.strategies as st import pydantic import pydantic.color import pydantic.types from pydantic.v1.utils import lenient issubclass try: import email valid..."}, {"qid": "", "rank": 10, "path": "tests/test_json.py", "score": 0.04404497725642066, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 11, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03487975217158035, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03333252555186844, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.4417171478271484, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_1b0d6dd9", "query": "find constant _255", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/color.py", "score": 0.2648476276792164, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08353120823289743, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/color.py", "score": 0.0644519860453997, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06299073264744816, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "tests/test_color.py", "score": 0.03607723294131236, "span_start": null, "span_end": null, "passage": "from datetime import datetime import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.color import Color pytestmark = pytest.mark."}, {"qid": "", "rank": 6, "path": "docs/plugins/griffe_doclinks.py", "score": 0.025037312520698293, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 7, "path": "tests/test_networks_ipaddress.py", "score": 0.02194749481530249, "span_start": null, "span_end": null, "passage": "import json from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from typing import Any, List import pytest from pydantic import Base Model, IPv Any A"}, {"qid": "", "rank": 8, "path": "tests/test_validate_call.py", "score": 0.02169570918810764, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 9, "path": "tests/test_docs.py", "score": 0.01728245942429865, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/_hypothesis_plugin.py", "score": 0.016037330122759378, "span_start": null, "span_end": null, "passage": "import contextlib import datetime import ipaddress import json import math from fractions import Fraction from typing import Callable, Dict, Type, Union, cast, overload import hypothesis.strategies as"}, {"qid": "", "rank": 11, "path": "pydantic/v1/validators.py", "score": 0.011616910073329122, "span_start": null, "span_end": null, "passage": "...nd not v <= field type.le: raise errors.Number Not Le Error(limit value=field type.le) return v def constant validator(v: 'Any', field: 'Model Field') -> 'Any': if v != field.default: raise errors.Wro..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/fields.py", "score": 0.006720302600621895, "span_start": null, "span_end": null, "passage": "...isinstance, lenient issubclass, sequence like, smart deepcopy, ) from pydantic.v1.validators import constant validator, dict validator, find validators, validate json Required: Any = Ellipsis T = Type..."}, {"qid": "", "rank": 13, "path": "tests/test_utils.py", "score": 0.0056841232555543495, "span_start": null, "span_end": null, "passage": "import collections.abc import json import os import pickle import sys from copy import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest f"}, {"qid": "", "rank": 14, "path": "pydantic/v1/env_settings.py", "score": 0.005122061777431465, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/errors.py", "score": 0.004885396699721434, "span_start": null, "span_end": null, "passage": "...rror', 'Missing Error', 'Extra Error', 'None Is Not Allowed Error', 'None Is Allowed Error', 'Wrong Constant Error', 'Not None Error', 'Bool Error', 'Bytes Error', 'Dict Error', 'Email Error', 'Url Er..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/utils.py", "score": 0.0048238889562916215, "span_start": null, "span_end": null, "passage": "...e intersection of keys if ``intersect`` is set to ``True``. Hide class attribute from its instances Find out what sort of thing a path is. Return type as is for immutable built-in types Use obj.copy()..."}, {"qid": "", "rank": 17, "path": "pydantic/_migration.py", "score": 0.004135406064970749, "span_start": null, "span_end": null, "passage": "...c.errors:Url Scheme Permitted Error', 'pydantic.errors:Url User Info Error', 'pydantic.errors:Wrong Constant Error', 'pydantic.main:validate model', 'pydantic.networks:stricturl', 'pydantic:parse file..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_decorators.py", "score": 0.0029855875268153184, "span_start": null, "span_end": null, "passage": "...n seqs if seq] if not non empty: return candidate: type[Any] | None = None for seq in non empty:  # Find merge candidates among seq heads. candidate = seq[0] not head = [s for s in non empty if candid..."}], "latency_ms": 1.6393661499023438, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_d6ec0551", "query": "find constant COLORS_BY_NAME", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.06328215318125001, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06038401530679763, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/metaclass_args.py", "score": 0.05688719763552931, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Config Class Used(Base Model): i: int = Field(2, alias='j') class Config: populate by name = True Config Class Used(i=None) class Metaclass Arguments No De"}, {"qid": "", "rank": 4, "path": "tests/mypy/modules/metaclass_args.py", "score": 0.05688719763552931, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Config Class Used(Base Model): i: int = Field(2, alias='j') class Config: populate by name = True Config Class Used(i=None) class Metaclass Arguments No De"}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-very-strict_ini/metaclass_args.py", "score": 0.05688719763552931, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Config Class Used(Base Model): i: int = Field(2, alias='j') class Config: populate by name = True Config Class Used(i=None) class Metaclass Arguments No De"}, {"qid": "", "rank": 6, "path": "pydantic/v1/color.py", "score": 0.04456305467419168, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 7, "path": "pydantic/errors.py", "score": 0.03499751913084979, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 8, "path": "pydantic/v1/main.py", "score": 0.03450552944772815, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b"}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_signature.py", "score": 0.034406528178960935, "span_start": null, "span_end": null, "passage": "from   future   import annotations import dataclasses from inspect import Parameter, Signature, signature from typing import TYPE CHECKING, Any, Callable from pydantic core import Pydantic Undefined f"}, {"qid": "", "rank": 10, "path": "pydantic/v1/utils.py", "score": 0.028663653922561552, "span_start": null, "span_end": null, "passage": "...e intersection of keys if ``intersect`` is set to ``True``. Hide class attribute from its instances Find out what sort of thing a path is. Return type as is for immutable built-in types Use obj.copy()..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/tools.py", "score": 0.028001987175281837, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,"}, {"qid": "", "rank": 12, "path": "pydantic/mypy.py", "score": 0.026844900719718803, "span_start": null, "span_end": null, "passage": "We might want to use this to print a warning if the mypy version being used is newer, or especially older, than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy p"}, {"qid": "", "rank": 13, "path": "pydantic/v1/schema.py", "score": 0.02519654270027067, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu"}, {"qid": "", "rank": 14, "path": "tests/test_aliases.py", "score": 0.023844006588910685, "span_start": null, "span_end": null, "passage": "from contextlib import nullcontext as does not raise from inspect import signature from typing import Any, Context Manager, List, Optional import pytest from dirty equals import Is Str from pydantic c"}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_fields.py", "score": 0.02369990325107577, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo"}, {"qid": "", "rank": 16, "path": "pydantic/v1/decorator.py", "score": 0.023639458548429818, "span_start": null, "span_end": null, "passage": "from functools import wraps from typing import TYPE CHECKING, Any, Callable, Dict, List, Mapping, Optional, Tuple, Type, Type Var, Union, overload from pydantic.v1 import validator from pydantic.v1.co"}, {"qid": "", "rank": 17, "path": "pydantic/v1/mypy.py", "score": 0.023086754846825645, "span_start": null, "span_end": null, "passage": "import sys from configparser import Config Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes "}, {"qid": "", "rank": 18, "path": "pydantic/main.py", "score": 0.022456323132770947, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat"}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_model_construction.py", "score": 0.021518180301051983, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr"}, {"qid": "", "rank": 20, "path": "tests/test_docs.py", "score": 0.021400147637942832, "span_start": null, "span_end": null, "passage": "...ytest from pydantic core import core schema from pytest examples import Code Example, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  ..."}], "latency_ms": 1.7023086547851562, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_57928ed4", "query": "find constant COLORS_BY_VALUE", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/color.py", "score": 0.06798576439134021, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import TYPE CHECKING, Any, Dict, Optional, Tuple, Union, cast from pydantic.v1.errors import Color Error from pydantic.v1."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.06532305040764769, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.06233144539827109, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "pydantic/color.py", "score": 0.06049097561537124, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor"}, {"qid": "", "rank": 5, "path": "pydantic/v1/datetime_parse.py", "score": 0.053113672614175836, "span_start": null, "span_end": null, "passage": "import re from datetime import date, datetime, time, timedelta, timezone from typing import Dict, Optional, Type, Union from pydantic.v1 import errors date expr = r'(?P<year>\\d{4})-(?P<month>\\d{1,2})-"}, {"qid": "", "rank": 6, "path": "pydantic/v1/errors.py", "score": 0.046361117782363646, "span_start": null, "span_end": null, "passage": "...rror', 'Missing Error', 'Extra Error', 'None Is Not Allowed Error', 'None Is Allowed Error', 'Wrong Constant Error', 'Not None Error', 'Bool Error', 'Bytes Error', 'Dict Error', 'Email Error', 'Url Er..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/main.py", "score": 0.042838127586620464, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b"}, {"qid": "", "rank": 8, "path": "pydantic/deprecated/copy_internals.py", "score": 0.040749353144542075, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import typing from copy import deepcopy from enum import Enum from typing import Any, Tuple import typing extensions from .. internal import (  model"}, {"qid": "", "rank": 9, "path": "tests/test_validators.py", "score": 0.03465398933234027, "span_start": null, "span_end": null, "passage": "import contextlib import re from collections import deque from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools import partial, partialmethod from "}, {"qid": "", "rank": 10, "path": "pydantic/v1/_hypothesis_plugin.py", "score": 0.029836462780063997, "span_start": null, "span_end": null, "passage": "import contextlib import datetime import ipaddress import json import math from fractions import Fraction from typing import Callable, Dict, Type, Union, cast, overload import hypothesis.strategies as"}, {"qid": "", "rank": 11, "path": "pydantic/networks.py", "score": 0.027498511724745947, "span_start": null, "span_end": null, "passage": "Attributes: max length: The maximum length of the url. Defaults to `None`. allowed schemes: The allowed schemes. Defaults to `None`. host required: Whether the host is required. Defaults to `None`. de"}, {"qid": "", "rank": 12, "path": "tests/test_datetime.py", "score": 0.0257999239352428, "span_start": null, "span_end": null, "passage": "import re from datetime import date, datetime, time, timedelta, timezone import pytest from dirty equals import Has Repr from typing extensions import Annotated from pydantic import ( Aware Datetime, "}, {"qid": "", "rank": 13, "path": "pydantic/v1/types.py", "score": 0.024847807894456966, "span_start": null, "span_end": null, "passage": "import abc import math import re import warnings from datetime import date from decimal import Decimal, Invalid Operation from enum import Enum from pathlib import Path from types import new class fro"}, {"qid": "", "rank": 14, "path": "tests/test_validate_call.py", "score": 0.023767123339798416, "span_start": null, "span_end": null, "passage": "... return a, kwargs from typing import Iterable from pydantic import validate call @validate call def find max no validate return[T](args: Iterable[T]) -> T: return sorted(args, reverse=True)[0] @valida..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.023503720195692933, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 16, "path": "tests/test_networks_ipaddress.py", "score": 0.023200422703048274, "span_start": null, "span_end": null, "passage": "import json from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from typing import Any, List import pytest from pydantic import Base Model, IPv Any A"}, {"qid": "", "rank": 17, "path": "tests/test_types.py", "score": 0.022018683279972397, "span_start": null, "span_end": null, "passage": "...nf'), 'null', None), ('null', float('-inf'), 'null', None), ('null', float('nan'), 'null', None), ('constants', float('inf'), 'Infinity', float('inf')), ('constants', float('-inf'), '-Infinity', float..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.021423087968794857, "span_start": null, "span_end": null, "passage": "def   call  (self,   value: Any) -> Any: ... class V1Validator With Values(Protocol): def   call  (self,   value: Any, *, values: dict[str, Any]) -> Any: ... class V1Validator With Kwargs(Protocol): d"}, {"qid": "", "rank": 19, "path": "pydantic/types.py", "score": 0.021404659871629844, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A"}, {"qid": "", "rank": 20, "path": "pydantic/v1/validators.py", "score": 0.021311801525072012, "span_start": null, "span_end": null, "passage": "...nd not v <= field type.le: raise errors.Number Not Le Error(limit value=field type.le) return v def constant validator(v: 'Any', field: 'Model Field') -> 'Any': if v != field.default: raise errors.Wro..."}], "latency_ms": 1.9147396087646484, "gold_paths": ["pydantic/color.py"]}
{"qid": "lens_main_symbol_f44ccad9", "query": "find function __init__", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.12374659517325025, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/dataclasses.py", "score": 0.09496710100636703, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09331708300994399, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/conftest.py", "score": 0.09023423980156955, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.08845341765938099, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/errors.py", "score": 0.08685779347548213, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se"}, {"qid": "", "rank": 7, "path": "pydantic/dataclasses.py", "score": 0.07346440999595533, "span_start": null, "span_end": null, "passage": "...tic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`. in..."}, {"qid": "", "rank": 8, "path": "tests/test_dataclasses.py", "score": 0.06964617672208902, "span_start": null, "span_end": null, "passage": "...e)) class Built In Dataclass For Pickle: value: int The reason for the convoluted structure of this function is to avoid creating the classes while collecting tests, which may trigger breakpoints etc...."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/custom_constructor.py", "score": 0.06766637688258437, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class Person(Base Model): id: int name: str birth year: int def   init  (self, id: int) -> None: super().  init  (id=id, name='Patrick', birth year=1991) Person(1) Pers"}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.062044421940468504, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/decorator.py", "score": 0.05346925701646643, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_decorators.py", "score": 0.039687056573199354, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_validators.py", "score": 0.03746147929267824, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.03709131284305777, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 16, "path": "pydantic/mypy.py", "score": 0.03670085345009195, "span_start": null, "span_end": null, "passage": "...MODEL METACLASS FULLNAME: return self. pydantic model metaclass marker callback return None def get function hook(self, fullname: str) -> Callable[[Function Context], Type] | None: if fullname.endswit..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/env_settings.py", "score": 0.03555322061256917, "span_start": null, "span_end": null, "passage": "... field in settings.  fields  .values(): for env name in field.field info.extra['env names']: path = find case path(secrets path, env name, settings.  config  .case sensitive) if not path: continue if ..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/errors.py", "score": 0.03552027217402846, "span_start": null, "span_end": null, "passage": "from decimal import Decimal from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING:"}, {"qid": "", "rank": 19, "path": "pydantic/deprecated/class_validators.py", "score": 0.033675435672403685, "span_start": null, "span_end": null, "passage": "... (bool, optional): Whether to track and raise an error if another validator refers to the decorated function. Defaults to False. Returns: Callable: A decorator that can be used to decorate a function ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_core_metadata.py", "score": 0.033418430511128736, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}], "latency_ms": 1.405954360961914, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_733f6a23", "query": "find function with_config", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/modules/with_config_decorator.py", "score": 0.22930548432393846, "span_start": null, "span_end": null, "passage": "from typing import Typed Dict from pydantic import Config Dict, with config @with config(Config Dict(str to lower=True)) class Model(Typed Dict): a: str model = Model(a='ABC')"}, {"qid": "", "rank": 2, "path": "tests/test_config.py", "score": 0.10295354097694752, "span_start": null, "span_end": null, "passage": "...st.warns(User Warning, match=re.escape(warning message)): @validate call(config=config dict) def my function(): pass def test invalid extra(): extra error = re.escape( \"Input should be 'allow', 'forbi..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08161396934355808, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 4, "path": "tests/mypy/modules/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/pydantic_settings.py", "score": 0.08024233486085783, "span_start": null, "span_end": null, "passage": "from pydantic settings import Base Settings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file="}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_config.py", "score": 0.07855402365465794, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from contextlib import contextmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schem"}, {"qid": "", "rank": 14, "path": "pydantic/validate_call_decorator.py", "score": 0.07608823574648454, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/config.py", "score": 0.07366599733344803, "span_start": null, "span_end": null, "passage": "import json from enum import Enum from typing import TYPE CHECKING, Any, Callable, Dict, Forward Ref, Optional, Tuple, Type, Union from typing extensions import Literal, Protocol from pydantic.v1.typi"}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.065946804408803, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 17, "path": "tests/conftest.py", "score": 0.06253276759049013, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/class_validators.py", "score": 0.056565725903953014, "span_start": null, "span_end": null, "passage": "...p from functools import partial, partialmethod, wraps from itertools import chain from types import Function Type from typing import TYPE CHECKING, Any, Callable, Dict, Iterable, List, Optional, Set, ..."}, {"qid": "", "rank": 19, "path": "tests/test_strict.py", "score": 0.05323232780464667, "span_start": null, "span_end": null, "passage": "import sys from typing import Any, Type if sys.version info < (3, 9): from typing extensions import Annotated else: from typing import Annotated import pytest from pydantic import Base Model, Config D"}, {"qid": "", "rank": 20, "path": "tests/mypy/modules/config_conditional_extra.py", "score": 0.05235452642877254, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Config Dict def condition() -> bool: return True class My Model(Base Model): model config = Config Dict(extra='ignore' if condition() else 'forbid')"}], "latency_ms": 1.4812946319580078, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9722b6fe", "query": "find function inner", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11685027588983958, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08811658114456238, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.08520554283341264, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.08352396478001944, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/functional_serializers.py", "score": 0.058586725647030505, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_validators.py", "score": 0.05555902954470935, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_generate_schema.py", "score": 0.046984072382799336, "span_start": null, "span_end": null, "passage": "...Schema Value: The updated JSON schema. Args: json encoders: A dictionary of types and their encoder functions. tp: The type to check for a matching encoder. schema: The schema to add the encoder to. d..."}, {"qid": "", "rank": 8, "path": "tests/test_pickle.py", "score": 0.046224970523471166, "span_start": null, "span_end": null, "passage": "...raises(Validation Error): model type(foo='hi', val=-1.1) class Importable Nested Model(Base Model): inner: Importable Model def nested model factory() -> Type: class Non Importable Nested Model(Base M..."}, {"qid": "", "rank": 9, "path": "tests/test_main.py", "score": 0.04590162538174141, "span_start": null, "span_end": null, "passage": "...bute Error` should be thrown when `  getattr  ` is being accessed essentially disabling the `extra` functionality. model config = Config Dict(frozen=True) def   hash  (self): return hash(id(self)) cla..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/decorator.py", "score": 0.04196645518387972, "span_start": null, "span_end": null, "passage": "...'Config Type' = None) -> Any: def validate( func: 'Any Callable') -> 'Any Callable': vd = Validated Function( func, config) @wraps( func) def wrapper function(*args: Any, **kwargs: Any) -> Any: return..."}, {"qid": "", "rank": 11, "path": "tests/test_generics.py", "score": 0.04168563230404094, "span_start": null, "span_end": null, "passage": "...(clean cache): types cache size = len( GENERIC TYPES CACHE) def run() -> None:  # Run inside nested function to get classes in local vars cleaned also T1 = Type Var('T1') T2 = Type Var('T2') class A(B..."}, {"qid": "", "rank": 12, "path": "tests/test_model_validator.py", "score": 0.04050589213359146, "span_start": null, "span_end": null, "passage": "...ng import Any, Dict, cast import pytest from pydantic import Base Model, Validation Info, Validator Function Wrap Handler, model validator def test model validator wrap() -> None: class Model(Base Mod..."}, {"qid": "", "rank": 13, "path": "docs/extra/fluff.js", "score": 0.03978658309513858, "span_start": null, "span_end": null, "passage": "async function set download count(el) { const r = await fetch('https://errors.pydantic.dev/download-count.txt'); if (r.status === 200) { el.inner Text = await r.text(); } } const download count = docu..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_decorators.py", "score": 0.03747532207525717, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 15, "path": "tests/test_serialize.py", "score": 0.0372418645015035, "span_start": null, "span_end": null, "passage": "... ( Base Model, Field, Field Serialization Info, Pydantic User Error, Serialization Info, Serializer Function Wrap Handler, Type Adapter, computed field, errors, field serializer, model serializer, ) f..."}, {"qid": "", "rank": 16, "path": "tests/test_serialize_as_any.py", "score": 0.03559230200797878, "span_start": null, "span_end": null, "passage": "...[Parent]) assert ta any.dump python(other) == {'y': 'hello', 'x': 1} def test serialize as any with inner models() -> None: class Inner(Base Model): x: int class Outer(Base Model): inner: Inner class ..."}, {"qid": "", "rank": 17, "path": "docs/plugins/griffe_doclinks.py", "score": 0.035024237497279766, "span_start": null, "span_end": null, "passage": "...slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content: str, slug: str, file path: Path) -> Tuple[str, int]: for m in re.finditer('^#+..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.03291236603103652, "span_start": null, "span_end": null, "passage": "...re schema.Core Schema: global definitions: dict[str, Core Schema] = collect definitions(schema) def inner(s: core schema.Core Schema, recurse:  core utils.Recurse) -> core schema.Core Schema: nonlocal..."}, {"qid": "", "rank": 19, "path": "tests/test_json_schema.py", "score": 0.032805357678215935, "span_start": null, "span_end": null, "passage": "...sub model(): class Foo(Base Model): Spam enum. This is docstring which needs to be cleaned up class Inner(Base Model): a: Dict[Path, str] = {Path(): ''} class Outer(Base Model): inner: Inner = Inner()..."}, {"qid": "", "rank": 20, "path": "pydantic/types.py", "score": 0.032538580873635634, "span_start": null, "span_end": null, "passage": "...ataclasses.dataclass class Allow Inf Nan( fields.Pydantic Metadata): !!! warning \"Discouraged\" This function is **discouraged** in favor of using [`Annotated`](https://docs.python.org/3/library/typing..."}], "latency_ms": 1.6329288482666016, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_56c1ee84", "query": "find class ConfigDict", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/modules/with_config_decorator.py", "score": 0.22064027831454, "span_start": null, "span_end": null, "passage": "...ped Dict from pydantic import Config Dict, with config @with config(Config Dict(str to lower=True)) class Model(Typed Dict): a: str model = Model(a='ABC')"}, {"qid": "", "rank": 2, "path": "tests/test_config.py", "score": 0.2057775299572291, "span_start": null, "span_end": null, "passage": "...g extra import get type hints from pydantic.config import Config Dict, Json Value from pydantic.dataclasses import dataclass as pydantic dataclass from pydantic.errors import Pydantic User Error from ..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_config.py", "score": 0.19731333396703207, "span_start": null, "span_end": null, "passage": "...rate Schema from ..fields import Computed Field Info, Field Info DEPRECATION MESSAGE = 'Support for class-based `config` is deprecated, use Config Dict instead.' class Config Wrapper: The config wrapp..."}, {"qid": "", "rank": 4, "path": "tests/mypy/modules/config_conditional_extra.py", "score": 0.1933771708965601, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Config Dict def condition() -> bool: return True class My Model(Base Model): model config = Config Dict(extra='ignore' if condition() else 'forbid')"}, {"qid": "", "rank": 5, "path": "pydantic/v1/config.py", "score": 0.1914255379295958, "span_start": null, "span_end": null, "passage": "...fields import Model Field from pydantic.v1.main import Base Model Config Type = Type['Base Config'] class Schema Extra Callable(Protocol): @overload def   call  (self, schema: Dict[str, Any]) -> None:..."}, {"qid": "", "rank": 6, "path": "tests/mypy/modules/no_strict_optional.py", "score": 0.12627322066508784, "span_start": null, "span_end": null, "passage": "from typing import Optional, Union from pydantic import Base Model, Config Dict class Mongo Settings(Base Model): MONGO PASSWORD: Union[str, None] class Custom Base Model(Base Model): model config = C..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11452384851115276, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.11344899559763122, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.2612342834472656, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.7330646514892578, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.745462417602539, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 2.058744430541992, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.6198158264160156, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_daab3d3a", "query": "find class SomeEnum", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.09831976792763801, "span_start": null, "span_end": null, "passage": "...   future   import annotations as  annotations import collections import collections.abc import dataclasses import decimal import inspect import os import typing from enum import Enum from functools i..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07581215658369268, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 3, "path": "tests/test_types.py", "score": 0.06794320731429715, "span_start": null, "span_end": null, "passage": "...ort sys import typing import uuid from collections import Ordered Dict, defaultdict, deque from dataclasses import dataclass from datetime import date, datetime, time, timedelta, timezone from decimal..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.0528986793412153, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "tests/test_create_model.py", "score": 0.04893108202598353, "span_start": null, "span_end": null, "passage": "... test create model(): model = create model('Foo Model', foo=(str, ...), bar=(int, 123)) assert issubclass(model, Base Model) assert model.model config == Base Model.model config assert model.  name   ..."}, {"qid": "", "rank": 6, "path": "tests/test_abc.py", "score": 0.04759719986970924, "span_start": null, "span_end": null, "passage": "import abc import sys import pytest from pydantic import Base Model def test model subclassing abstract base classes(): class Model(Base Model, abc.ABC): some field: str @pytest.mark.skipif(sys.versio..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/validators.py", "score": 0.03274012623268956, "span_start": null, "span_end": null, "passage": "... parse time from pydantic.v1.typing import ( Any Callable, all literal values, display as type, get class, is callable type, is literal type, is namedtuple, is none type, is typeddict, ) from pydantic..."}, {"qid": "", "rank": 8, "path": "tests/test_main.py", "score": 0.031149256153721234, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 9, "path": "tests/test_json_schema.py", "score": 0.029122297958391496, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 10, "path": "tests/test_discriminated_union.py", "score": 0.027338721634891636, "span_start": null, "span_end": null, "passage": "...validator from pydantic. internal. discriminated union import apply discriminator from pydantic.dataclasses import dataclass as pydantic dataclass from pydantic.errors import Pydantic User Error from ..."}, {"qid": "", "rank": 11, "path": "tests/test_deprecated.py", "score": 0.02651497460672586, "span_start": null, "span_end": null, "passage": "...e `model validate` instead.' ), ): return model type.from orm(obj) def test from attributes root(): class Pokemon Cls: def   init  (self, *, en name: str, jp name: str): self.en name = en name self.jp..."}, {"qid": "", "rank": 12, "path": "tests/test_type_adapter.py", "score": 0.0263369558856182, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/config.py", "score": 0.02457880431781964, "span_start": null, "span_end": null, "passage": "...fields import Model Field from pydantic.v1.main import Base Model Config Type = Type['Base Config'] class Schema Extra Callable(Protocol): @overload def   call  (self, schema: Dict[str, Any]) -> None:..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/schema.py", "score": 0.024108645117553767, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/json.py", "score": 0.02350988152650653, "span_start": null, "span_end": null, "passage": "...ytes: str, Secret Str: str, set: list, UUID: str, } def pydantic encoder(obj: Any) -> Any: from dataclasses import asdict, is dataclass from pydantic.v1.main import Base Model if isinstance(obj, Base ..."}, {"qid": "", "rank": 16, "path": "tests/test_dataclasses.py", "score": 0.0220793466329495, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/errors.py", "score": 0.022000141616111316, "span_start": null, "span_end": null, "passage": "...or', 'Duration Error', 'Hashable Error', 'UUIDError', 'UUIDVersion Error', 'Arbitrary Type Error', 'Class Error', 'Subclass Error', 'Json Error', 'Json Type Error', 'Pattern Error', 'Dataclass Type Er..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.021591853046436703, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "tests/test_generics.py", "score": 0.021059612051936672, "span_start": null, "span_end": null, "passage": "...s from collections import deque from enum import Enum, Int Enum from typing import ( Any, Callable, Class Var, Counter, Default Dict, Deque, Dict, Frozen Set, Generic, Iterable, List, Mapping, Named T..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.02063406270325948, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 2.0170211791992188, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_42d04cc5", "query": "find class SomeModel", "results": [{"qid": "", "rank": 1, "path": "tests/test_create_model.py", "score": 0.13716406445334817, "span_start": null, "span_end": null, "passage": "... test create model(): model = create model('Foo Model', foo=(str, ...), bar=(int, 123)) assert issubclass(model, Base Model) assert model.model config == Base Model.model config assert model.  name   ..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.1272533051430108, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.1272533051430108, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 4, "path": "tests/mypy/modules/plugin_success.py", "score": 0.1272533051430108, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.1272533051430108, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.1272533051430108, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.1272533051430108, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.1272533051430108, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.12642409915029, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.12642409915029, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 11, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.12642409915029, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.12642409915029, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.12642409915029, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.12642409915029, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10739342232146552, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/test_main.py", "score": 0.10053723706567472, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.08959154830304314, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.08959154830304314, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.08959154830304314, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.08959154830304314, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.5323162078857422, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 2.0112991333007812, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.8603801727294922, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_dbe31af7", "query": "find class Pet", "results": [{"qid": "", "rank": 1, "path": "tests/test_discriminated_union.py", "score": 0.3212871317771363, "span_start": null, "span_end": null, "passage": "...validator from pydantic. internal. discriminated union import apply discriminator from pydantic.dataclasses import dataclass as pydantic dataclass from pydantic.errors import Pydantic User Error from ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08928732815182196, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 3, "path": "tests/test_deprecated.py", "score": 0.06596325199999933, "span_start": null, "span_end": null, "passage": "...e `model validate` instead.' ), ): return model type.from orm(obj) def test from attributes root(): class Pokemon Cls: def   init  (self, *, en name: str, jp name: str): self.en name = en name self.jp..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.062301113092897556, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 5, "path": "tests/test_forward_ref.py", "score": 0.040476051865314375, "span_start": null, "span_end": null, "passage": "import dataclasses import re import sys import typing from typing import Any, Optional, Tuple import pytest from pydantic import Base Model, Pydantic User Error, Validation Error def test postponed an..."}, {"qid": "", "rank": 6, "path": "docs/plugins/griffe_doclinks.py", "score": 0.025429679819684754, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.02430164779255857, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.02282412985591712, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 1.5397071838378906, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 1.7170906066894531, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_5e8b26af", "query": "find class Voice", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.16538203980514155, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.1153969480183618, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "docs/plugins/griffe_doclinks.py", "score": 0.047102006602997355, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 1.7993450164794922, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_433c0c31", "query": "find class Athlete", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.16538203980514155, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.1153969480183618, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 3, "path": "docs/plugins/griffe_doclinks.py", "score": 0.047102006602997355, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04501261450813657, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.04227588875691965, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 1.409769058227539, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 1.239776611328125, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.6415119171142578, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_a574e818", "query": "find class SubUser", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.17474483497375382, "span_start": null, "span_end": null, "passage": "... ```py from pydantic import Base Model, Config Dict from pydantic.alias generators import to pascal class Voice(Base Model): model config = Config Dict(alias generator=to pascal) name: str language co..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.13031619823621118, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/strict_equality.py", "score": 0.13031619823621118, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 4, "path": "tests/test_serialize_as_any.py", "score": 0.10052215134673255, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 5, "path": "tests/test_main.py", "score": 0.09746470918590927, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 6, "path": "docs/plugins/main.py", "score": 0.08469394914011166, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 7, "path": "tests/test_fields.py", "score": 0.08430291689674625, "span_start": null, "span_end": null, "passage": "from typing import Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def te..."}, {"qid": "", "rank": 8, "path": "tests/test_rich_repr.py", "score": 0.08336313246097812, "span_start": null, "span_end": null, "passage": "... from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optional[datetime] = None friends:..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.0802365334695818, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 10, "path": "tests/test_json.py", "score": 0.06458557552583599, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 11, "path": "tests/test_construction.py", "score": 0.05835358606461735, "span_start": null, "span_end": null, "passage": "...lias Choices, Alias Path, Base Model, Config Dict, Field, Private Attr, Pydantic Deprecated Since20 class Model(Base Model): a: float b: int = 10 def test simple construct(): m = Model.model construct..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05598583191301902, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 13, "path": "tests/test_edge_cases.py", "score": 0.055134818766324416, "span_start": null, "span_end": null, "passage": "...ydantic.functional serializers import ( field serializer, model serializer, ) def test str bytes(): class Model(Base Model): v: Union[str, bytes] m = Model(v='s') assert m.v == 's' assert repr(m.model..."}, {"qid": "", "rank": 14, "path": "tests/test_dataclasses.py", "score": 0.04539032573080605, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 15, "path": "tests/test_types_self.py", "score": 0.043112226356095906, "span_start": null, "span_end": null, "passage": "import dataclasses import typing from typing import List, Optional, Union import pytest import typing extensions from typing extensions import Named Tuple, Typed Dict from pydantic import Base Model, ..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/schema.py", "score": 0.04309602226454898, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/fields.py", "score": 0.04023427582136649, "span_start": null, "span_end": null, "passage": "...yping extensions import Annotated, Final from pydantic.v1 import errors as errors  from pydantic.v1.class validators import Validator, make generic validator, prep validators from pydantic.v1.error wr..."}, {"qid": "", "rank": 18, "path": "tests/test_computed_fields.py", "score": 0.039080220094560844, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 19, "path": "pydantic/networks.py", "score": 0.03640465159842539, "span_start": null, "span_end": null, "passage": "...* Host required * Max length 2083 ```py from pydantic import Base Model, Http Url, Validation Error class My Model(Base Model): url: Http Url m = My Model(url='http://www.example.com')  # (1)! print(m..."}, {"qid": "", "rank": 20, "path": "tests/test_networks.py", "score": 0.0329136386317705, "span_start": null, "span_end": null, "passage": "...example.org/path?query#fragment', 'file://localhost/foo/bar', ], ) def test any url success(value): class Model(Base Model): v: Any Url assert Model(v=value).v, value @pytest.mark.parametrize( 'value,..."}], "latency_ms": 1.7313957214355469, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_ce9f1008", "query": "find class Transaction", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.08374221242750277, "span_start": null, "span_end": null, "passage": "... ```py from pydantic import Base Model, Config Dict from pydantic.alias generators import to pascal class Voice(Base Model): model config = Config Dict(alias generator=to pascal) name: str language co..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08118464032067294, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05664738281141238, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/test_main.py", "score": 0.03344067811542648, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 5, "path": "docs/plugins/griffe_doclinks.py", "score": 0.023121975451214735, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.020752875142979098, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.020752875142979098, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 1.2981891632080078, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.607656478881836, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_a574e818", "query": "find class SubUser", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.17474483497375382, "span_start": null, "span_end": null, "passage": "... ```py from pydantic import Base Model, Config Dict from pydantic.alias generators import to pascal class Voice(Base Model): model config = Config Dict(alias generator=to pascal) name: str language co..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.13031619823621118, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/strict_equality.py", "score": 0.13031619823621118, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 4, "path": "tests/test_serialize_as_any.py", "score": 0.10052215134673255, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 5, "path": "tests/test_main.py", "score": 0.09746470918590927, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 6, "path": "docs/plugins/main.py", "score": 0.08469394914011166, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 7, "path": "tests/test_fields.py", "score": 0.08430291689674625, "span_start": null, "span_end": null, "passage": "from typing import Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def te..."}, {"qid": "", "rank": 8, "path": "tests/test_rich_repr.py", "score": 0.08336313246097812, "span_start": null, "span_end": null, "passage": "... from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optional[datetime] = None friends:..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.0802365334695818, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 10, "path": "tests/test_json.py", "score": 0.06458557552583599, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 11, "path": "tests/test_construction.py", "score": 0.05835358606461735, "span_start": null, "span_end": null, "passage": "...lias Choices, Alias Path, Base Model, Config Dict, Field, Private Attr, Pydantic Deprecated Since20 class Model(Base Model): a: float b: int = 10 def test simple construct(): m = Model.model construct..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05598583191301902, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 13, "path": "tests/test_edge_cases.py", "score": 0.055134818766324416, "span_start": null, "span_end": null, "passage": "...ydantic.functional serializers import ( field serializer, model serializer, ) def test str bytes(): class Model(Base Model): v: Union[str, bytes] m = Model(v='s') assert m.v == 's' assert repr(m.model..."}, {"qid": "", "rank": 14, "path": "tests/test_dataclasses.py", "score": 0.04539032573080605, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 15, "path": "tests/test_types_self.py", "score": 0.043112226356095906, "span_start": null, "span_end": null, "passage": "import dataclasses import typing from typing import List, Optional, Union import pytest import typing extensions from typing extensions import Named Tuple, Typed Dict from pydantic import Base Model, ..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/schema.py", "score": 0.04309602226454898, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/fields.py", "score": 0.04023427582136649, "span_start": null, "span_end": null, "passage": "...yping extensions import Annotated, Final from pydantic.v1 import errors as errors  from pydantic.v1.class validators import Validator, make generic validator, prep validators from pydantic.v1.error wr..."}, {"qid": "", "rank": 18, "path": "tests/test_computed_fields.py", "score": 0.039080220094560844, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 19, "path": "pydantic/networks.py", "score": 0.03640465159842539, "span_start": null, "span_end": null, "passage": "...* Host required * Max length 2083 ```py from pydantic import Base Model, Http Url, Validation Error class My Model(Base Model): url: Http Url m = My Model(url='http://www.example.com')  # (1)! print(m..."}, {"qid": "", "rank": 20, "path": "tests/test_networks.py", "score": 0.0329136386317705, "span_start": null, "span_end": null, "passage": "...example.org/path?query#fragment', 'file://localhost/foo/bar', ], ) def test any url success(value): class Model(Base Model): v: Any Url assert Model(v=value).v, value @pytest.mark.parametrize( 'value,..."}], "latency_ms": 1.979827880859375, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_ce9f1008", "query": "find class Transaction", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.08374221242750277, "span_start": null, "span_end": null, "passage": "... ```py from pydantic import Base Model, Config Dict from pydantic.alias generators import to pascal class Voice(Base Model): model config = Config Dict(alias generator=to pascal) name: str language co..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08118464032067294, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05664738281141238, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/test_main.py", "score": 0.03344067811542648, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 5, "path": "docs/plugins/griffe_doclinks.py", "score": 0.023121975451214735, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.020752875142979098, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.020752875142979098, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 1.4538764953613281, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_9f9002a1", "query": "find class User", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/strict_equality.py", "score": 0.24716727903262775, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.17895513679883313, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.15743015911347724, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 5, "path": "tests/test_rich_repr.py", "score": 0.145186564102352, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.11493653601199108, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11399498355741236, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07954112313179823, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.06702237769366476, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.06678351754577035, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 11, "path": "tests/test_dataclasses.py", "score": 0.05784751871928166, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 12, "path": "pydantic/networks.py", "score": 0.056226936358970636, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 13, "path": "tests/test_types_typeddict.py", "score": 0.05145201650774487, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 14, "path": "tests/test_networks.py", "score": 0.046761612602140824, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.04455525988904811, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 16, "path": "tests/test_errors.py", "score": 0.04213580147615494, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/networks.py", "score": 0.03503330489957749, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.typing import Any Callable Callable Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: ..."}, {"qid": "", "rank": 18, "path": "docs/plugins/griffe_doclinks.py", "score": 0.032466599605109496, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.031717367051871004, "span_start": null, "span_end": null, "passage": "...ssage: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str,..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.03102641772212344, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}], "latency_ms": 1.6336441040039062, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_a574e818", "query": "find class SubUser", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.17474483497375382, "span_start": null, "span_end": null, "passage": "... ```py from pydantic import Base Model, Config Dict from pydantic.alias generators import to pascal class Voice(Base Model): model config = Config Dict(alias generator=to pascal) name: str language co..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.13031619823621118, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/strict_equality.py", "score": 0.13031619823621118, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 4, "path": "tests/test_serialize_as_any.py", "score": 0.10052215134673255, "span_start": null, "span_end": null, "passage": "import json from dataclasses import dataclass from typing import List, Optional import pytest from typing extensions import Typed Dict from pydantic import Base Model, Config Dict, Root Model, Secret ..."}, {"qid": "", "rank": 5, "path": "tests/test_main.py", "score": 0.09746470918590927, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 6, "path": "docs/plugins/main.py", "score": 0.08469394914011166, "span_start": null, "span_end": null, "passage": "...rains.com/issue/IDEA-297873 & https://python-markdown.github.io/extensions/fenced code blocks/ <div class=\"tile\"> <a href=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" ..."}, {"qid": "", "rank": 7, "path": "tests/test_fields.py", "score": 0.08430291689674625, "span_start": null, "span_end": null, "passage": "from typing import Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def te..."}, {"qid": "", "rank": 8, "path": "tests/test_rich_repr.py", "score": 0.08336313246097812, "span_start": null, "span_end": null, "passage": "... from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optional[datetime] = None friends:..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.0802365334695818, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 10, "path": "tests/test_json.py", "score": 0.06458557552583599, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 11, "path": "tests/test_construction.py", "score": 0.05835358606461735, "span_start": null, "span_end": null, "passage": "...lias Choices, Alias Path, Base Model, Config Dict, Field, Private Attr, Pydantic Deprecated Since20 class Model(Base Model): a: float b: int = 10 def test simple construct(): m = Model.model construct..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05598583191301902, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 13, "path": "tests/test_edge_cases.py", "score": 0.055134818766324416, "span_start": null, "span_end": null, "passage": "...ydantic.functional serializers import ( field serializer, model serializer, ) def test str bytes(): class Model(Base Model): v: Union[str, bytes] m = Model(v='s') assert m.v == 's' assert repr(m.model..."}, {"qid": "", "rank": 14, "path": "tests/test_dataclasses.py", "score": 0.04539032573080605, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 15, "path": "tests/test_types_self.py", "score": 0.043112226356095906, "span_start": null, "span_end": null, "passage": "import dataclasses import typing from typing import List, Optional, Union import pytest import typing extensions from typing extensions import Named Tuple, Typed Dict from pydantic import Base Model, ..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/schema.py", "score": 0.04309602226454898, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/fields.py", "score": 0.04023427582136649, "span_start": null, "span_end": null, "passage": "...yping extensions import Annotated, Final from pydantic.v1 import errors as errors  from pydantic.v1.class validators import Validator, make generic validator, prep validators from pydantic.v1.error wr..."}, {"qid": "", "rank": 18, "path": "tests/test_computed_fields.py", "score": 0.039080220094560844, "span_start": null, "span_end": null, "passage": "import random import sys from abc import ABC, abstractmethod from typing import Any, Callable, Class Var, Generic, List, Tuple, Type Var import pytest from pydantic core import Validation Error, core ..."}, {"qid": "", "rank": 19, "path": "pydantic/networks.py", "score": 0.03640465159842539, "span_start": null, "span_end": null, "passage": "...* Host required * Max length 2083 ```py from pydantic import Base Model, Http Url, Validation Error class My Model(Base Model): url: Http Url m = My Model(url='http://www.example.com')  # (1)! print(m..."}, {"qid": "", "rank": 20, "path": "tests/test_networks.py", "score": 0.0329136386317705, "span_start": null, "span_end": null, "passage": "...example.org/path?query#fragment', 'file://localhost/foo/bar', ], ) def test any url success(value): class Model(Base Model): v: Any Url assert Model(v=value).v, value @pytest.mark.parametrize( 'value,..."}], "latency_ms": 1.9602775573730469, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_ce9f1008", "query": "find class Transaction", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.08374221242750277, "span_start": null, "span_end": null, "passage": "... ```py from pydantic import Base Model, Config Dict from pydantic.alias generators import to pascal class Voice(Base Model): model config = Config Dict(alias generator=to pascal) name: str language co..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08118464032067294, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.05664738281141238, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 4, "path": "tests/test_main.py", "score": 0.03344067811542648, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 5, "path": "docs/plugins/griffe_doclinks.py", "score": 0.023121975451214735, "span_start": null, "span_end": null, "passage": "... re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 17, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.022096310597219768, "span_start": null, "span_end": null, "passage": "...t, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model): x: int y: str def method(self) -> None: pass class..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.020752875142979098, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.020752875142979098, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 1.6398429870605469, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 1.4126300811767578, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 1.5017986297607422, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 2.25830078125, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 3.4596920013427734, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 3.0450820922851562, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 2.166748046875, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 2.2509098052978516, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_fd215ba4", "query": "find class ForceInputModel", "results": [{"qid": "", "rank": 1, "path": "tests/test_errors.py", "score": 0.16807570419149367, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er"}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.13968226199248446, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.13968226199248446, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 4, "path": "tests/mypy/modules/plugin_success.py", "score": 0.13968226199248446, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.13968226199248446, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.13968226199248446, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.13968226199248446, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.13968226199248446, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/test_main.py", "score": 0.13942622975702548, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.1387720666259217, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.1387720666259217, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.1387720666259217, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 13, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.1387720666259217, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.1387720666259217, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.1387720666259217, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 16, "path": "tests/test_edge_cases.py", "score": 0.12061536972544606, "span_start": null, "span_end": null, "passage": "...ydantic.functional serializers import ( field serializer, model serializer, ) def test str bytes(): class Model(Base Model): v: Union[str, bytes] m = Model(v='s') assert m.v == 's' assert repr(m.model..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.11788264466779848, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.11773271812962158, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 19, "path": "tests/test_types.py", "score": 0.11745181001449503, "span_start": null, "span_end": null, "passage": "...ort sys import typing import uuid from collections import Ordered Dict, defaultdict, deque from dataclasses import dataclass from datetime import date, datetime, time, timedelta, timezone from decimal..."}, {"qid": "", "rank": 20, "path": "tests/test_fields.py", "score": 0.10597964287076114, "span_start": null, "span_end": null, "passage": "from typing import Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def te..."}], "latency_ms": 3.3159255981445312, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 3.1070709228515625, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 2.844572067260742, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 2.189159393310547, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 1.9292831420898438, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_4948cbaa", "query": "find class Model", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.20070529108686716, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.20059814751114846, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.1670897976156444, "span_start": null, "span_end": null, "passage": "...rm import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools im..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15970235480551193, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.13772318963944663, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 1.9307136535644531, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_symbol_0e21b304", "query": "find constant FOO", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/modules/plugin_optional_inheritance.py", "score": 0.12797755584467604, "span_start": null, "span_end": null, "passage": "from typing import Optional from pydantic import Base Model class Foo(Base Model): id: Optional[int] class Bar(Base Model): foo: Optional[Foo] class Baz(Bar): name: str b = Bar(foo={'id': 1}) assert b..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_optional_inheritance.py", "score": 0.12797755584467604, "span_start": null, "span_end": null, "passage": "from typing import Optional from pydantic import Base Model class Foo(Base Model): id: Optional[int] class Bar(Base Model): foo: Optional[Foo] class Baz(Bar): name: str b = Bar(foo={'id': 1}) assert b..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_optional_inheritance.py", "score": 0.12797755584467604, "span_start": null, "span_end": null, "passage": "from typing import Optional from pydantic import Base Model class Foo(Base Model): id: Optional[int] class Bar(Base Model): foo: Optional[Foo] class Baz(Bar): name: str b = Bar(foo={'id': 1}) assert b..."}, {"qid": "", "rank": 4, "path": "tests/test_validate_call.py", "score": 0.11434494457764652, "span_start": null, "span_end": null, "passage": "...ation Error, validate call from pydantic.main import Base Model def test args(): @validate call def foo(a: int, b: int): return f'{a}, {b}' assert foo(1, 2) == '1, 2' assert foo(*[1, 2]) == '1, 2' ass..."}, {"qid": "", "rank": 5, "path": "tests/test_private_attributes.py", "score": 0.09935127870116577, "span_start": null, "span_end": null, "passage": "...te Attr, computed field def test private attribute(): default = {'a': {}} class Model(Base Model):  foo = Private Attr(default) assert set(Model.  private attributes  ) == {' foo'} m = Model() assert ..."}, {"qid": "", "rank": 6, "path": "tests/test_deprecated_validate_arguments.py", "score": 0.09693425135051816, "span_start": null, "span_end": null, "passage": "...' ): return validate arguments deprecated(*args, **kwargs) def test args(): @validate arguments def foo(a: int, b: int): return f'{a}, {b}' assert foo(1, 2) == '1, 2' assert foo(*[1, 2]) == '1, 2' ass..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.09657748676841647, "span_start": null, "span_end": null, "passage": "...s: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names ..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/fail4.py", "score": 0.08882041590703511, "span_start": null, "span_end": null, "passage": "...typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) fo..."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/fail4.py", "score": 0.08882041590703511, "span_start": null, "span_end": null, "passage": "...typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) fo..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail4.py", "score": 0.08882041590703511, "span_start": null, "span_end": null, "passage": "...typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) fo..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/pyproject-default_toml/fail4.py", "score": 0.08882041590703511, "span_start": null, "span_end": null, "passage": "...typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) fo..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail4.py", "score": 0.08882041590703511, "span_start": null, "span_end": null, "passage": "...typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=1) fo..."}, {"qid": "", "rank": 13, "path": "tests/mypy/modules/dataclass_no_any.py", "score": 0.08583040639636197, "span_start": null, "span_end": null, "passage": "from pydantic.dataclasses import dataclass @dataclass class Foo: foo: int @dataclass(config={'title': 'Bar Title'}) class Bar: bar: str"}, {"qid": "", "rank": 14, "path": "tests/test_create_model.py", "score": 0.0794646924976169, "span_start": null, "span_end": null, "passage": "...or, ) from pydantic.fields import Model Private Attr def test create model(): model = create model('Foo Model', foo=(str, ...), bar=(int, 123)) assert issubclass(model, Base Model) assert model.model ..."}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/covariant_typevar.py", "score": 0.07606481911133103, "span_start": null, "span_end": null, "passage": "...ng import Generic, Type Var from pydantic import Base Model T = Type Var(\"T\", covariant=True) class Foo(Base Model, Generic[T]): value: T class Bar(Foo[T]): ..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07282890763210463, "span_start": null, "span_end": null, "passage": "...n schema that may contains `$ref`. Returns: Resolved json schema. Raises: Lookup Error: If it can't find the definition for `$ref`. Used internally by Pydantic, please do not rely on this implementati..."}, {"qid": "", "rank": 17, "path": "tests/test_forward_ref.py", "score": 0.05888606446622779, "span_start": null, "span_end": null, "passage": "...rom typing import Optional import pytest from pydantic import Base Model, Pydantic User Error class Foo(Base Model): a: Optional['Bar'] = None with pytest.raises(Pydantic User Error, match='`Foo` is n..."}, {"qid": "", "rank": 18, "path": "tests/test_model_signature.py", "score": 0.04297223461432049, "span_start": null, "span_end": null, "passage": "...ignature(): class My Model(Base Model): id: int name: str = 'John Doe' f  : str = Field(..., alias='foo') model config = Config Dict(extra='allow') def   init  (self, id: int = 1, bar=2, *, baz: Any, ..."}, {"qid": "", "rank": 19, "path": "tests/test_types_typeddict.py", "score": 0.04276328064569965, "span_start": null, "span_end": null, "passage": "...e(name='Typed Dict') def fixture typed dict(Typed Dict All): class Test Typed Dict(Typed Dict All): foo: str if sys.version info < (3, 12) and Typed Dict All.  module   == 'typing': pytest.skip('typin..."}, {"qid": "", "rank": 20, "path": "tests/test_main.py", "score": 0.038435988624183515, "span_start": null, "span_end": null, "passage": "... Model') def none check model fix(): class None Check Model(Base Model): existing str value: str = 'foo' required str value: str = ... required str none value: Optional[str] = ... existing bytes value..."}], "latency_ms": 1.9140243530273438, "gold_paths": ["pydantic/config.py"]}
