{"qid": "lens_main_repo_1", "query": "error handling that logs and returns status", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/modules/no_strict_optional.py", "score": 0.33010395311037144, "span_start": null, "span_end": null, "passage": "... Dict( validate assignment=True, validate default=True, extra='forbid', frozen=True, ) class Health Status(Custom Base Model): status: str description: Optional[str] = None hs = Health Status(status='..."}, {"qid": "", "rank": 2, "path": "pydantic/aliases.py", "score": 0.22500236469907184, "span_start": null, "span_end": null, "passage": "...n alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified path, or `Pydantic Undefined` if t..."}, {"qid": "", "rank": 3, "path": "pydantic/validate_call_decorator.py", "score": 0.10889583090560719, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.10590121437316413, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 5, "path": "pydantic/dataclasses.py", "score": 0.09814608394827079, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 6, "path": "pydantic/alias_generators.py", "score": 0.08492518073980972, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08482978871184926, "span_start": null, "span_end": null, "passage": "...s of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names and their corres..."}, {"qid": "", "rank": 8, "path": "pydantic/json_schema.py", "score": 0.08427660131429608, "span_start": null, "span_end": null, "passage": "...s,  internal dataclass,  mock val ser,  schema generation shared,  typing extra, ) from .annotated handlers import Get Json Schema Handler from .config import Json Dict, Json Schema Extra Callable, Js..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/error_wrappers.py", "score": 0.06983628147697751, "span_start": null, "span_end": null, "passage": "...mport Model Or Dc from pydantic.v1.typing import Repr Args Loc = Tuple[Union[int, str], ...] class  Error Dict Required(Typed Dict): loc: Loc msg: str type: str class Error Dict( Error Dict Required, ..."}, {"qid": "", "rank": 10, "path": "pydantic/deprecated/class_validators.py", "score": 0.06679970170638905, "span_start": null, "span_end": null, "passage": "...tr): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) the validator sho..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/errors.py", "score": 0.06203251400388478, "span_start": null, "span_end": null, "passage": "...ay as type if TYPE CHECKING: from pydantic.v1.typing import Dict Str Any   all   = ( 'Pydantic Type Error', 'Pydantic Value Error', 'Config Error', 'Missing Error', 'Extra Error', 'None Is Not Allowed..."}, {"qid": "", "rank": 12, "path": "pydantic/version.py", "score": 0.06151835875106866, "span_start": null, "span_end": null, "passage": "...n '.'.join(VERSION.split('.')[:2]) def version info() -> str: It parses normal version like `0.930` and extra info followed by a `+` sign like `0.940+dev.04cac4b5d911c4f9529e6ce86a27b44f28846f5d.dirty..."}, {"qid": "", "rank": 13, "path": "docs/plugins/using_update.py", "score": 0.06008932886050749, "span_start": null, "span_end": null, "passage": "...0): repo = lib['repo'] url = f'https://api.github.com/repos/{repo}' resp = session.get(url) if resp.status code == 403 and retry < 3: print(f'retrying {repo} {retry}') sleep(5) return update lib(lib, ..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_dataclasses.py", "score": 0.05993277492669957, "span_start": null, "span_end": null, "passage": "...fined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic decorators  : Metadata containing the decorators defined on the da..."}, {"qid": "", "rank": 15, "path": "pydantic/config.py", "score": 0.05991196130166602, "span_start": null, "span_end": null, "passage": "...d Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=..."}, {"qid": "", "rank": 16, "path": "pydantic/functional_validators.py", "score": 0.059501444765443334, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 17, "path": "pydantic/fields.py", "score": 0.058527630716501196, "span_start": null, "span_end": null, "passage": "... serialization alias of the field. title: The title of the field. field title generator: A callable that takes a field name and returns title for it. description: The description of the field. example..."}, {"qid": "", "rank": 18, "path": "pydantic/color.py", "score": 0.05842247150255488, "span_start": null, "span_end": null, "passage": "...Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, core schema from typing extensions import deprecated from . internal import  repr from . inte..."}, {"qid": "", "rank": 19, "path": "pydantic/errors.py", "score": 0.051306412919215026, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se..."}, {"qid": "", "rank": 20, "path": "pydantic/types.py", "score": 0.0503627386500034, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}], "latency_ms": 4.575252532958984, "gold_paths": ["pydantic/__init__.py", "pydantic/annotated_handlers.py"]}
{"qid": "lens_main_repo_3", "query": "API rate limiting implementation", "results": [{"qid": "", "rank": 1, "path": "docs/plugins/griffe_doclinks.py", "score": 0.19045855451868585, "span_start": null, "span_end": null, "passage": "...se Value Error(f'heading with slug {slug!r} not found in {file path}') def insert at top(path: str, api link: str) -> str: rel file = path.rstrip('/') + '.md' file path = DOCS PATH / rel file content ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.16636704219822995, "span_start": null, "span_end": null, "passage": "...ing modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Get Json Schema Handler` for the handler API. This returns the input json schem..."}, {"qid": "", "rank": 3, "path": "pydantic/mypy.py", "score": 0.1556663318328665, "span_start": null, "span_end": null, "passage": "... ctx: Class Def Context) -> bool: transformer = Pydantic Model Transformer(ctx.cls, ctx.reason, ctx.api, self.plugin config) return transformer.transform() def  pydantic model metaclass marker callbac..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/mypy.py", "score": 0.07590574920997722, "span_start": null, "span_end": null, "passage": "...x.args[1] if default args and default factory args: error default and default factory specified(ctx.api, ctx.context) return default any type if default args: default type = ctx.arg types[0][0] defaul..."}, {"qid": "", "rank": 5, "path": "tests/test_abc.py", "score": 0.052267955258906096, "span_start": null, "span_end": null, "passage": "...'error value different on older versions') def test model subclassing abstract base classes without implementation raises exception(): class Model(Base Model, abc.ABC): some field: str @abc.abstractme..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_typing_extra.py", "score": 0.033147654652620234, "span_start": null, "span_end": null, "passage": "...ydantic/issues/6912 Implemented as EAFP with memory. For older versions of python, we have a custom implementation of `get type hints` which is a close as possible to the implementation in CPython 3.1..."}, {"qid": "", "rank": 7, "path": "docs/plugins/using_update.py", "score": 0.02745420604857429, "span_start": null, "span_end": null, "passage": "...nt session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'https://api.github.com/repos/{repo}' resp = session.get(url) if resp.status code == 403 and retry < 3: print..."}, {"qid": "", "rank": 8, "path": "tests/test_exports.py", "score": 0.02680206643084693, "span_start": null, "span_end": null, "passage": "...t.mark.parametrize(('attr name', 'value'), list(pydantic. dynamic imports.items())) def test public api dynamic imports(attr name, value): package, module name = value if module name == '  module  ': ..."}, {"qid": "", "rank": 9, "path": "release/make_history.py", "score": 0.02615515572413377, "span_start": null, "span_end": null, "passage": "...', 'previous tag name': last tag, 'tag name': f'v{new version}'} response = requests.post( 'https://api.github.com/repos/pydantic/pydantic/releases/generate-notes', headers={ 'Accept': 'application/vn..."}, {"qid": "", "rank": 10, "path": "tests/mypy/test_mypy.py", "score": 0.022430995162239575, "span_start": null, "span_end": null, "passage": "...mport Path from typing import Any, List, Optional, Tuple, Union import pytest try: from mypy import api as mypy api from mypy.version import   version   as mypy version from pydantic.version import pa..."}, {"qid": "", "rank": 11, "path": "pydantic/config.py", "score": 0.021240071040523875, "span_start": null, "span_end": null, "passage": "...ource field names do not match your code style (e. g. Camel Case fields), you can automatically generate aliases using `alias generator`. Here's an example with a basic callable: ```py from pydantic i..."}, {"qid": "", "rank": 12, "path": "tests/benchmarks/basemodel_eq_performance.py", "score": 0.008954440568211288, "span_start": null, "span_end": null, "passage": "...ON = '.'.join(map(str, sys.version info)) PYDANTIC VERSION = metadata.version('pydantic') class Old Implementation Model(pydantic.Base Model, frozen=True): def   eq  (self, other: Any) -> bool: if isi..."}, {"qid": "", "rank": 13, "path": "tests/test_generics.py", "score": 0.007274841713485358, "span_start": null, "span_end": null, "passage": "... assert len( GENERIC TYPES CACHE) == cache size + 15 del models @pytest.mark.skipif(platform.python implementation() == 'Py Py', reason='Py Py does not play nice with Py O3 gc') def test caches get cl..."}, {"qid": "", "rank": 14, "path": "tests/test_create_model.py", "score": 0.007177335991254091, "span_start": null, "span_end": null, "passage": "...e field') del m.some field assert not hasattr(m, 'some field') @pytest.mark.skipif( platform.python implementation() == 'Py Py', reason='In this single case `del` behaves weird on pypy', ) def test de..."}, {"qid": "", "rank": 15, "path": "pydantic/type_adapter.py", "score": 0.007138580685633088, "span_start": null, "span_end": null, "passage": "... Config Dict | None: type : Any =  typing extra.annotated type(self. type) or self. type  # Eg Fast API heavily uses Annotated if  utils.lenient issubclass(type , Base Model): return type .model confi..."}, {"qid": "", "rank": 16, "path": "tests/test_docs.py", "score": 0.005933516616388551, "span_start": null, "span_end": null, "passage": "...ts(): if sys.platform not in {'linux', 'darwin'}: return 'not in linux or macos' if platform.python implementation() != 'CPython': return 'not cpython' try: import devtools  # noqa: F401 except Import..."}, {"qid": "", "rank": 17, "path": "tests/test_deprecated.py", "score": 0.005291929983767336, "span_start": null, "span_end": null, "passage": "... [w.message.message for w in all warnings] == expected warnings @pytest.mark.skipif(platform.python implementation() == 'Py Py', reason='Different error str on Py Py') def test parse raw pass fail(): ..."}, {"qid": "", "rank": 18, "path": ".github/actions/people/people.py", "score": 0.003134751990931265, "span_start": null, "span_end": null, "passage": "...rt Base Model, Secret Str from pydantic settings import Base Settings github graphql url = \"https://api.github.com/graphql\" class Author(Base Model): login: str avatar Url: str url: str class Comments..."}, {"qid": "", "rank": 19, "path": "pydantic/types.py", "score": 0.0020868490364345693, "span_start": null, "span_end": null, "passage": "...string and loads the Python object importable at that dotted path. Attributes of modules may be separated from the module by `:` or `.`, e.g. if `'math:cos'` was provided, the resulting field value wo..."}, {"qid": "", "rank": 20, "path": "tests/test_dataclasses.py", "score": 0.002012389637222814, "span_start": null, "span_end": null, "passage": "...ated, Literal import pydantic from pydantic import ( Base Model, Before Validator, Config Dict, Generate Schema, Pydantic Deprecated Since20, Pydantic Undefined Annotation, Pydantic User Error, Root M..."}], "latency_ms": 2.8395652770996094, "gold_paths": ["pydantic/config.py", "pydantic/fields.py"]}
{"qid": "lens_main_repo_4", "query": "user session management", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/modules/strict_equality.py", "score": 0.2325005516804363, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.2325005516804363, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_rich_repr.py", "score": 0.1917793348431328, "span_start": null, "span_end": null, "passage": "...port pytest from pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' si..."}, {"qid": "", "rank": 4, "path": "tests/test_serialize_as_any.py", "score": 0.1749888759507323, "span_start": null, "span_end": null, "passage": "...rialize As Any, Type Adapter from pydantic.dataclasses import dataclass as pydantic dataclass class User(Base Model): name: str class User Login(User): password: Secret Str user = User(name='pydantic'..."}, {"qid": "", "rank": 5, "path": "pydantic/config.py", "score": 0.12361789572864883, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 6, "path": "docs/plugins/main.py", "score": 0.12272819194020972, "span_start": null, "span_end": null, "passage": "...f=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" /> </a> <div class=\"user-list user-list-center\"> {% for user in people.experts %} <div class=\"user\"> <a href=\"{{ user.ur..."}, {"qid": "", "rank": 7, "path": "docs/plugins/using_update.py", "score": 0.10228485898839228, "span_start": null, "span_end": null, "passage": "...ib import Path from time import sleep import requests import tomli THIS DIR = Path(  file  ).parent session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'https://api..."}, {"qid": "", "rank": 8, "path": "tests/test_computed_fields.py", "score": 0.06466259830013911, "span_start": null, "span_end": null, "passage": "...ld validator, ) from pydantic.alias generators import to camel from pydantic.errors import Pydantic User Error try: from functools import cached property, lru cache, singledispatchmethod except Import..."}, {"qid": "", "rank": 9, "path": "tests/test_main.py", "score": 0.06348490069354626, "span_start": null, "span_end": null, "passage": "...ld, Generate Schema, Get Core Schema Handler, Private Attr, Pydantic Undefined Annotation, Pydantic User Error, Secret Str, String Constraints, Type Adapter, Validation Error, Validation Info, constr,..."}, {"qid": "", "rank": 10, "path": "pydantic/networks.py", "score": 0.061928705521895167, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 11, "path": "tests/test_networks.py", "score": 0.056390465849410175, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 12, "path": "tests/test_errors.py", "score": 0.054749759869023265, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/networks.py", "score": 0.03931025568078952, "span_start": null, "span_end": null, "passage": "...e Generator = Generator[Any Callable, None, None] class Parts(Typed Dict, total=False): scheme: str user: Optional[str] password: Optional[str] ipv4: Optional[str] ipv6: Optional[str] domain: Optional..."}, {"qid": "", "rank": 14, "path": "tests/test_dataclasses.py", "score": 0.03635289370584851, "span_start": null, "span_end": null, "passage": "... Config Dict, Generate Schema, Pydantic Deprecated Since20, Pydantic Undefined Annotation, Pydantic User Error, Root Model, Type Adapter, Validation Error, Validation Info, computed field, field seria..."}, {"qid": "", "rank": 15, "path": "tests/test_decorators.py", "score": 0.033453989351995644, "span_start": null, "span_end": null, "passage": "import pytest from pydantic import Pydantic User Error from pydantic. internal. decorators import inspect annotated serializer, inspect validator def  two pos required args(a, b): pass def  two pos re..."}, {"qid": "", "rank": 16, "path": "tests/test_types_typeddict.py", "score": 0.03188548162052742, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}, {"qid": "", "rank": 17, "path": "tests/test_deprecated.py", "score": 0.03186542748983993, "span_start": null, "span_end": null, "passage": "...ict, Field, Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pyda..."}, {"qid": "", "rank": 18, "path": "pydantic/errors.py", "score": 0.029093947991040123, "span_start": null, "span_end": null, "passage": "...one: super().  init  (message, code='import-error') class Pydantic Schema Generation Error(Pydantic User Error): def   init  (self, message: str) -> None: super().  init  (message, code='schema-for-un..."}, {"qid": "", "rank": 19, "path": "tests/test_strict.py", "score": 0.025367926863360188, "span_start": null, "span_end": null, "passage": "...pytest from pydantic import Base Model, Config Dict, Field, Validation Error @pytest.fixture(scope='session', name='Model With Strict Field') def model with strict field(): class Model With Strict Fie..."}, {"qid": "", "rank": 20, "path": "tests/test_migration.py", "score": 0.02012926771009985, "span_start": null, "span_end": null, "passage": "...e, obj name) else: return importlib.import module(dotted path) @pytest.mark.filterwarnings('ignore::User Warning') @pytest.mark.parametrize('module', MOVED IN V2.keys()) def test moved on v2(module: s..."}], "latency_ms": 2.8209686279296875, "gold_paths": ["pydantic/type_adapter.py", "tests/test_config.py"]}
{"qid": "lens_main_repo_5", "query": "configuration loading from environment", "results": [{"qid": "", "rank": 1, "path": "pydantic/plugin/_loader.py", "score": 0.2180227137350619, "span_start": null, "span_end": null, "passage": "from   future   import annotations import importlib.metadata as importlib metadata import os import warnings from typing import TYPE CHECKING, Final, Iterable if TYPE CHECKING: from . import Pydantic ..."}, {"qid": "", "rank": 2, "path": "pydantic/validate_call_decorator.py", "score": 0.06553393885811253, "span_start": null, "span_end": null, "passage": "...all` or with arguments `@validate call(...)`. Args: func: The function to be decorated. config: The configuration dictionary. validate return: Whether to validate the return value. Returns: The decora..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_validate_call.py", "score": 0.038903777647162255, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import inspect from functools import partial from typing import Any, Awaitable, Callable import pydantic core from ..config import Config Dict from ...."}, {"qid": "", "rank": 4, "path": "pydantic/v1/__init__.py", "score": 0.025061369734682322, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_dataclasses.py", "score": 0.022227162145267192, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 6, "path": "pydantic/deprecated/decorator.py", "score": 0.01778877280920141, "span_start": null, "span_end": null, "passage": "import warnings from functools import wraps from typing import TYPE CHECKING, Any, Callable, Dict, List, Mapping, Optional, Tuple, Type, Type Var, Union, overload from typing extensions import depreca..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/json.py", "score": 0.017122505196806033, "span_start": null, "span_end": null, "passage": "import datetime from collections import deque from decimal import Decimal from enum import Enum from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network f..."}, {"qid": "", "rank": 8, "path": "tests/mypy/modules/covariant_typevar.py", "score": 0.016776612549741873, "span_start": null, "span_end": null, "passage": "from typing import Generic, Type Var from pydantic import Base Model T = Type Var(\"T\", covariant=True) class Foo(Base Model, Generic[T]): value: T class Bar(Foo[T]): ..."}, {"qid": "", "rank": 9, "path": "pydantic/deprecated/json.py", "score": 0.016556117826332574, "span_start": null, "span_end": null, "passage": "import datetime import warnings from collections import deque from decimal import Decimal from enum import Enum from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interfac..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/fail2.py", "score": 0.015886452958932734, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail2.py", "score": 0.015886452958932734, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona..."}, {"qid": "", "rank": 12, "path": "tests/mypy/modules/fail2.py", "score": 0.015886452958932734, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/fail2.py", "score": 0.015886452958932734, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail2.py", "score": 0.015886452958932734, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona..."}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/with_config_decorator.py", "score": 0.015134590543226117, "span_start": null, "span_end": null, "passage": "from typing import Typed Dict from pydantic import Config Dict, with config @with config(Config Dict(str to lower=True)) class Model(Typed Dict): a: str model = Model(a='ABC')"}, {"qid": "", "rank": 16, "path": "pydantic/config.py", "score": 0.014997358031267257, "span_start": null, "span_end": null, "passage": "... pet Input should be an instance of Pet [type=is instance of, input value='Hedwig', input type=str] from attributes: bool loc by alias: bool A callable that takes a field name and returns an alias for..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail1.py", "score": 0.014722322631497392, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/fail1.py", "score": 0.014722322631497392, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/fail1.py", "score": 0.014722322631497392, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail1.py", "score": 0.014722322631497392, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}], "latency_ms": 2.5811195373535156, "gold_paths": ["pydantic/dataclasses.py", "pydantic/fields.py"]}
{"qid": "lens_main_repo_6", "query": "request validation and sanitization", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.11333726121328253, "span_start": null, "span_end": null, "passage": "...mputed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, ..."}, {"qid": "", "rank": 2, "path": "tests/test_types_self.py", "score": 0.07942101890260908, "span_start": null, "span_end": null, "passage": "...ing extensions import Named Tuple, Typed Dict from pydantic import Base Model, Field, Type Adapter, Validation Error @pytest.fixture( name='Self', params=[ pytest.param(typing, id='typing.Self'), pyte..."}, {"qid": "", "rank": 3, "path": "pydantic/aliases.py", "score": 0.0651160819578586, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat..."}, {"qid": "", "rank": 4, "path": "pydantic/deprecated/class_validators.py", "score": 0.05610353368431971, "span_start": null, "span_end": null, "passage": "...tor should be called on. pre (bool, optional): Whether this validator should be called before the standard validators (else after). Defaults to False. each item (bool, optional): For complex objects (..."}, {"qid": "", "rank": 5, "path": "pydantic/functional_validators.py", "score": 0.0545676752246471, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 6, "path": "tests/test_aliases.py", "score": 0.04503025234167619, "span_start": null, "span_end": null, "passage": "... from pydantic import ( Alias Choices, Alias Generator, Alias Path, Base Model, Config Dict, Field, Validation Error, computed field, ) def test alias generator(): def to camel(string: str): return ''..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.04494886986071782, "span_start": null, "span_end": null, "passage": "...s of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names and their corres..."}, {"qid": "", "rank": 8, "path": "tests/test_datetime.py", "score": 0.044462729520302134, "span_start": null, "span_end": null, "passage": "...Aware Datetime, Base Model, Future Date, Future Datetime, Naive Datetime, Past Date, Past Datetime, Validation Error, condate, ) from .conftest import Err def create tz(minutes): return timezone(timed..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/main.py", "score": 0.04232273086152846, "span_start": null, "span_end": null, "passage": "...Config, Extra, inherit config, prepare config from pydantic.v1.error wrappers import Error Wrapper, Validation Error from pydantic.v1.errors import Config Error, Dict Error, Extra Error, Missing Error..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_typing_extra.py", "score": 0.042212354017663725, "span_start": null, "span_end": null, "passage": "...isinstance because it fails <3.10. if v is None: return False return v.  class   == Final.  class   and (sys.version info < (3, 8) or getattr(v, ' name', None) == 'Final') def is finalvar(ann type: An..."}, {"qid": "", "rank": 11, "path": "tests/test_types.py", "score": 0.04179683469371583, "span_start": null, "span_end": null, "passage": "...mail Str, Fail Fast, Field, File Path, Finite Float, Future Date, Future Datetime, Get Core Schema Handler, Get Pydantic Schema, Import String, Instance Of, Json, Json Value, Naive Datetime, Name Emai..."}, {"qid": "", "rank": 12, "path": "pydantic/fields.py", "score": 0.03886755803576164, "span_start": null, "span_end": null, "passage": "... None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias: str | None title: str..."}, {"qid": "", "rank": 13, "path": "tests/test_errors.py", "score": 0.038682108310709465, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 14, "path": "tests/test_assert_in_validators.py", "score": 0.037170528842468256, "span_start": null, "span_end": null, "passage": "...flib import pprint import pytest from dirty equals import Has Repr from pydantic import Base Model, Validation Error, field validator def  pformat lines(obj): return pprint.pformat(obj).splitlines(kee..."}, {"qid": "", "rank": 15, "path": "tests/conftest.py", "score": 0.03457313906126127, "span_start": null, "span_end": null, "passage": "...(): os.environ['PYDANTIC ERRORS INCLUDE URL'] = 'false' @pytest.fixture def create module(tmp path, request): def run(source code or function, rewrite assertions=True, module name prefix=None): if isi..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.034545746906787106, "span_start": null, "span_end": null, "passage": "...ator With Values, V1Validator With Values Kw Only, V1Validator With Kwargs, V1Validator With Values And Kwargs ] def can be keyword(param: Parameter) -> bool: return param.kind in (Parameter.POSITIONA..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/dataclasses.py", "score": 0.034160561785159554, "span_start": null, "span_end": null, "passage": "...v1.config import Base Config, Config Dict, Extra, get config from pydantic.v1.error wrappers import Validation Error from pydantic.v1.errors import Dataclass Type Error from pydantic.v1.fields import ..."}, {"qid": "", "rank": 18, "path": "pydantic/plugin/__init__.py", "score": 0.033578423947092186, "span_start": null, "span_end": null, "passage": "...s from typing import Any, Callable, Named Tuple from pydantic core import Core Config, Core Schema, Validation Error from typing extensions import Literal, Protocol, Type Alias   all   = ( 'Pydantic P..."}, {"qid": "", "rank": 19, "path": "pydantic/type_adapter.py", "score": 0.03210055836553775, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 20, "path": "pydantic/types.py", "score": 0.03071892062644986, "span_start": null, "span_end": null, "passage": "...: 'https://errors.pydantic.dev/2/v/greater than equal', } ] Strict Int = Annotated[int, Strict()] 1 validation error for Strict Int Model strict int Input should be a valid integer [type=int type, inp..."}], "latency_ms": 3.0384063720703125, "gold_paths": ["pydantic/fields.py", "tests/test_construction.py"]}
{"qid": "lens_main_repo_9", "query": "cache invalidation strategy", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/_hypothesis_plugin.py", "score": 0.15820755058690647, "span_start": null, "span_end": null, "passage": "...rue except email validator.Email Not Valid Error:  # pragma: no cover return False st.register type strategy(pydantic.Email Str, st.emails().filter(is valid email))  # type: ignore[arg-type] st.regist..."}, {"qid": "", "rank": 2, "path": "tests/test_generics.py", "score": 0.11034345324685625, "span_start": null, "span_end": null, "passage": "...core utils import collect invalid schemas from pydantic. internal. generics import (  GENERIC TYPES CACHE,  LIMITED DICT SIZE, Limited Dict, generic recursion self type, iter contained typevars, recur..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_generics.py", "score": 0.09216987496894974, "span_start": null, "span_end": null, "passage": "...c Alias  # type: ignore[attr-defined] if TYPE CHECKING: from ..main import Base Model Generic Types Cache Key = Tuple[Any, Any, Tuple[Any, ...]] KT = Type Var('KT') VT = Type Var('VT')  LIMITED DICT S..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/generics.py", "score": 0.07763299933872103, "span_start": null, "span_end": null, "passage": "...ound='Generic Model') Type Var Type = Any  # since mypy doesn't allow the use of Type Var as a type Cache Key = Tuple[Type[Any], Any, Tuple[Any, ...]] Parametrization = Mapping[Type Var Type, Type[Any..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/error_wrappers.py", "score": 0.07256013316237699, "span_start": null, "span_end": null, "passage": "...er] class Validation Error(Representation, Value Error):   slots   = 'raw errors', 'model', ' error cache' def   init  (self, errors: Sequence[Error List], model: 'Model Or Dc') -> None: self.raw erro..."}, {"qid": "", "rank": 6, "path": "pydantic/v1/networks.py", "score": 0.05642581466070581, "span_start": null, "span_end": null, "passage": "... 'Cockroach Dsn', 'Amqp Dsn', 'Redis Dsn', 'Mongo Dsn', 'Kafka Dsn', 'validate email', ]  url regex cache = None  multi host url regex cache = None  ascii domain regex cache = None  int domain regex c..."}, {"qid": "", "rank": 7, "path": "tests/mypy/test_mypy.py", "score": 0.02998236421001497, "span_start": null, "span_end": null, "passage": "...OOT / 'tests/mypy/configs' / config filename test config = get test config(input path, config path) cache dir = f'.mypy cache/test-{os.path.splitext(config filename)[0]}' command = [ str(input path), ..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/tools.py", "score": 0.024806425201747244, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.023926027443931772, "span_start": null, "span_end": null, "passage": "...nerators import to camel from pydantic.errors import Pydantic User Error try: from functools import cached property, lru cache, singledispatchmethod except Import Error: cached property = None lru cac..."}, {"qid": "", "rank": 10, "path": "pydantic/config.py", "score": 0.014195258417593896, "span_start": null, "span_end": null, "passage": "...e same source file). The behavior can be different depending on the Python version used. Whether to cache strings to avoid constructing new Python objects. Defaults to True. Enabling this setting shou..."}, {"qid": "", "rank": 11, "path": "tests/test_private_attributes.py", "score": 0.012770439075959561, "span_start": null, "span_end": null, "passage": "... private attribute annotation(): class Model(Base Model): class My Model(Base Model):  a: functools.cached property  b: int assert set(My Model.  private attributes  ) == {' b'} def test none as priva..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_config.py", "score": 0.009862718786372574, "span_start": null, "span_end": null, "passage": "...str=False, regex engine='rust-regex', validation error cause=False, use attribute docstrings=False, cache strings=True, ) def prepare config(config: Config Dict | dict[str, Any] | type[Any] | None) ->..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/main.py", "score": 0.008170864948255353, "span_start": null, "span_end": null, "passage": "... rv new, name factory=lambda skip on failure and v: skip on failure and v[1].  name  , ), '  schema cache  ': {}, '  json encoder  ': staticmethod(json encoder), '  custom root type  ':  custom root t..."}, {"qid": "", "rank": 14, "path": "pydantic/fields.py", "score": 0.00659700026143716, "span_start": null, "span_end": null, "passage": "... for strings. decimal places: Maximum number of decimal places allowed for numbers. union mode: The strategy to apply when validating a union. Can be `smart` (the default), or `left to right`. See [Un..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_fields.py", "score": 0.005037085349037373, "span_start": null, "span_end": null, "passage": "...ta(**metadata: Any) -> Base Metadata: return  general metadata cls()(metadata)  # type: ignore @lru cache(maxsize=None) def  general metadata cls() -> type[Base Metadata]: def   init  (self, metadata:..."}, {"qid": "", "rank": 16, "path": "tests/test_serialize.py", "score": 0.0013549050048821797, "span_start": null, "span_end": null, "passage": "...}'), (Wrap Serializer, lambda v, nxt: f'{nxt(v + 1):,}'), ], ) def test serializer annotated typing cache(serializer, func): Fancy Int = Annotated[int, serializer(func)] class Fancy Int Model(Base Mod..."}, {"qid": "", "rank": 17, "path": "tests/test_main.py", "score": 0.0010536213608889832, "span_start": null, "span_end": null, "passage": "...def   hash  (self): return hash(id(self)) class My Sub Class(My Base Model): x: Dict[str, int] @lru cache(maxsize=None) def cached method(self): return len(self.x) my instance = My Sub Class(x={'a': 1..."}], "latency_ms": 2.536773681640625, "gold_paths": ["pydantic/fields.py", "tests/test_private_attributes.py"]}
