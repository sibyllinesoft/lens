{"qid": "lens_main_func_a002e697", "query": "Fix Python version check for `_eval_type` (#9781)", "results": [{"qid": "", "rank": 1, "path": "tests/test_version.py", "score": 0.19552244250129683, "span_start": null, "span_end": null, "passage": "from unittest.mock import patch import pytest from packaging.version import parse as parse version import pydantic from pydantic.version import version info, version short def test version info(): ver..."}, {"qid": "", "rank": 2, "path": "tests/test_typing.py", "score": 0.1276269476516207, "span_start": null, "span_end": null, "passage": "import sys import typing from collections import namedtuple from typing import Callable, Class Var, Forward Ref, Named Tuple import pytest from typing extensions import Literal, get origin from pydant..."}, {"qid": "", "rank": 3, "path": "pydantic/version.py", "score": 0.12752933193339283, "span_start": null, "span_end": null, "passage": "def version short() -> str: return '.'.join(VERSION.split('.')[:2]) def version info() -> str: It parses normal version like `0.930` and extra info followed by a `+` sign like `0.940+dev.04cac4b5d911c..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/version.py", "score": 0.12218822887299885, "span_start": null, "span_end": null, "passage": "  all   = 'compiled', 'VERSION', 'version info' VERSION = '1.10.17' try: import cython  # type: ignore except Import Error: compiled: bool = False else:  # pragma: no cover try: compiled = cython.comp..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_typing_extra.py", "score": 0.11533746296599583, "span_start": null, "span_end": null, "passage": "Literal can be used recursively (see https://www.python.org/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedt..."}, {"qid": "", "rank": 6, "path": "tests/test_docs.py", "score": 0.10427926130659113, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import os import platform import re import subprocess import sys from datetime import datetime from pathlib import Path from tempfile import Named Te..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/typing.py", "score": 0.09645978050731682, "span_start": null, "span_end": null, "passage": "... collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Dict, Forward Ref, Generator, I..."}, {"qid": "", "rank": 8, "path": "tests/check_usage_docs.py", "score": 0.08161102780563893, "span_start": null, "span_end": null, "passage": "...om pathlib import Path ROOT DIR = Path(  file  ).parent.parent PYDANTIC DIR = ROOT DIR / 'pydantic' version file = PYDANTIC DIR / 'version.py' version = re.search(rb\"VERSION = '(.*)'\", version file.re..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/generics.py", "score": 0.07543583039403015, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 10, "path": "tests/test_v1.py", "score": 0.07056479589874491, "span_start": null, "span_end": null, "passage": "from pydantic import VERSION from pydantic.v1 import VERSION as V1 VERSION from pydantic.v1 import Base Model as V1Base Model from pydantic.v1 import root validator as v1 root validator def test versi..."}, {"qid": "", "rank": 11, "path": "tests/test_types.py", "score": 0.06714963832097, "span_start": null, "span_end": null, "passage": "...or Omit, Past Date, Past Datetime, Plain Serializer, Positive Float, Positive Int, Pydantic Invalid For Json Schema, Pydantic Schema Generation Error, Secret, Secret Bytes, Secret Str, Serialize As An..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_generics.py", "score": 0.06680873617595069, "span_start": null, "span_end": null, "passage": "...manager from contextvars import Context Var from types import prepare class from typing import TYPE CHECKING, Any, Iterator, List, Mapping, Mutable Mapping, Tuple, Type Var from weakref import Weak Va..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/utils.py", "score": 0.058238861427496465, "span_start": null, "span_end": null, "passage": "... Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import ( TYPE CHECKING, Abstract Set, Any, Callable, Collection, Dict, Generator, Iterable, Iterator, List, Mappin..."}, {"qid": "", "rank": 14, "path": "tests/test_type_alias_type.py", "score": 0.0573283892389939, "span_start": null, "span_end": null, "passage": "...ias[T], Max Len(1)] def test type alias() -> None: t = Type Adapter(My List[int]) assert t.validate python(['1', '2']) == [1, 2] with pytest.raises(Validation Error) as exc info: t.validate python(['a..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/tools.py", "score": 0.05449288712271606, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 16, "path": "tests/test_type_adapter.py", "score": 0.052435977348715766, "span_start": null, "span_end": null, "passage": "...from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union import pytest from pydanti..."}, {"qid": "", "rank": 17, "path": "docs/plugins/main.py", "score": 0.05223462898874463, "span_start": null, "span_end": null, "passage": "...rt Config from mkdocs.structure.files import Files from mkdocs.structure.pages import Page from .conversion table import conversion table logger = logging.get Logger('mkdocs.plugin') THIS DIR = Path( ..."}, {"qid": "", "rank": 18, "path": "release/make_history.py", "score": 0.051270132386239994, "span_start": null, "span_end": null, "passage": "...se notes to terminal without saving to HISTORY.md') args = parser.parse args() if args.preview: new version = args.preview else: version file = root dir / 'pydantic' / 'version.py' new version = re.se..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/mypy.py", "score": 0.05109878071002376, "span_start": null, "span_end": null, "passage": "...p Node, Type Info, Type Var Expr, Var, ) from mypy.options import Options from mypy.plugin import ( Checker Plugin Interface, Class Def Context, Function Context, Method Context, Plugin, Report Config..."}, {"qid": "", "rank": 20, "path": "pydantic/type_adapter.py", "score": 0.04790574412330804, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}], "latency_ms": 4.413366317749023, "gold_paths": ["pydantic/_internal/_typing_extra.py"]}
{"qid": "lens_main_func_f024d03b", "query": "Add \"DECIMAL_CONSTRAINTS\" to allow field constraints on \"Optional[Decimal]\" (#9754)", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.32443234453007846, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core ..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/types.py", "score": 0.08542348888305171, "span_start": null, "span_end": null, "passage": "...ath import re import warnings from datetime import date from decimal import Decimal, Invalid Operation from enum import Enum from pathlib import Path from types import new class from typing import ( T..."}, {"qid": "", "rank": 3, "path": "pydantic/deprecated/class_validators.py", "score": 0.08175344035487833, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/schema.py", "score": 0.07520550393848247, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/json.py", "score": 0.07189332134886987, "span_start": null, "span_end": null, "passage": "import datetime from collections import deque from decimal import Decimal from enum import Enum from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network f..."}, {"qid": "", "rank": 6, "path": "tests/test_json.py", "score": 0.06659683457653874, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 7, "path": "pydantic/deprecated/json.py", "score": 0.06419489840146282, "span_start": null, "span_end": null, "passage": "import datetime import warnings from collections import deque from decimal import Decimal from enum import Enum from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interfac..."}, {"qid": "", "rank": 8, "path": "pydantic/fields.py", "score": 0.06253309369638574, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 9, "path": "pydantic/config.py", "score": 0.06156179219228515, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 10, "path": "pydantic/dataclasses.py", "score": 0.0585824488420721, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 11, "path": "tests/test_types.py", "score": 0.052581359632088286, "span_start": null, "span_end": null, "passage": "import collections import itertools import json import math import os import re import sys import typing import uuid from collections import Ordered Dict, defaultdict, deque from dataclasses import da..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/fields.py", "score": 0.05156233213827615, "span_start": null, "span_end": null, "passage": "import copy import re from collections import Counter as Collection Counter, defaultdict, deque from collections.abc import Callable, Hashable as Collections Hashable, Iterable as Collections Iterable..."}, {"qid": "", "rank": 13, "path": "pydantic/types.py", "score": 0.04859230990892888, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/validators.py", "score": 0.04317592211552784, "span_start": null, "span_end": null, "passage": "import math import re from collections import Ordered Dict, deque from collections.abc import Hashable as Collections Hashable from datetime import date, datetime, time, timedelta from decimal import ..."}, {"qid": "", "rank": 15, "path": "tests/test_fields.py", "score": 0.0395351530501519, "span_start": null, "span_end": null, "passage": "from typing import Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def te..."}, {"qid": "", "rank": 16, "path": "pydantic/plugin/_schema_validator.py", "score": 0.03855579911706727, "span_start": null, "span_end": null, "passage": "Returns: If plugins are installed then return `Pluggable Schema Validator`, otherwise return `Schema Validator`.   slots   = ' schema validator', 'validate json', 'validate python', 'validate strings'..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/class_validators.py", "score": 0.03739975610290507, "span_start": null, "span_end": null, "passage": "import warnings from collections import Chain Map from functools import partial, partialmethod, wraps from itertools import chain from types import Function Type from typing import TYPE CHECKING, Any,..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/config.py", "score": 0.036638811232837416, "span_start": null, "span_end": null, "passage": "import json from enum import Enum from typing import TYPE CHECKING, Any, Callable, Dict, Forward Ref, Optional, Tuple, Type, Union from typing extensions import Literal, Protocol from pydantic.v1.typi..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/errors.py", "score": 0.0362330357053223, "span_start": null, "span_end": null, "passage": "...pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING: from pydantic.v1.typing import D..."}, {"qid": "", "rank": 20, "path": "tests/test_titles.py", "score": 0.03519620428364833, "span_start": null, "span_end": null, "passage": "import re import typing from typing import Any, Callable, List import pytest import typing extensions import pydantic from pydantic import Base Model, Config Dict, Field, Type Adapter, computed field ..."}], "latency_ms": 4.851579666137695, "gold_paths": ["pydantic/_internal/_known_annotated_metadata.py", "tests/test_types.py"]}
{"qid": "lens_main_func_941c021d", "query": "Package update to prep for v2.8 (#9741)", "results": [{"qid": "", "rank": 1, "path": "tests/test_migration.py", "score": 0.17708872263264808, "span_start": null, "span_end": null, "passage": "...portlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error def import..."}, {"qid": "", "rank": 2, "path": "pydantic/config.py", "score": 0.10263040201053923, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 3, "path": "pydantic/dataclasses.py", "score": 0.09948651710446978, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.0959956053376824, "span_start": null, "span_end": null, "passage": "...om   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core im..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_config.py", "score": 0.08513124182120377, "span_start": null, "span_end": null, "passage": "...port core schema from typing extensions import ( Literal, Self, ) from ..aliases import Alias Generator from ..config import Config Dict, Extra Values, Json Dict, Json Encoder, Json Schema Extra Calla..."}, {"qid": "", "rank": 6, "path": "tests/test_exports.py", "score": 0.08180475031690165, "span_start": null, "span_end": null, "passage": "import importlib import importlib.util import json import platform import sys from pathlib import Path from types import Module Type import pytest import pydantic @pytest.mark.filterwarnings('ignore::..."}, {"qid": "", "rank": 7, "path": "pydantic/deprecated/class_validators.py", "score": 0.08067138807004677, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_typing_extra.py", "score": 0.06830588511081545, "span_start": null, "span_end": null, "passage": "... type hints lenient(obj: Any, globalns: dict[str, Any] | None = None) -> dict[str, Any]: hints = {} for base in reversed(obj.  mro  ): ann = base.  dict  .get('  annotations  ') localns = dict(vars(ba..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/utils.py", "score": 0.06292093048150656, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, ..."}, {"qid": "", "rank": 10, "path": "tests/test_warnings.py", "score": 0.061119518135604546, "span_start": null, "span_end": null, "passage": "..., 1), expected removal=(4, 0)) assert str(warning) == 'Warning message. Deprecated in Pydantic V2.1 to be removed in V4.0.' assert warning.args[0] == 'Warning message' assert warning.args[1] == 'Arbit..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.05651229783251883, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 12, "path": "pydantic/functional_serializers.py", "score": 0.055355277384499524, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 13, "path": "pydantic/fields.py", "score": 0.051910561667262406, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 14, "path": "tests/test_utils.py", "score": 0.050131724288285676, "span_start": null, "span_end": null, "passage": "...ype Var, Union import pytest from dirty equals import Is List from pydantic core import Pydantic Custom Error, Pydantic Undefined, core schema from typing extensions import Annotated, Literal from pyd..."}, {"qid": "", "rank": 15, "path": "pydantic/types.py", "score": 0.04997718918540629, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_utils.py", "score": 0.048722218272710754, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generato..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_model_construction.py", "score": 0.04702348437111169, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 18, "path": "pydantic/_migration.py", "score": 0.04567439968762001, "span_start": null, "span_end": null, "passage": "...ion info', 'pydantic.error wrappers:Validation Error': 'pydantic:Validation Error', 'pydantic.utils:to camel': 'pydantic.alias generators:to pascal', 'pydantic.utils:to lower camel': 'pydantic.alias g..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_git.py", "score": 0.04470789139934232, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 20, "path": "docs/plugins/using_update.py", "score": 0.04441470320507662, "span_start": null, "span_end": null, "passage": "from pathlib import Path from time import sleep import requests import tomli THIS DIR = Path(  file  ).parent session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'h..."}], "latency_ms": 5.981922149658203, "gold_paths": ["tests/test_networks.py", "tests/test_types.py"]}
{"qid": "lens_main_func_68a27478", "query": "Update `pydantic.v1` stub to v1.10.17 (#9707)", "results": [{"qid": "", "rank": 1, "path": "tests/test_v1.py", "score": 0.3582886262497867, "span_start": null, "span_end": null, "passage": "...as V1 VERSION from pydantic.v1 import Base Model as V1Base Model from pydantic.v1 import root validator as v1 root validator def test version(): assert V1 VERSION.startswith('1.') assert V1 VERSION !=..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/__init__.py", "score": 0.3289886776922636, "span_start": null, "span_end": null, "passage": "...types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator from pydantic.v1.config import Base Config, Config Dict, Extra..."}, {"qid": "", "rank": 3, "path": "tests/test_migration.py", "score": 0.12315978636911257, "span_start": null, "span_end": null, "passage": "...portlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error def import..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/utils.py", "score": 0.09587051144989636, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, ..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/json.py", "score": 0.08583620100651279, "span_start": null, "span_end": null, "passage": "... IPv6Interface, IPv6Network from pathlib import Path from re import Pattern from types import Generator Type from typing import Any, Callable, Dict, Type, Union from uuid import UUID from pydantic.v1...."}, {"qid": "", "rank": 6, "path": "pydantic/_migration.py", "score": 0.08291705215838213, "span_start": null, "span_end": null, "passage": "...ion info', 'pydantic.error wrappers:Validation Error': 'pydantic:Validation Error', 'pydantic.utils:to camel': 'pydantic.alias generators:to pascal', 'pydantic.utils:to lower camel': 'pydantic.alias g..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/tools.py", "score": 0.07682328147327322, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 8, "path": "pydantic/config.py", "score": 0.07319464161877685, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 9, "path": "pydantic/dataclasses.py", "score": 0.06780694235795598, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.06616148182206985, "span_start": null, "span_end": null, "passage": "...om   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core im..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/annotated_types.py", "score": 0.06604214346710803, "span_start": null, "span_end": null, "passage": "...ions.Typed Dict` instead of `typing.Typed Dict` with Python < 3.9.2. ' 'Without it, there is no way to differentiate required and optional fields when subclassed.' ) if is legacy typeddict(typeddict c..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/config.py", "score": 0.0641216651514078, "span_start": null, "span_end": null, "passage": "...Callable, Dict, Forward Ref, Optional, Tuple, Type, Union from typing extensions import Literal, Protocol from pydantic.v1.typing import Any Arg TCallable, Any Callable from pydantic.v1.utils import G..."}, {"qid": "", "rank": 13, "path": "pydantic/deprecated/class_validators.py", "score": 0.06269920295767044, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/main.py", "score": 0.06174970875000252, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/error_wrappers.py", "score": 0.05766642144294695, "span_start": null, "span_end": null, "passage": "import json from typing import TYPE CHECKING, Any, Dict, Generator, List, Optional, Sequence, Tuple, Type, Union from pydantic.v1.json import pydantic encoder from pydantic.v1.utils import Representat..."}, {"qid": "", "rank": 16, "path": "tests/test_validators.py", "score": 0.057091407123121274, "span_start": null, "span_end": null, "passage": "...rom dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools import partial, partialmethod from itertools import product from os.path import normcase from ..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/dataclasses.py", "score": 0.052980148521065175, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE..."}, {"qid": "", "rank": 18, "path": "tests/plugin/test_plugin.py", "score": 0.052888704591901065, "span_start": null, "span_end": null, "passage": "import os import pytest pytestmark = pytest.mark.skipif(not os.getenv('TEST PLUGIN'), reason='Test only with `TEST PLUGIN` env var set.') def test plugin usage(): from pydantic import Base Model class"}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.050763410222511664, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 20, "path": "pydantic/main.py", "score": 0.05070717875441118, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic custom init  : Whether the model has..."}], "latency_ms": 4.038333892822266, "gold_paths": ["pydantic/v1/error_wrappers.py", "pydantic/v1/schema.py", "pydantic/v1/version.py"]}
{"qid": "lens_main_func_c66288a6", "query": "Relax type specification for `__validators__` values in `create_model` (#9697)", "results": [{"qid": "", "rank": 1, "path": "tests/test_create_model.py", "score": 0.22621447978100243, "span_start": null, "span_end": null, "passage": "import platform import re from typing import Generic, Optional, Tuple, Type Var import pytest from typing extensions import Annotated from pydantic import ( Base Model, Config Dict, Field, Private Att..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/class_validators.py", "score": 0.1725783524097525, "span_start": null, "span_end": null, "passage": "import warnings from collections import Chain Map from functools import partial, partialmethod, wraps from itertools import chain from types import Function Type from typing import TYPE CHECKING, Any,..."}, {"qid": "", "rank": 3, "path": "pydantic/v1/generics.py", "score": 0.16391470062510535, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/main.py", "score": 0.15720163172086427, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/annotated_types.py", "score": 0.14527696456351963, "span_start": null, "span_end": null, "passage": "import sys from typing import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typ..."}, {"qid": "", "rank": 6, "path": "pydantic/v1/fields.py", "score": 0.14467299464474595, "span_start": null, "span_end": null, "passage": "...ons.abc import Callable, Hashable as Collections Hashable, Iterable as Collections Iterable from typing import ( TYPE CHECKING, Any, Counter, Default Dict, Deque, Dict, Forward Ref, Frozen Set, Genera..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/utils.py", "score": 0.13686830552834287, "span_start": null, "span_end": null, "passage": "import keyword import warnings import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Fun..."}, {"qid": "", "rank": 8, "path": "tests/test_model_validator.py", "score": 0.13635137930500554, "span_start": null, "span_end": null, "passage": "from   future   import annotations from typing import Any, Dict, cast import pytest from pydantic import Base Model, Validation Info, Validator Function Wrap Handler, model validator def test model va..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_generics.py", "score": 0.1305023400886155, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 10, "path": "pydantic/main.py", "score": 0.11965148521261201, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 11, "path": "tests/test_forward_ref.py", "score": 0.11725597947567731, "span_start": null, "span_end": null, "passage": "import dataclasses import re import sys import typing from typing import Any, Optional, Tuple import pytest from pydantic import Base Model, Pydantic User Error, Validation Error def test postponed an..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.11471879988242147, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.11471879988242147, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.11471879988242147, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.11471879988242147, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.11471879988242147, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 17, "path": "tests/mypy/modules/plugin_success.py", "score": 0.11471879988242147, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.11471879988242147, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.10974135653156897, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.10974135653156897, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}], "latency_ms": 3.4835338592529297, "gold_paths": ["pydantic/main.py"]}
{"qid": "lens_main_func_9dac6844", "query": "Bump pyright to 1.1.367 and add type checking tests for pipeline API (#9674)", "results": [{"qid": "", "rank": 1, "path": "pydantic/experimental/pipeline.py", "score": 0.15064489868150296, "span_start": null, "span_end": null, "passage": " steps: tuple[ Step, ...] def transform( self, func: Callable[[ Out T],  New Out T], ) ->  Pipeline[ In T,  New Out T]: return  Pipeline[ In T,  New Out T](self. steps + ( Transform(func),)) @overload..."}, {"qid": "", "rank": 2, "path": "pydantic/mypy.py", "score": 0.14187059441986072, "span_start": null, "span_end": null, "passage": "We might want to use this to print a warning if the mypy version being used is newer, or especially older, than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy p..."}, {"qid": "", "rank": 3, "path": "pydantic/config.py", "score": 0.10888120807937413, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 4, "path": "docs/plugins/griffe_doclinks.py", "score": 0.1038894998278787, "span_start": null, "span_end": null, "passage": "import ast import re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extens..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/mypy.py", "score": 0.09910447691589841, "span_start": null, "span_end": null, "passage": "...nfigparser import Config Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes import ( ARG NAMED..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_generics.py", "score": 0.09167350936524528, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 7, "path": "tests/test_type_adapter.py", "score": 0.08571569279568045, "span_start": null, "span_end": null, "passage": "...from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union import pytest from pydanti..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/utils.py", "score": 0.08450586854295392, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, ..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/generics.py", "score": 0.08425110643556574, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_utils.py", "score": 0.08329578049227526, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generato..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_typing_extra.py", "score": 0.07692513113523419, "span_start": null, "span_end": null, "passage": "...isinstance because it fails <3.10. if v is None: return False return v.  class   == Final.  class   and (sys.version info < (3, 8) or getattr(v, ' name', None) == 'Final') def is finalvar(ann type: An..."}, {"qid": "", "rank": 12, "path": "tests/pyright/pyright_example.py", "score": 0.07346527763066096, "span_start": null, "span_end": null, "passage": "from functools import cached property from typing import List from pydantic import Base Model, Field, computed field class My Model(Base Model): x: str y: List[int] m1 = My Model(x='hello', y=[1, 2, 3..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/typing.py", "score": 0.0730872381102215, "span_start": null, "span_end": null, "passage": "...import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Dict, Forward..."}, {"qid": "", "rank": 14, "path": "tests/test_types.py", "score": 0.0715781602971076, "span_start": null, "span_end": null, "passage": "import collections import itertools import json import math import os import re import sys import typing import uuid from collections import Ordered Dict, defaultdict, deque from dataclasses import da..."}, {"qid": "", "rank": 15, "path": "pydantic/deprecated/decorator.py", "score": 0.07099881018761248, "span_start": null, "span_end": null, "passage": "import warnings from functools import wraps from typing import TYPE CHECKING, Any, Callable, Dict, List, Mapping, Optional, Tuple, Type, Type Var, Union, overload from typing extensions import depreca..."}, {"qid": "", "rank": 16, "path": "pydantic/dataclasses.py", "score": 0.06969449821029254, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 17, "path": "tests/test_utils.py", "score": 0.06857357593624909, "span_start": null, "span_end": null, "passage": "...le import sys from copy import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest from dirty equals import Is List from pydantic core impor..."}, {"qid": "", "rank": 18, "path": "pydantic/type_adapter.py", "score": 0.06850519007682933, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 19, "path": "pydantic/types.py", "score": 0.06736451528907338, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/tools.py", "score": 0.0669062275257874, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}], "latency_ms": 5.464076995849609, "gold_paths": ["pydantic/experimental/pipeline.py", "tests/pyright/pipeline_api.py", "tests/test_pipeline.py"]}
{"qid": "lens_main_func_ff51bc0b", "query": "Update citation version automatically (#9673)", "results": [{"qid": "", "rank": 1, "path": "release/make_history.py", "score": 0.32790702899836577, "span_start": null, "span_end": null, "passage": "...se notes to terminal without saving to HISTORY.md') args = parser.parse args() if args.preview: new version = args.preview else: version file = root dir / 'pydantic' / 'version.py' new version = re.se..."}, {"qid": "", "rank": 2, "path": "tests/test_version.py", "score": 0.26818116089488353, "span_start": null, "span_end": null, "passage": "from unittest.mock import patch import pytest from packaging.version import parse as parse version import pydantic from pydantic.version import version info, version short def test version info(): ver..."}, {"qid": "", "rank": 3, "path": "pydantic/version.py", "score": 0.20414067961280316, "span_start": null, "span_end": null, "passage": "def version short() -> str: return '.'.join(VERSION.split('.')[:2]) def version info() -> str: It parses normal version like `0.930` and extra info followed by a `+` sign like `0.940+dev.04cac4b5d911c..."}, {"qid": "", "rank": 4, "path": "tests/check_usage_docs.py", "score": 0.12243500669033054, "span_start": null, "span_end": null, "passage": "...om pathlib import Path ROOT DIR = Path(  file  ).parent.parent PYDANTIC DIR = ROOT DIR / 'pydantic' version file = PYDANTIC DIR / 'version.py' version = re.search(rb\"VERSION = '(.*)'\", version file.re..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/version.py", "score": 0.1171527672774167, "span_start": null, "span_end": null, "passage": "  all   = 'compiled', 'VERSION', 'version info' VERSION = '1.10.17' try: import cython  # type: ignore except Import Error: compiled: bool = False else:  # pragma: no cover try: compiled = cython.comp..."}, {"qid": "", "rank": 6, "path": "tests/test_v1.py", "score": 0.11295554656423812, "span_start": null, "span_end": null, "passage": "from pydantic import VERSION from pydantic.v1 import VERSION as V1 VERSION from pydantic.v1 import Base Model as V1Base Model from pydantic.v1 import root validator as v1 root validator def test versi..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.06145078604999421, "span_start": null, "span_end": null, "passage": "...]] = defaultdict(set) for constraint in STR CONSTRAINTS: CONSTRAINTS TO ALLOWED SCHEMAS[constraint].update(TEXT SCHEMA TYPES) for constraint in BYTES CONSTRAINTS: CONSTRAINTS TO ALLOWED SCHEMAS[constr..."}, {"qid": "", "rank": 8, "path": "tests/mypy/test_mypy.py", "score": 0.05387040410074497, "span_start": null, "span_end": null, "passage": "...ort Any, List, Optional, Tuple, Union import pytest try: from mypy import api as mypy api from mypy.version import   version   as mypy version from pydantic.version import parse mypy version except Im..."}, {"qid": "", "rank": 9, "path": "docs/plugins/main.py", "score": 0.05304887525507882, "span_start": null, "span_end": null, "passage": "...rt Config from mkdocs.structure.files import Files from mkdocs.structure.pages import Page from .conversion table import conversion table logger = logging.get Logger('mkdocs.plugin') THIS DIR = Path( ..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_internal_dataclass.py", "score": 0.04568344569915959, "span_start": null, "span_end": null, "passage": "import sys if sys.version info >= (3, 10): slots true = {'slots': True} else: slots true = {}"}, {"qid": "", "rank": 11, "path": "pydantic/warnings.py", "score": 0.04269296966318468, "span_start": null, "span_end": null, "passage": "...nality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality will be removed. Attributes: message: Description o..."}, {"qid": "", "rank": 12, "path": "tests/test_errors.py", "score": 0.03691804215127347, "span_start": null, "span_end": null, "passage": "... import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Error) as e..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/__init__.py", "score": 0.03585069004520076, "span_start": null, "span_end": null, "passage": "...se import Protocol from pydantic.v1.tools import * from pydantic.v1.types import * from pydantic.v1.version import VERSION, compiled   version   = VERSION   all   = [ 'create model from namedtuple', '..."}, {"qid": "", "rank": 14, "path": "docs/plugins/using_update.py", "score": 0.03473918325021203, "span_start": null, "span_end": null, "passage": "...leep import requests import tomli THIS DIR = Path(  file  ).parent session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'https://api.github.com/repos/{repo}' resp = ..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/typing.py", "score": 0.03332274505412603, "span_start": null, "span_end": null, "passage": "...rt Union Type as Types Union Type  # type: ignore except Import Error: Types Union Type = () if sys.version info < (3, 9): def evaluate forwardref(type : Forward Ref, globalns: Any, localns: Any) -> A..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_utils.py", "score": 0.031238916664336314, "span_start": null, "span_end": null, "passage": "...ifier.isidentifier() and not keyword.iskeyword(identifier) Key Type = Type Var('Key Type') def deep update(mapping: dict[Key Type, Any], *updating mappings: dict[Key Type, Any]) -> dict[Key Type, Any]..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/utils.py", "score": 0.02684392284358272, "span_start": null, "span_end": null, "passage": "...iteral values, display as type, get args, get origin, is literal type, is union, ) from pydantic.v1.version import version info if TYPE CHECKING: from inspect import Signature from pathlib import Path..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/types.py", "score": 0.024281857338510307, "span_start": null, "span_end": null, "passage": "...rors from pydantic.v1.datetime parse import parse date from pydantic.v1.utils import import string, update not none from pydantic.v1.validators import ( bytes validator, constr length validator, const..."}, {"qid": "", "rank": 19, "path": "docs/plugins/griffe_doclinks.py", "score": 0.022314514548095646, "span_start": null, "span_end": null, "passage": "...end:]}' ) return f'!!! abstract \"Usage Documentation\"\\n    [{heading}](../{rel file}#{slug})\\n' def update docstring(obj: Griffe Object) -> str: return re.sub( r'usage[\\- ]docs: ?https://docs\\.pydanti..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/main.py", "score": 0.02165805462340498, "span_start": null, "span_end": null, "passage": "...rt ( Any Callable, get args, get origin, is classvar, is namedtuple, is union, resolve annotations, update model forward refs, ) from pydantic.v1.utils import ( DUNDER ATTRIBUTES, ROOT KEY, Class Attr..."}], "latency_ms": 5.021333694458008, "gold_paths": ["release/make_history.py"]}
{"qid": "lens_main_func_45813eb7", "query": "Fix type hint on `IpvAnyAddress` (#9640)", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/__init__.py", "score": 0.1059317591150924, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator..."}, {"qid": "", "rank": 2, "path": "pydantic/networks.py", "score": 0.09994193510214008, "span_start": null, "span_end": null, "passage": "Attributes: max length: The maximum length of the url. Defaults to `None`. allowed schemes: The allowed schemes. Defaults to `None`. host required: Whether the host is required. Defaults to `None`. de..."}, {"qid": "", "rank": 3, "path": "pydantic/v1/typing.py", "score": 0.09333573275970303, "span_start": null, "span_end": null, "passage": "import sys import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Di..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_utils.py", "score": 0.0696201483024452, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import keyword import typing import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy fro..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/tools.py", "score": 0.06958902162509682, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 6, "path": "pydantic/v1/generics.py", "score": 0.06775208649198823, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_generics.py", "score": 0.0670389041546115, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 8, "path": "pydantic/deprecated/decorator.py", "score": 0.05931330025005714, "span_start": null, "span_end": null, "passage": "import warnings from functools import wraps from typing import TYPE CHECKING, Any, Callable, Dict, List, Mapping, Optional, Tuple, Type, Type Var, Union, overload from typing extensions import depreca..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/networks.py", "score": 0.05807290612559383, "span_start": null, "span_end": null, "passage": "...work, IPv6Address, IPv6Interface, IPv6Network,  Base Address,  Base Network, ) from typing import ( TYPE CHECKING, Any, Collection, Dict, Generator, List, Match, Optional, Pattern, Set, Tuple, Type, U..."}, {"qid": "", "rank": 10, "path": "tests/test_annotated.py", "score": 0.056818297747568774, "span_start": null, "span_end": null, "passage": "...ys from dataclasses import dataclass from typing import Any, Callable, Generic, Iterator, List, Optional, Set, Type Var import pytest import pytz from annotated types import Base Metadata, Grouped Met..."}, {"qid": "", "rank": 11, "path": "pydantic/plugin/_schema_validator.py", "score": 0.0556672190926565, "span_start": null, "span_end": null, "passage": "...chema Validator`, otherwise return `Schema Validator`.   slots   = ' schema validator', 'validate json', 'validate python', 'validate strings' def   init  ( self, schema: Core Schema, schema type: Any..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/validators.py", "score": 0.04936339774722752, "span_start": null, "span_end": null, "passage": "import math import re from collections import Ordered Dict, deque from collections.abc import Hashable as Collections Hashable from datetime import date, datetime, time, timedelta from decimal import ..."}, {"qid": "", "rank": 13, "path": "tests/test_networks_ipaddress.py", "score": 0.04913452170111525, "span_start": null, "span_end": null, "passage": "import json from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from typing import Any, List import pytest from pydantic import Base Model, IPv Any A..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/utils.py", "score": 0.04800764354670067, "span_start": null, "span_end": null, "passage": "import keyword import warnings import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Fun..."}, {"qid": "", "rank": 15, "path": "tests/test_type_alias_type.py", "score": 0.047214882973867243, "span_start": null, "span_end": null, "passage": "import datetime from dataclasses import dataclass from typing import Dict, Generic, List, Tuple, Type Var, Union import pytest from annotated types import Max Len from typing extensions import Annotat..."}, {"qid": "", "rank": 16, "path": "tests/plugin/example_plugin.py", "score": 0.0457733495708067, "span_start": null, "span_end": null, "passage": "... = My Model(x='10') if m.x != 10: raise Value Error('m.x should be 10') log = [] class Validate Python Handler: def on enter(self, *args, **kwargs) -> None: log.append(f'on enter args={args} kwargs={k..."}, {"qid": "", "rank": 17, "path": "tests/test_plugins.py", "score": 0.04554911255474275, "span_start": null, "span_end": null, "passage": "from   future   import annotations import contextlib from functools import partial from typing import Any, Generator, List from pydantic core import Validation Error from pydantic import Base Model, T..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/annotated_types.py", "score": 0.043507990635034445, "span_start": null, "span_end": null, "passage": "import sys from typing import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typ..."}, {"qid": "", "rank": 19, "path": "pydantic/functional_validators.py", "score": 0.04286692585657465, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 20, "path": "tests/test_json_schema.py", "score": 0.04191778926319931, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}], "latency_ms": 3.014087677001953, "gold_paths": ["pydantic/networks.py"]}
{"qid": "lens_main_func_13dc7c34", "query": "Fix annotation application logic (#9623)", "results": [{"qid": "", "rank": 1, "path": "pydantic/functional_serializers.py", "score": 0.08439289965537027, "span_start": null, "span_end": null, "passage": "...nction. return type: The return type for the function. If omitted it will be inferred from the type annotation. when used: Determines when this serializer should be used. Accepts a string with values ..."}, {"qid": "", "rank": 2, "path": "tests/test_callable.py", "score": 0.06912213585812287, "span_start": null, "span_end": null, "passage": "...allable types += [Collections Callable, Collections Callable[[int], int]] @pytest.mark.parametrize('annotation', collection callable types) def test callable(annotation): class Model(Base Model): call..."}, {"qid": "", "rank": 3, "path": "pydantic/functional_validators.py", "score": 0.042630641184788626, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.04176019427006127, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core ..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_dataclasses.py", "score": 0.03374043001982446, "span_start": null, "span_end": null, "passage": "...amespace, defaults to `None`. config wrapper: The config wrapper instance, defaults to `None`. This logic is called on a class which has already been wrapped in `dataclasses.dataclass()`. This is some..."}, {"qid": "", "rank": 6, "path": "pydantic/fields.py", "score": 0.02576368548052034, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 7, "path": "tests/test_fields.py", "score": 0.023475059752260403, "span_start": null, "span_end": null, "passage": "...ield, Pydantic User Error, Root Model, Validation Error, computed field, fields def test field info annotation keyword argument(): with pytest.raises(Type Error) as e: fields.Field Info.from field(ann..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_model_construction.py", "score": 0.023348902558644045, "span_start": null, "span_end": null, "passage": "...one: * gather private attributes * check for items which look like fields but are not (e.g. have no annotation) and warn. Args: namespace: The attribute dictionary of the class to be created. ignored ..."}, {"qid": "", "rank": 9, "path": "tests/test_annotated.py", "score": 0.02107846652123069, "span_start": null, "span_end": null, "passage": "....mark.parametrize( 'hint fn,value,expected repr', [ ( lambda: Annotated[int, Gt(0)], 5, 'Field Info(annotation=int, required=False, default=5, metadata=[Gt(gt=0)])', ), ( lambda: Annotated[int, Field(..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_signature.py", "score": 0.016098293397056842, "span_start": null, "span_end": null, "passage": "from   future   import annotations import dataclasses from inspect import Parameter, Signature, signature from typing import TYPE CHECKING, Any, Callable from pydantic core import Pydantic Undefined f..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_generate_schema.py", "score": 0.014939472591499768, "span_start": null, "span_end": null, "passage": "...type backport(obj, globalns=self. types namespace) except Name Error as e: raise Pydantic Undefined Annotation.from name error(e) from e if isinstance(obj, Forward Ref): raise Pydantic Undefined Annot..."}, {"qid": "", "rank": 12, "path": "pydantic/errors.py", "score": 0.014642398670322182, "span_start": null, "span_end": null, "passage": "...ng the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str, message: str) -> None: s..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_core_metadata.py", "score": 0.014578263236261577, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import typing from typing import Any import typing extensions if typing.TYPE CHECKING: from . schema generation shared import ( Core Schema Or Field ..."}, {"qid": "", "rank": 14, "path": "tests/test_forward_ref.py", "score": 0.014560225767656285, "span_start": null, "span_end": null, "passage": "...rt pytest from pydantic import Base Model, Pydantic User Error, Validation Error def test postponed annotations(create module): module = create module( ) m = module.Model(a='123') assert m.model dump(..."}, {"qid": "", "rank": 15, "path": "docs/plugins/main.py", "score": 0.014446612278436403, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import json import logging import os import re import textwrap from pathlib import Path from textwrap import indent import autoflake import pyupgrade..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/decorator.py", "score": 0.012172761780320661, "span_start": null, "span_end": null, "passage": "...lse fields: Dict[str, Tuple[Any, Any]] = {} for i, (name, p) in enumerate(parameters.items()): if p.annotation is p.empty: annotation = Any else: annotation = type hints[name] default = ... if p.defau..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_fields.py", "score": 0.009135034049791376, "span_start": null, "span_end": null, "passage": "...o get its type hints. localns: The local namespaces. include extras: Whether to recursively include annotation metadata. Returns: The object type hints.   slots   = () def pydantic general metadata(**..."}, {"qid": "", "rank": 18, "path": "tests/test_json_schema.py", "score": 0.008704086295587379, "span_start": null, "span_end": null, "passage": "...son schema() == {'title': 'Test', 'type': 'override', 'required': ['a']} @pytest.mark.parametrize( 'annotation,kwargs,field schema', [ (int, dict(gt=0), {'title': 'A', 'exclusive Minimum': 0, 'type': ..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/mypy.py", "score": 0.007640886871756238, "span_start": null, "span_end": null, "passage": "...tmt in cls.defs.body: if not isinstance(stmt, Assignment Stmt):  # `and stmt.new syntax` to require annotation continue lhs = stmt.lvalues[0] if not isinstance(lhs, Name Expr) or not is valid field(lh..."}, {"qid": "", "rank": 20, "path": "tests/test_create_model.py", "score": 0.007529179783577552, "span_start": null, "span_end": null, "passage": "...model' @pytest.mark.parametrize('base', [Model Private Attr, object]) @pytest.mark.parametrize('use annotation', [True, False]) def test private descriptors(base, use annotation): set name calls = [] ..."}], "latency_ms": 2.565622329711914, "gold_paths": ["pydantic/_internal/_generate_schema.py", "pydantic/_internal/_known_annotated_metadata.py", "tests/test_types.py"]}
{"qid": "lens_main_func_d93a0460", "query": "Add TLD not required corrections to docs (#9620)", "results": [{"qid": "", "rank": 1, "path": "pydantic/networks.py", "score": 0.30813014498679614, "span_start": null, "span_end": null, "passage": "Attributes: max length: The maximum length of the url. Defaults to `None`. allowed schemes: The allowed schemes. Defaults to `None`. host required: Whether the host is required. Defaults to `None`. de..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/networks.py", "score": 0.09128366594466, "span_start": null, "span_end": null, "passage": "import re from ipaddress import ( IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network,  Base Address,  Base Network, ) from typing import ( TYPE CHECKING, Any, Collection,..."}, {"qid": "", "rank": 3, "path": "pydantic/dataclasses.py", "score": 0.08452665615151632, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 4, "path": "pydantic/config.py", "score": 0.07689403913190394, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 5, "path": "tests/test_docs_extraction.py", "score": 0.07590640535734411, "span_start": null, "span_end": null, "passage": "import textwrap from typing import Generic, Type Var from typing extensions import Annotated, Typed Dict from pydantic import Base Model, Config Dict, Field, Type Adapter, create model from pydantic.d..."}, {"qid": "", "rank": 6, "path": "pydantic/v1/annotated_types.py", "score": 0.064006244786968, "span_start": null, "span_end": null, "passage": "...yping import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typing import is typ..."}, {"qid": "", "rank": 7, "path": "pydantic/deprecated/class_validators.py", "score": 0.05857133267976142, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 8, "path": "tests/test_docs.py", "score": 0.05357053088578188, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import os import platform import re import subprocess import sys from datetime import datetime from pathlib import Path from tempfile import Named Te..."}, {"qid": "", "rank": 9, "path": "tests/test_types_typeddict.py", "score": 0.04749901721189321, "span_start": null, "span_end": null, "passage": "...g import Any, Dict, Generic, List, Optional, Type Var import pytest import typing extensions from annotated types import Lt from pydantic core import Core Schema, core schema from typing extensions im..."}, {"qid": "", "rank": 10, "path": "docs/plugins/griffe_doclinks.py", "score": 0.043156020188071534, "span_start": null, "span_end": null, "passage": "import ast import re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extens..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.042900607997908534, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 12, "path": "tests/test_decorators.py", "score": 0.03976348666896717, "span_start": null, "span_end": null, "passage": "import pytest from pydantic import Pydantic User Error from pydantic. internal. decorators import inspect annotated serializer, inspect validator def  two pos required args(a, b): pass def  two pos re..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_validators.py", "score": 0.038090880963825166, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import math import re import typing from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from typin..."}, {"qid": "", "rank": 14, "path": "pydantic/fields.py", "score": 0.03761602618041887, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 15, "path": "pydantic/types.py", "score": 0.03620549265856299, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_dataclasses.py", "score": 0.03223246928618997, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic decorators  : Metadata containing th..."}, {"qid": "", "rank": 17, "path": "tests/test_utils.py", "score": 0.0280848081938264, "span_start": null, "span_end": null, "passage": "...ype Var, Union import pytest from dirty equals import Is List from pydantic core import Pydantic Custom Error, Pydantic Undefined, core schema from typing extensions import Annotated, Literal from pyd..."}, {"qid": "", "rank": 18, "path": "pydantic/main.py", "score": 0.02783744038589603, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic custom init  : Whether the model has..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/mypy.py", "score": 0.02722730092132125, "span_start": null, "span_end": null, "passage": "...T, ARG POS, ARG STAR2, MDEF, Argument, Assignment Stmt, Block, Call Expr, Class Def, Context, Decorator, Ellipsis Expr, Func Base, Func Def, Json Dict, Member Expr, Name Expr, Pass Stmt, Placeholder N..."}, {"qid": "", "rank": 20, "path": "pydantic/alias_generators.py", "score": 0.02714694220307426, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}], "latency_ms": 2.7565956115722656, "gold_paths": ["pydantic/networks.py"]}
{"qid": "lens_main_func_8333bd59", "query": "Fix bug with mypy plugin's handling of covariant typevar fields (#9606)", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/test_mypy.py", "score": 0.3799163009255705, "span_start": null, "span_end": null, "passage": "...om pathlib import Path from typing import Any, List, Optional, Tuple, Union import pytest try: from mypy import api as mypy api from mypy.version import   version   as mypy version from pydantic.versi..."}, {"qid": "", "rank": 2, "path": "tests/test_plugins.py", "score": 0.17096208350429695, "span_start": null, "span_end": null, "passage": "...t schema kind == 'Base Model' return None, Custom On Validate Json(), None plugin = Custom Plugin() with install plugin(plugin): class Model(Base Model, plugin settings={'observe': 'all'}): a: int ass..."}, {"qid": "", "rank": 3, "path": "pydantic/v1/mypy.py", "score": 0.11942232560994699, "span_start": null, "span_end": null, "passage": "...from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes import ( ARG NAMED, ARG NAMED OPT, ARG OPT, ARG PO..."}, {"qid": "", "rank": 4, "path": "tests/plugin/test_plugin.py", "score": 0.10574653806068081, "span_start": null, "span_end": null, "passage": "...rt os import pytest pytestmark = pytest.mark.skipif(not os.getenv('TEST PLUGIN'), reason='Test only with `TEST PLUGIN` env var set.') def test plugin usage(): from pydantic import Base Model class My ..."}, {"qid": "", "rank": 5, "path": "pydantic/mypy.py", "score": 0.08467223438808047, "span_start": null, "span_end": null, "passage": "We might want to use this to print a warning if the mypy version being used is newer, or especially older, than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy p..."}, {"qid": "", "rank": 6, "path": "tests/plugin/example_plugin.py", "score": 0.08256862989952313, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class My Model(Base Model): x: int m = My Model(x='10') if m.x != 10: raise Value Error('m.x should be 10') log = [] class Validate Python Handler: def on enter(self, *"}, {"qid": "", "rank": 7, "path": "pydantic/main.py", "score": 0.07158854119550541, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 8, "path": "pydantic/version.py", "score": 0.0705691379423408, "span_start": null, "span_end": null, "passage": "...d by a `+` sign like `0.940+dev.04cac4b5d911c4f9529e6ce86a27b44f28846f5d.dirty`. Args: version: The mypy version string. Returns: A tuple of ints. e.g. (0, 930)."}, {"qid": "", "rank": 9, "path": "pydantic/experimental/pipeline.py", "score": 0.06276222875357709, "span_start": null, "span_end": null, "passage": ".... @overload def constrain( self:  Pipeline[ In T,  New Out T], constraint: annotated types.Multiple Of ) ->  Pipeline[ In T,  New Out T]: ... @overload def constrain( self:  Pipeline[ In T,  New Out D..."}, {"qid": "", "rank": 10, "path": "pydantic/plugin/_schema_validator.py", "score": 0.0609475321310644, "span_start": null, "span_end": null, "passage": "Returns: If plugins are installed then return `Pluggable Schema Validator`, otherwise return `Schema Validator`.   slots   = ' schema validator', 'validate json', 'validate python', 'validate strings'"}, {"qid": "", "rank": 11, "path": "tests/test_plugin_loader.py", "score": 0.06074476531673169, "span_start": null, "span_end": null, "passage": "... Dist: entry points = [] def   init  (self, entry points): self.entry points = entry points @pytest.fixture def reset plugins(): global loader initial plugins = loader. plugins loader. plugins = None ..."}, {"qid": "", "rank": 12, "path": "pydantic/root_model.py", "score": 0.05568419949296556, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 13, "path": "pydantic/plugin/_loader.py", "score": 0.05211711535119167, "span_start": null, "span_end": null, "passage": "from   future   import annotations import importlib.metadata as importlib metadata import os import warnings from typing import TYPE CHECKING, Final, Iterable if TYPE CHECKING: from . import Pydantic "}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_validate_call.py", "score": 0.0440962498148491, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import inspect from functools import partial from typing import Any, Awaitable, Callable import pydantic core from ..config import Config Dict from ."}, {"qid": "", "rank": 15, "path": "pydantic/fields.py", "score": 0.042098572355896736, "span_start": null, "span_end": null, "passage": "...ts Ge | None lt: annotated types.Supports Lt | None le: annotated types.Supports Le | None multiple of: float | None strict: bool | None min length: int | None max length: int | None pattern: str | ty..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_model_construction.py", "score": 0.03515981337686516, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/utils.py", "score": 0.034908832248192224, "span_start": null, "span_end": null, "passage": "...t Annotated from pydantic.v1.errors import Config Error from pydantic.v1.typing import ( None Type, With Args Types, all literal values, display as type, get args, get origin, is literal type, is unio..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_fields.py", "score": 0.0345402640502595, "span_start": null, "span_end": null, "passage": "...adata: Any): self.  dict   = metadata return  Pydantic General Metadata  # type: ignore def  update fields from docstrings(cls: type[Any], fields: dict[str, Field Info], config wrapper: Config Wrapper..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/main.py", "score": 0.0319329690762903, "span_start": null, "span_end": null, "passage": "...rom pydantic.v1.errors import Config Error, Dict Error, Extra Error, Missing Error from pydantic.v1.fields import ( MAPPING LIKE SHAPES, Field, Model Field, Model Private Attr, Private Attr, Undefined..."}, {"qid": "", "rank": 20, "path": "pydantic/config.py", "score": 0.030710849228065003, "span_start": null, "span_end": null, "passage": "...ype=int] arbitrary types allowed: bool 1 validation error for Model pet Input should be an instance of Pet [type=is instance of, input value='Hedwig', input type=str] from attributes: bool loc by alia..."}], "latency_ms": 2.911806106567383, "gold_paths": ["pydantic/mypy.py", "tests/mypy/modules/covariant_typevar.py", "tests/mypy/test_mypy.py"]}
{"qid": "lens_main_func_8fef5629", "query": "Add fallback default value for private fields in __setstate__ of BaseModel (#9584)", "results": [{"qid": "", "rank": 1, "path": "tests/test_private_attributes.py", "score": 0.21519577294168896, "span_start": null, "span_end": null, "passage": "import functools from typing import Class Var, Generic, Type Var import pytest from pydantic core import Pydantic Undefined from pydantic import Base Model, Config Dict, Private Attr, computed field d..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_model_construction.py", "score": 0.2085020847139727, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 3, "path": "pydantic/main.py", "score": 0.17379976986151874, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 4, "path": "pydantic/root_model.py", "score": 0.16145915701140962, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/main.py", "score": 0.15597843233597114, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b..."}, {"qid": "", "rank": 6, "path": "tests/test_create_model.py", "score": 0.14521999842214856, "span_start": null, "span_end": null, "passage": "import platform import re from typing import Generic, Optional, Tuple, Type Var import pytest from typing extensions import Annotated from pydantic import ( Base Model, Config Dict, Field, Private Att..."}, {"qid": "", "rank": 7, "path": "pydantic/fields.py", "score": 0.14438923593063602, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 8, "path": "tests/test_main.py", "score": 0.11892701753908559, "span_start": null, "span_end": null, "passage": "import json import platform import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum impo..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.10807608237963197, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 10, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.10807608237963197, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.10807608237963197, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.10807608237963197, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.10807608237963197, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.10807608237963197, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.10741880485787557, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.10741880485787557, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.10741880485787557, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.10741880485787557, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.10741880485787557, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 20, "path": "tests/mypy/modules/plugin_success.py", "score": 0.10741880485787557, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}], "latency_ms": 2.241373062133789, "gold_paths": ["pydantic/main.py"]}
{"qid": "lens_main_func_8a776e1a", "query": "Minor docs update - 2.7 note on `use_attribute_docstrings` (#9577)", "results": [{"qid": "", "rank": 1, "path": "tests/test_docs_extraction.py", "score": 0.25701589823004695, "span_start": null, "span_end": null, "passage": "import textwrap from typing import Generic, Type Var from typing extensions import Annotated, Typed Dict from pydantic import Base Model, Config Dict, Field, Type Adapter, create model from pydantic.d..."}, {"qid": "", "rank": 2, "path": "docs/extra/feedback.js", "score": 0.10090303964976012, "span_start": null, "span_end": null, "passage": "...dback = document.forms.feedback feedback.hidden = false feedback.add Event Listener(\"submit\", function(ev) { ev.prevent Default() var data = ev.submitter.get Attribute(\"data-md-value\") feedback.first ..."}, {"qid": "", "rank": 3, "path": "tests/check_usage_docs.py", "score": 0.08060516063112405, "span_start": null, "span_end": null, "passage": "...thlib import Path ROOT DIR = Path(  file  ).parent.parent PYDANTIC DIR = ROOT DIR / 'pydantic' version file = PYDANTIC DIR / 'version.py' version = re.search(rb\"VERSION = '(.*)'\", version file.read by..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.06573675291041692, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import json import logging import os import re import textwrap from pathlib import Path from textwrap import indent import autoflake import pyupgrade..."}, {"qid": "", "rank": 5, "path": "docs/plugins/griffe_doclinks.py", "score": 0.059050302768360166, "span_start": null, "span_end": null, "passage": "... from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extension from pymdownx.slugs import slugify DOCS PATH = Path(  file  ).parent.pa..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.05643084632464181, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.05411536936878844, "span_start": null, "span_end": null, "passage": "...o skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names and their corresponding docstring."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_fields.py", "score": 0.05323543990549281, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo..."}, {"qid": "", "rank": 9, "path": "tests/test_docs.py", "score": 0.05311673651087075, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import os import platform import re import subprocess import sys from datetime import datetime from pathlib import Path from tempfile import Named Te..."}, {"qid": "", "rank": 10, "path": "pydantic/plugin/_schema_validator.py", "score": 0.0415420506839168, "span_start": null, "span_end": null, "passage": "...chema Validator`, otherwise return `Schema Validator`.   slots   = ' schema validator', 'validate json', 'validate python', 'validate strings' def   init  ( self, schema: Core Schema, schema type: Any..."}, {"qid": "", "rank": 11, "path": "pydantic/deprecated/config.py", "score": 0.03773110274382752, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from typing import TYPE CHECKING, Any from typing extensions import Literal, deprecated from .. internal import  config from ..warnin..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_config.py", "score": 0.036862130440645985, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from contextlib import contextmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schem..."}, {"qid": "", "rank": 13, "path": "tests/plugin/example_plugin.py", "score": 0.03568491292747441, "span_start": null, "span_end": null, "passage": "... = My Model(x='10') if m.x != 10: raise Value Error('m.x should be 10') log = [] class Validate Python Handler: def on enter(self, *args, **kwargs) -> None: log.append(f'on enter args={args} kwargs={k..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/utils.py", "score": 0.03389544250464377, "span_start": null, "span_end": null, "passage": "import keyword import warnings import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Fun..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_validators.py", "score": 0.03381933596341075, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import math import re import typing from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from typin..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.03372155315020356, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core ..."}, {"qid": "", "rank": 17, "path": "tests/test_deprecated.py", "score": 0.03371965511530066, "span_start": null, "span_end": null, "passage": "...ble, List, Type import pytest from pydantic core import Core Schema, core schema from typing extensions import Literal from pydantic import ( Base Model, Config Dict, Field, Get Core Schema Handler, G..."}, {"qid": "", "rank": 18, "path": "pydantic/main.py", "score": 0.03189005893448059, "span_start": null, "span_end": null, "passage": "...base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signatur..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_model_construction.py", "score": 0.029701223829341945, "span_start": null, "span_end": null, "passage": "...ss to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be created.   pydantic generic metadata  : Metadata for generic models.   pyda..."}, {"qid": "", "rank": 20, "path": "pydantic/type_adapter.py", "score": 0.029451615300240527, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}], "latency_ms": 3.410816192626953, "gold_paths": ["pydantic/config.py"]}
{"qid": "lens_main_func_8a896c51", "query": "Fix typing of `TypeAdapter` (#9570)", "results": [{"qid": "", "rank": 1, "path": "pydantic/deprecated/tools.py", "score": 0.23378071543658568, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 2, "path": "pydantic/type_adapter.py", "score": 0.17478609461104622, "span_start": null, "span_end": null, "passage": "... function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typing.py`) is not useful. So instead we look at the globals in our parent stack frame. This works f..."}, {"qid": "", "rank": 3, "path": "tests/test_type_adapter.py", "score": 0.1704239551626217, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp..."}, {"qid": "", "rank": 4, "path": "tests/test_type_alias_type.py", "score": 0.12964482825255255, "span_start": null, "span_end": null, "passage": "import datetime from dataclasses import dataclass from typing import Dict, Generic, List, Tuple, Type Var, Union import pytest from annotated types import Max Len from typing extensions import Annotat..."}, {"qid": "", "rank": 5, "path": "tests/benchmarks/test_north_star.py", "score": 0.11969343413644223, "span_start": null, "span_end": null, "passage": "...from datetime import date, datetime, time from decimal import Decimal from pathlib import Path from typing import List, Union from uuid import UUID import pytest from typing extensions import Annotate..."}, {"qid": "", "rank": 6, "path": "tests/benchmarks/test_discriminated_unions.py", "score": 0.11196684920518275, "span_start": null, "span_end": null, "passage": "from   future   import annotations from typing import Literal, Union import pytest from typing extensions import Annotated from pydantic import Base Model, Field, Type Adapter class Nested State(Base ..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/tools.py", "score": 0.09710931812486003, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/generics.py", "score": 0.09150146719818994, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/typing.py", "score": 0.08846955893462119, "span_start": null, "span_end": null, "passage": "import sys import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Di..."}, {"qid": "", "rank": 10, "path": "tests/test_json_schema.py", "score": 0.08839811947809789, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_utils.py", "score": 0.08655958573567818, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import keyword import typing import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy fro..."}, {"qid": "", "rank": 12, "path": "tests/test_pipeline.py", "score": 0.08616190087563978, "span_start": null, "span_end": null, "passage": "ta = Type Adapter[int](Annotated[int, transform(lambda x: x + 1)]) assert ta.validate python('1') == 2 def test not eq() -> None: ta = Type Adapter[int](Annotated[str, validate as(str).not eq('potato'"}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_generics.py", "score": 0.08537498957269833, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 14, "path": "tests/test_annotated.py", "score": 0.0770656899779822, "span_start": null, "span_end": null, "passage": "import datetime as dt import sys from dataclasses import dataclass from typing import Any, Callable, Generic, Iterator, List, Optional, Set, Type Var import pytest import pytz from annotated types imp..."}, {"qid": "", "rank": 15, "path": "tests/test_types_typeddict.py", "score": 0.07006289522596769, "span_start": null, "span_end": null, "passage": "import sys import typing from typing import Any, Dict, Generic, List, Optional, Type Var import pytest import typing extensions from annotated types import Lt from pydantic core import Core Schema, co..."}, {"qid": "", "rank": 16, "path": "tests/test_types_namedtuple.py", "score": 0.06903580808449972, "span_start": null, "span_end": null, "passage": "from collections import namedtuple from typing import Generic, Named Tuple, Optional, Tuple, Type Var import pytest from typing extensions import Named Tuple as Typing Extensions Named Tuple from pyda..."}, {"qid": "", "rank": 17, "path": "pydantic/config.py", "score": 0.06889904703490442, "span_start": null, "span_end": null, "passage": "...ype=int] arbitrary types allowed: bool 1 validation error for Model pet Input should be an instance of Pet [type=is instance of, input value='Hedwig', input type=str] from attributes: bool loc by alia..."}, {"qid": "", "rank": 18, "path": "pydantic/root_model.py", "score": 0.06705099132297021, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 19, "path": "tests/test_config.py", "score": 0.06591786269551325, "span_start": null, "span_end": null, "passage": "...import nullcontext as does not raise from decimal import Decimal from inspect import signature from typing import Any, Context Manager, Dict, Iterable, Named Tuple, Optional, Tuple, Type, Union from d..."}, {"qid": "", "rank": 20, "path": "tests/test_typing.py", "score": 0.06466478867418438, "span_start": null, "span_end": null, "passage": "import sys import typing from collections import namedtuple from typing import Callable, Class Var, Forward Ref, Named Tuple import pytest from typing extensions import Literal, get origin from pydant..."}], "latency_ms": 6.4487457275390625, "gold_paths": ["pydantic/type_adapter.py"]}
{"qid": "lens_main_func_137d4d83", "query": "Minor refactors for new tests and docs (#9564)", "results": [{"qid": "", "rank": 1, "path": "tests/check_usage_docs.py", "score": 0.12480665629937236, "span_start": null, "span_end": null, "passage": "...ion.py' version = re.search(rb\"VERSION = '(.*)'\", version file.read bytes()).group(1) version major minor = b'.'.join(version.split(b'.')[:2]) expected base = b'https://docs.pydantic.dev/' + version m..."}, {"qid": "", "rank": 2, "path": "docs/plugins/main.py", "score": 0.1072840207733071, "span_start": null, "span_end": null, "passage": "...de main  # type: ignore import tomli import yaml from jinja2 import Template  # type: ignore from mkdocs.config import Config from mkdocs.structure.files import Files from mkdocs.structure.pages impor..."}, {"qid": "", "rank": 3, "path": "tests/test_docs_extraction.py", "score": 0.09290237145673576, "span_start": null, "span_end": null, "passage": "...t dataclass as pydantic dataclass T = Type Var('T') def dec noop(obj): return obj def test model no docs extraction(): class My Model(Base Model): a: int = 1 assert My Model.model fields['a'].descript..."}, {"qid": "", "rank": 4, "path": "tests/test_docs.py", "score": 0.0851281257874519, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import os import platform import re import subprocess import sys from datetime import datetime from pathlib import Path from tempfile import Named Te..."}, {"qid": "", "rank": 5, "path": "release/make_history.py", "score": 0.0660582836919518, "span_start": null, "span_end": null, "passage": "...elease notes to terminal without saving to HISTORY.md') args = parser.parse args() if args.preview: new version = args.preview else: version file = root dir / 'pydantic' / 'version.py' new version = r..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_typing_extra.py", "score": 0.06425180294773544, "span_start": null, "span_end": null, "passage": "...isinstance because it fails <3.10. if v is None: return False return v.  class   == Final.  class   and (sys.version info < (3, 8) or getattr(v, ' name', None) == 'Final') def is finalvar(ann type: An..."}, {"qid": "", "rank": 7, "path": "pydantic/experimental/pipeline.py", "score": 0.06395292439793397, "span_start": null, "span_end": null, "passage": " steps: tuple[ Step, ...] def transform( self, func: Callable[[ Out T],  New Out T], ) ->  Pipeline[ In T,  New Out T]: return  Pipeline[ In T,  New Out T](self. steps + ( Transform(func),)) @overload..."}, {"qid": "", "rank": 8, "path": "pydantic/config.py", "score": 0.06232132515824065, "span_start": null, "span_end": null, "passage": "...], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] f..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/main.py", "score": 0.05614459223523706, "span_start": null, "span_end": null, "passage": "...ype, Type Var, Union, cast, no type check, overload, ) from typing extensions import dataclass transform from pydantic.v1.class validators import Validator Group, extract root validators, extract vali..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_default_factory.py", "score": 0.056022125973854205, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_default_factory.py", "score": 0.056022125973854205, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d..."}, {"qid": "", "rank": 12, "path": "tests/mypy/modules/plugin_default_factory.py", "score": 0.056022125973854205, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/utils.py", "score": 0.05361891725892744, "span_start": null, "span_end": null, "passage": "...ass Attribute', 'path type', 'ROOT KEY', 'get unique discriminator alias', 'get discriminator alias and values', 'DUNDER ATTRIBUTES', ) ROOT KEY = '  root  ' IMMUTABLE NON COLLECTIONS TYPES: Set[Type[..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/generics.py", "score": 0.050323684487949244, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.04680174840494719, "span_start": null, "span_end": null, "passage": "...as Griffe Object from griffe.extensions import Visitor Extension from pymdownx.slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content:..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_validators.py", "score": 0.04630920168549134, "span_start": null, "span_end": null, "passage": "...ce validator( input value: typing.Sequence[Any], /, validator: core schema.Validator Function Wrap Handler, ) -> typing.Sequence[Any]: (This is necessary to distinguish between a submodule and an attr..."}, {"qid": "", "rank": 17, "path": "pydantic/type_adapter.py", "score": 0.04274683509112934, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 18, "path": "pydantic/fields.py", "score": 0.0414703922732148, "span_start": null, "span_end": null, "passage": "...t: bool | None class  Field Info Inputs( From Field Info Inputs, total=False): `Field Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is ex..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_fields.py", "score": 0.040550709251630665, "span_start": null, "span_end": null, "passage": "... self.  dict   = metadata return  Pydantic General Metadata  # type: ignore def  update fields from docstrings(cls: type[Any], fields: dict[str, Field Info], config wrapper: Config Wrapper) -> None: i..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.040415877832460985, "span_start": null, "span_end": null, "passage": "...s of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names and their corres..."}], "latency_ms": 4.313945770263672, "gold_paths": ["tests/test_annotated.py", "tests/test_examples.py", "tests/test_utils.py"]}
{"qid": "lens_main_func_f48d03e1", "query": "Add testing coverage for pretty_print (#9469)", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/modules/strict_equality.py", "score": 0.09723214827157814, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.09723214827157814, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "pydantic/config.py", "score": 0.07141038140710529, "span_start": null, "span_end": null, "passage": "...], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] f..."}, {"qid": "", "rank": 4, "path": "pydantic/networks.py", "score": 0.07001965551156313, "span_start": null, "span_end": null, "passage": "...rt`: optional port (`8000`). - `path`: optional path (`/the/path/`). - `query`: optional URL query (for example, `GET` arguments or \"search string\", such as `query=here`). - `fragment`: optional fragm..."}, {"qid": "", "rank": 5, "path": "pydantic/types.py", "score": 0.04579559027938939, "span_start": null, "span_end": null, "passage": "....pydantic.dev/2/v/greater than equal', } ] Strict Int = Annotated[int, Strict()] 1 validation error for Strict Int Model strict int Input should be a valid integer [type=int type, input value=3.14159,..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_serializers.py", "score": 0.04355023416720141, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 7, "path": "docs/plugins/using_update.py", "score": 0.03669240895391262, "span_start": null, "span_end": null, "passage": "... < 3: print(f'retrying {repo} {retry}') sleep(5) return update lib(lib, retry=retry + 1) resp.raise for status() data = resp.json() stars = data['watchers count'] print(f'{repo}: {stars}') lib['stars'..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_typing_extra.py", "score": 0.03632820897736395, "span_start": null, "span_end": null, "passage": "... = sys. getframe(parent depth) if frame.f back is None: return None else: return frame.f locals def add module globals(obj: Any, globalns: dict[str, Any] | None = None) -> dict[str, Any]: module name ..."}, {"qid": "", "rank": 9, "path": "pydantic/functional_validators.py", "score": 0.036043144974121935, "span_start": null, "span_end": null, "passage": "...print(e.json(indent=2)) ``` A metadata class that indicates that a validation should be applied **before** the inner validation logic. Attributes: func: The validator function. Example: ```py from typ..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail2.py", "score": 0.03570602009875122, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail2.py", "score": 0.03570602009875122, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/fail2.py", "score": 0.03570602009875122, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/fail2.py", "score": 0.03570602009875122, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 14, "path": "tests/mypy/modules/fail2.py", "score": 0.03570602009875122, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona"}, {"qid": "", "rank": 15, "path": "pydantic/v1/utils.py", "score": 0.03349806132073402, "span_start": null, "span_end": null, "passage": "...or Type, deque)) def validate field name(bases: List[Type['Base Model']], field name: str) -> None: for base in bases: if getattr(base, field name, None): raise Name Error( f'Field name \"{field name}\"..."}, {"qid": "", "rank": 16, "path": "release/make_history.py", "score": 0.03321118251191882, "span_start": null, "span_end": null, "passage": "...ests def main(): root dir = Path(  file  ).parent.parent parser = argparse.Argument Parser() parser.add argument('--preview', help='print preview of release notes to terminal without saving to HISTORY..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.033089510693750386, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 18, "path": "tests/test_fastapi_json_schema.py", "score": 0.03149303306804482, "span_start": null, "span_end": null, "passage": "...ntic. internal. core utils import Core Schema Or Field from pydantic.errors import Pydantic Invalid For Json Schema from pydantic.json schema import Generate Json Schema, Json Schema Value class  Erro..."}, {"qid": "", "rank": 19, "path": "tests/test_utils.py", "score": 0.029749330246393365, "span_start": null, "span_end": null, "passage": "...lf) -> T: ... @pytest.mark.parametrize( 'value,expected', [ (str, 'str'), ('foobar', 'str'), ('Some Forward Ref String', 'str'),  # included to document current behavior; could be changed (List['Some ..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_repr.py", "score": 0.02823927344030716, "span_start": null, "span_end": null, "passage": "...repr str  (self, join str: str) -> str: return join str.join(repr(v) if a is None else f'{a}={v!r}' for a, v in self.  repr args  ()) def   pretty  (self, fmt: typing.Callable[[Any], Any], **kwargs: A..."}], "latency_ms": 2.9244422912597656, "gold_paths": ["tests/test_utils.py"]}
{"qid": "lens_main_func_fc87631f", "query": "Updates type signature for Field() constructor (#9484)", "results": [{"qid": "", "rank": 1, "path": "tests/test_model_signature.py", "score": 0.10102493233510976, "span_start": null, "span_end": null, "passage": "import sys from inspect import Parameter, Signature, signature from typing import Any, Generic, Iterable, Optional, Type Var, Union import pytest from typing extensions import Annotated from pydantic ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_signature.py", "score": 0.08609477014121152, "span_start": null, "span_end": null, "passage": "from   future   import annotations import dataclasses from inspect import Parameter, Signature, signature from typing import TYPE CHECKING, Any, Callable from pydantic core import Pydantic Undefined f..."}, {"qid": "", "rank": 3, "path": "pydantic/v1/utils.py", "score": 0.07685044693396437, "span_start": null, "span_end": null, "passage": "...d Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Ty..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/class_validators.py", "score": 0.07522783984135281, "span_start": null, "span_end": null, "passage": "...port Chain Map from functools import partial, partialmethod, wraps from itertools import chain from types import Function Type from typing import TYPE CHECKING, Any, Callable, Dict, Iterable, List, Op..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_decorators.py", "score": 0.07336641481932663, "span_start": null, "span_end": null, "passage": "...ple of field names the validator should be called on. mode: The proposed validator mode. each item: For complex objects (sets, lists etc.) whether to validate individual elements rather than the whole..."}, {"qid": "", "rank": 6, "path": "tests/test_dataclasses.py", "score": 0.07085094483704954, "span_start": null, "span_end": null, "passage": "...t Path from typing import Any, Callable, Class Var, Dict, Frozen Set, Generic, List, Optional, Set, Type Var, Union import pytest from dirty equals import Has Repr from pydantic core import Args Kwarg..."}, {"qid": "", "rank": 7, "path": "pydantic/fields.py", "score": 0.07001414566205559, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/annotated_types.py", "score": 0.06877320852800722, "span_start": null, "span_end": null, "passage": "import sys from typing import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typ..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/schema.py", "score": 0.06855406491694273, "span_start": null, "span_end": null, "passage": "... IPv4Network, IPv6Address, IPv6Interface, IPv6Network from pathlib import Path from typing import ( TYPE CHECKING, Any, Callable, Dict, Forward Ref, Frozen Set, Generic, Iterable, List, Optional, Patt..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.06389736980238969, "span_start": null, "span_end": null, "passage": "...Network from operator import attrgetter from typing import Any, Callable, Iterable, Literal, Tuple, Type Var import typing extensions from pydantic core import ( Core Schema, Multi Host Url, Pydantic ..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/typing.py", "score": 0.062483419842736414, "span_start": null, "span_end": null, "passage": "...import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Dict, Forward..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/generics.py", "score": 0.06209353880547275, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_generics.py", "score": 0.05832534543829556, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/mypy.py", "score": 0.058137536284743635, "span_start": null, "span_end": null, "passage": "...nfigparser import Config Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes import ( ARG NAMED..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_fields.py", "score": 0.05718771569174827, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo..."}, {"qid": "", "rank": 16, "path": "pydantic/mypy.py", "score": 0.055039372637819696, "span_start": null, "span_end": null, "passage": "... than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy plugin type. def   init  (self, options: Options) -> None: self.plugin config = Pydantic Plugin Config(opti..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/tools.py", "score": 0.052307774106517, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/fields.py", "score": 0.05106843132078636, "span_start": null, "span_end": null, "passage": "...t Callable, Hashable as Collections Hashable, Iterable as Collections Iterable from typing import ( TYPE CHECKING, Any, Counter, Default Dict, Deque, Dict, Forward Ref, Frozen Set, Generator, Iterable..."}, {"qid": "", "rank": 19, "path": "tests/test_titles.py", "score": 0.04991470298759922, "span_start": null, "span_end": null, "passage": "...ytest import typing extensions import pydantic from pydantic import Base Model, Config Dict, Field, Type Adapter, computed field from pydantic.fields import Field Info from pydantic.json schema import..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_model_construction.py", "score": 0.04990229009600948, "span_start": null, "span_end": null, "passage": "...space: The attribute dictionary of the class to be created.   pydantic generic metadata  : Metadata for generic models.   pydantic reset parent namespace  : Reset parent namespace.  create model modul..."}], "latency_ms": 3.958463668823242, "gold_paths": ["pydantic/fields.py"]}
{"qid": "lens_main_func_e874535a", "query": "Fixed type hint of validation context (#9508)", "results": [{"qid": "", "rank": 1, "path": "pydantic/type_adapter.py", "score": 0.13079125635838443, "span_start": null, "span_end": null, "passage": "...s in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typing.py`) is not useful. So instead we look at the globa..."}, {"qid": "", "rank": 2, "path": "pydantic/v1/mypy.py", "score": 0.12211676415867619, "span_start": null, "span_end": null, "passage": "...nfigparser import Config Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes import ( ARG NAMED..."}, {"qid": "", "rank": 3, "path": "pydantic/plugin/__init__.py", "score": 0.10814214763562041, "span_start": null, "span_end": null, "passage": "...s from typing import Any, Callable, Named Tuple from pydantic core import Core Config, Core Schema, Validation Error from typing extensions import Literal, Protocol, Type Alias   all   = ( 'Pydantic P..."}, {"qid": "", "rank": 4, "path": "pydantic/mypy.py", "score": 0.10591514994942083, "span_start": null, "span_end": null, "passage": "... than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy plugin type. def   init  (self, options: Options) -> None: self.plugin config = Pydantic Plugin Config(opti..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/tools.py", "score": 0.09599642450135334, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_generics.py", "score": 0.09566235703880077, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 7, "path": "tests/test_annotated.py", "score": 0.09563175734689326, "span_start": null, "span_end": null, "passage": "...aclasses import dataclass from typing import Any, Callable, Generic, Iterator, List, Optional, Set, Type Var import pytest import pytz from annotated types import Base Metadata, Grouped Metadata, Gt, ..."}, {"qid": "", "rank": 8, "path": "tests/test_type_alias_type.py", "score": 0.09489624960730661, "span_start": null, "span_end": null, "passage": "import datetime from dataclasses import dataclass from typing import Dict, Generic, List, Tuple, Type Var, Union import pytest from annotated types import Max Len from typing extensions import Annotat..."}, {"qid": "", "rank": 9, "path": "pydantic/functional_validators.py", "score": 0.09424892083683505, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/generics.py", "score": 0.09092270453934523, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 11, "path": "pydantic/main.py", "score": 0.08731358318802995, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/typing.py", "score": 0.08367649294331925, "span_start": null, "span_end": null, "passage": "...import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Dict, Forward..."}, {"qid": "", "rank": 13, "path": "pydantic/config.py", "score": 0.08257961174303098, "span_start": null, "span_end": null, "passage": "...mputed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, ..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_utils.py", "score": 0.08043508546493108, "span_start": null, "span_end": null, "passage": "...t Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Ty..."}, {"qid": "", "rank": 15, "path": "pydantic/types.py", "score": 0.08022501879131948, "span_start": null, "span_end": null, "passage": "... the field in strict mode. Example: ```python from typing extensions import Annotated from pydantic.types import Strict Strict Bool = Annotated[bool, Strict()] ``` def conint( *, strict: bool | None =..."}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/tools.py", "score": 0.07690483080261698, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 17, "path": "pydantic/root_model.py", "score": 0.07536327105731284, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 18, "path": "tests/test_type_adapter.py", "score": 0.07417806985917683, "span_start": null, "span_end": null, "passage": "...e, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union import pytest from pydantic core import Validation Error from typing extensions impo..."}, {"qid": "", "rank": 19, "path": "pydantic/fields.py", "score": 0.07286083421293411, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 20, "path": "tests/test_types.py", "score": 0.07283542931015544, "span_start": null, "span_end": null, "passage": "... typing import ( Any, Callable, Counter, Default Dict, Deque, Dict, Frozen Set, Iterable, List, New Type, Optional, Pattern, Sequence, Set, Tuple, Type Var, Union, ) from uuid import UUID import annot..."}], "latency_ms": 4.002094268798828, "gold_paths": ["pydantic/main.py"]}
{"qid": "lens_main_func_52599452", "query": "Implement deprecated field in json schema (#9298)", "results": [{"qid": "", "rank": 1, "path": "tests/test_fastapi_json_schema.py", "score": 0.31607725357750815, "span_start": null, "span_end": null, "passage": "from   future   import annotations from dataclasses import dataclass from typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pyd..."}, {"qid": "", "rank": 2, "path": "tests/test_json_schema.py", "score": 0.3053347531922149, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 3, "path": "pydantic/annotated_handlers.py", "score": 0.3024422312235287, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w..."}, {"qid": "", "rank": 4, "path": "pydantic/json_schema.py", "score": 0.2932743467934159, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import inspect import math import re import warnings from collections import defaultdict from copy import deepcopy from dataclasse..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.2601939749703241, "span_start": null, "span_end": null, "passage": "... as  annotations import collections import collections.abc import dataclasses import decimal import inspect import os import typing from enum import Enum from functools import partial from ipaddress i..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.25542419426136354, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 7, "path": "pydantic/deprecated/tools.py", "score": 0.24116232931845205, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_generate_schema.py", "score": 0.2212134164997069, "span_start": null, "span_end": null, "passage": "Args: info: The field info. field: The field name to check. Returns: `True` if field name is in validator fields, `False` otherwise. It ignores the check for a decorator if the decorator has `*` as fi..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_core_utils.py", "score": 0.21324907011965288, "span_start": null, "span_end": null, "passage": "from   future   import annotations import os from collections import defaultdict from typing import ( Any, Callable, Hashable, Type Var, Union, ) from pydantic core import Core Schema, core schema fro..."}, {"qid": "", "rank": 10, "path": "tests/test_deprecated_fields.py", "score": 0.20076702769492472, "span_start": null, "span_end": null, "passage": "import importlib.metadata import pytest from packaging.version import Version from typing extensions import Annotated, Self, deprecated from pydantic import Base Model, Field, computed field, field va..."}, {"qid": "", "rank": 11, "path": "tests/test_deprecated.py", "score": 0.16542256655554383, "span_start": null, "span_end": null, "passage": "...datetime import date, timedelta from pathlib import Path from types import Simple Namespace from typing import Any, Dict, Iterable, List, Type import pytest from pydantic core import Core Schema, core..."}, {"qid": "", "rank": 12, "path": "pydantic/types.py", "score": 0.16454763614283274, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 13, "path": "pydantic/type_adapter.py", "score": 0.15402061344248968, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 14, "path": "tests/test_parse.py", "score": 0.14801303896490287, "span_start": null, "span_end": null, "passage": "from typing import List, Tuple import pytest from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydant..."}, {"qid": "", "rank": 15, "path": "pydantic/fields.py", "score": 0.14614805442947854, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/schema.py", "score": 0.1457461633071706, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu..."}, {"qid": "", "rank": 17, "path": "tests/test_json.py", "score": 0.14066102372025757, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_config.py", "score": 0.1351329420384281, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from contextlib import contextmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schem..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_core_metadata.py", "score": 0.11036455109268173, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import typing from typing import Any import typing extensions if typing.TYPE CHECKING: from . schema generation shared import ( Core Schema Or Field ..."}, {"qid": "", "rank": 20, "path": "pydantic/deprecated/parse.py", "score": 0.10602157873895972, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import pickle import warnings from enum import Enum from pathlib import Path from typing import TYPE CHECKING, Any, Callable from typing extensions impor..."}], "latency_ms": 4.425048828125, "gold_paths": ["pydantic/json_schema.py", "tests/test_json_schema.py"]}
{"qid": "lens_main_func_c4885087", "query": "Fix a bug when setting StringConstraint(strict=False) (#9476)", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.21399222051782688, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core ..."}, {"qid": "", "rank": 2, "path": "tests/test_strict.py", "score": 0.12539047630771058, "span_start": null, "span_end": null, "passage": "import sys from typing import Any, Type if sys.version info < (3, 9): from typing extensions import Annotated else: from typing import Annotated import pytest from pydantic import Base Model, Config D..."}, {"qid": "", "rank": 3, "path": "pydantic/experimental/pipeline.py", "score": 0.11122206713594533, "span_start": null, "span_end": null, "passage": " steps: tuple[ Step, ...] def transform( self, func: Callable[[ Out T],  New Out T], ) ->  Pipeline[ In T,  New Out T]: return  Pipeline[ In T,  New Out T](self. steps + ( Transform(func),)) @overload..."}, {"qid": "", "rank": 4, "path": "pydantic/alias_generators.py", "score": 0.08259992593029303, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 5, "path": "pydantic/config.py", "score": 0.06933837001481277, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 6, "path": "tests/test_types.py", "score": 0.06763521938789982, "span_start": null, "span_end": null, "passage": "import collections import itertools import json import math import os import re import sys import typing import uuid from collections import Ordered Dict, defaultdict, deque from dataclasses import da..."}, {"qid": "", "rank": 7, "path": "tests/test_main.py", "score": 0.06492453588248283, "span_start": null, "span_end": null, "passage": "import json import platform import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum impo..."}, {"qid": "", "rank": 8, "path": "tests/test_type_adapter.py", "score": 0.06319840207844327, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp..."}, {"qid": "", "rank": 9, "path": "pydantic/functional_serializers.py", "score": 0.05883417788365364, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 10, "path": "pydantic/types.py", "score": 0.05851809517683519, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 11, "path": "pydantic/aliases.py", "score": 0.057679987174693095, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/success.py", "score": 0.05702202261941093, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro..."}, {"qid": "", "rank": 13, "path": "tests/mypy/modules/success.py", "score": 0.05702202261941093, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/success.py", "score": 0.05702202261941093, "span_start": null, "span_end": null, "passage": "import os from datetime import date, datetime, timedelta, timezone from pathlib import Path, Pure Path from typing import Any, Class Var, Dict, Forward Ref, Generic, List, Optional, Type, Type Var fro..."}, {"qid": "", "rank": 15, "path": "tests/test_assert_in_validators.py", "score": 0.05523503384224247, "span_start": null, "span_end": null, "passage": "import difflib import pprint import pytest from dirty equals import Has Repr from pydantic import Base Model, Validation Error, field validator def  pformat lines(obj): return pprint.pformat(obj).spli..."}, {"qid": "", "rank": 16, "path": "pydantic/type_adapter.py", "score": 0.052406138959851106, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 17, "path": "pydantic/warnings.py", "score": 0.04659301352695039, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 18, "path": "tests/test_validators_dataclass.py", "score": 0.04648322851926922, "span_start": null, "span_end": null, "passage": "from dataclasses import asdict, is dataclass from typing import Any, List import pytest from dirty equals import Has Repr from pydantic import Validation Error, field validator, model validator from p..."}, {"qid": "", "rank": 19, "path": "tests/test_dataclasses.py", "score": 0.04623644105985398, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 20, "path": "tests/test_edge_cases.py", "score": 0.04589944963650571, "span_start": null, "span_end": null, "passage": "import functools import importlib.util import re import sys from abc import ABC, abstractmethod from collections.abc import Hashable from decimal import Decimal from enum import Enum, auto from typing..."}], "latency_ms": 7.529497146606445, "gold_paths": ["pydantic/types.py", "tests/test_types.py"]}
{"qid": "lens_main_func_d1f650a3", "query": "\ud83d\udcd6 docs: Update docs for `NewPath` (#9462)", "results": [{"qid": "", "rank": 1, "path": "docs/plugins/griffe_doclinks.py", "score": 0.15681182050380627, "span_start": null, "span_end": null, "passage": "...as Griffe Object from griffe.extensions import Visitor Extension from pymdownx.slugs import slugify DOCS PATH = Path(  file  ).parent.parent slugifier = slugify(case='lower') def find heading(content:..."}, {"qid": "", "rank": 2, "path": "tests/test_docs_extraction.py", "score": 0.1498769707841483, "span_start": null, "span_end": null, "passage": "...t dataclass as pydantic dataclass T = Type Var('T') def dec noop(obj): return obj def test model no docs extraction(): class My Model(Base Model): a: int = 1 assert My Model.model fields['a'].descript..."}, {"qid": "", "rank": 3, "path": "tests/test_docs.py", "score": 0.11910111329483355, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import os import platform import re import subprocess import sys from datetime import datetime from pathlib import Path from tempfile import Named Te..."}, {"qid": "", "rank": 4, "path": "tests/check_usage_docs.py", "score": 0.10911808538611562, "span_start": null, "span_end": null, "passage": "...ytes()).group(1) version major minor = b'.'.join(version.split(b'.')[:2]) expected base = b'https://docs.pydantic.dev/' + version major minor + b'/' paths = sys.argv[1:] error count = 0 for path str i..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_validators.py", "score": 0.08482176460891672, "span_start": null, "span_end": null, "passage": "...alid module, importing as an attribute rather than a submodule will be attempted automatically. So, for example, the following values of `dotted path` result in the following returned values: * 'colle..."}, {"qid": "", "rank": 6, "path": "release/make_history.py", "score": 0.08045136598183289, "span_start": null, "span_end": null, "passage": "...sed: ).*', date today str, citation text) citation path.write text(citation text) print( f'SUCCESS: updated version=v{new version} and date-released={date today str} in {citation path.relative to(root..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.05698751853203576, "span_start": null, "span_end": null, "passage": "...e', 'timedelta', 'datetime') CONSTRAINTS TO ALLOWED SCHEMAS: dict[str, set[str]] = defaultdict(set) for constraint in STR CONSTRAINTS: CONSTRAINTS TO ALLOWED SCHEMAS[constraint].update(TEXT SCHEMA TYP..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/utils.py", "score": 0.05625153851256681, "span_start": null, "span_end": null, "passage": "...field name', 'lenient isinstance', 'lenient issubclass', 'in ipython', 'is valid identifier', 'deep update', 'update not none', 'almost equal floats', 'get model', 'to camel', 'is valid field', 'smart..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_git.py", "score": 0.04945957456137192, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 10, "path": "docs/plugins/using_update.py", "score": 0.04677611054371395, "span_start": null, "span_end": null, "passage": "...leep import requests import tomli THIS DIR = Path(  file  ).parent session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'https://api.github.com/repos/{repo}' resp = ..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_default_factory.py", "score": 0.045189516727026716, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d"}, {"qid": "", "rank": 12, "path": "tests/mypy/modules/plugin_default_factory.py", "score": 0.045189516727026716, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d"}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_default_factory.py", "score": 0.045189516727026716, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d"}, {"qid": "", "rank": 14, "path": "pydantic/types.py", "score": 0.04406895012129996, "span_start": null, "span_end": null, "passage": "....pydantic.dev/2/v/greater than equal', } ] Strict Int = Annotated[int, Strict()] 1 validation error for Strict Int Model strict int Input should be a valid integer [type=int type, input value=3.14159,..."}, {"qid": "", "rank": 15, "path": "tests/test_fastapi_json_schema.py", "score": 0.043516340294807, "span_start": null, "span_end": null, "passage": "...ntic. internal. core utils import Core Schema Or Field from pydantic.errors import Pydantic Invalid For Json Schema from pydantic.json schema import Generate Json Schema, Json Schema Value class  Erro..."}, {"qid": "", "rank": 16, "path": "tests/mypy/test_mypy.py", "score": 0.043272123041392316, "span_start": null, "span_end": null, "passage": "...s = [self.configs] if isinstance(self.modules, str): self.modules = [self.modules] built cases = [] for config in self.configs: for module in self.modules: built cases.append((config, module)) if self..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/main.py", "score": 0.042200314844003425, "span_start": null, "span_end": null, "passage": "...ype, Type Var, Union, cast, no type check, overload, ) from typing extensions import dataclass transform from pydantic.v1.class validators import Validator Group, extract root validators, extract vali..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/env_settings.py", "score": 0.04200052689227657, "span_start": null, "span_end": null, "passage": "...v1.typing import Str Path, display as type, get origin, is union from pydantic.v1.utils import deep update, lenient issubclass, path type, sequence like env file sentinel = str(object()) Settings Sour..."}, {"qid": "", "rank": 19, "path": "pydantic/experimental/pipeline.py", "score": 0.041533745703355, "span_start": null, "span_end": null, "passage": " steps: tuple[ Step, ...] def transform( self, func: Callable[[ Out T],  New Out T], ) ->  Pipeline[ In T,  New Out T]: return  Pipeline[ In T,  New Out T](self. steps + ( Transform(func),)) @overload..."}, {"qid": "", "rank": 20, "path": "tests/conftest.py", "score": 0.04147286843121588, "span_start": null, "span_end": null, "passage": "...r): parser.addoption('--test-mypy', action='store true', help='run mypy tests') parser.addoption('--update-mypy', action='store true', help='update mypy tests') def  extract source code from function(..."}], "latency_ms": 6.575822830200195, "gold_paths": ["pydantic/types.py"]}
{"qid": "lens_main_func_7bdfac37", "query": "\ud83e\uddea test: Add more cases in `test_json_schema` (#9457)", "results": [{"qid": "", "rank": 1, "path": "tests/test_json_schema.py", "score": 0.28181457913902447, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 2, "path": "tests/test_fastapi_json_schema.py", "score": 0.2783079471902208, "span_start": null, "span_end": null, "passage": "from   future   import annotations from dataclasses import dataclass from typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pyd..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.2620856653091815, "span_start": null, "span_end": null, "passage": "... as  annotations import collections import collections.abc import dataclasses import decimal import inspect import os import typing from enum import Enum from functools import partial from ipaddress i..."}, {"qid": "", "rank": 4, "path": "pydantic/annotated_handlers.py", "score": 0.25985390255054763, "span_start": null, "span_end": null, "passage": "...Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a ..."}, {"qid": "", "rank": 5, "path": "pydantic/json_schema.py", "score": 0.24859800643431454, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import inspect import math import re import warnings from collections import defaultdict from copy import deepcopy from dataclasse..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.18571473306172628, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_generate_schema.py", "score": 0.18107705270811836, "span_start": null, "span_end": null, "passage": "Args: info: The field info. field: The field name to check. Returns: `True` if field name is in validator fields, `False` otherwise. It ignores the check for a decorator if the decorator has `*` as fi..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_core_utils.py", "score": 0.17243682663530463, "span_start": null, "span_end": null, "passage": "from   future   import annotations import os from collections import defaultdict from typing import ( Any, Callable, Hashable, Type Var, Union, ) from pydantic core import Core Schema, core schema fro..."}, {"qid": "", "rank": 9, "path": "tests/test_json.py", "score": 0.16585385433431524, "span_start": null, "span_end": null, "passage": "... date, datetime, time, timedelta, timezone from decimal import Decimal from enum import Enum from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from..."}, {"qid": "", "rank": 10, "path": "tests/test_parse.py", "score": 0.14970936023831555, "span_start": null, "span_end": null, "passage": "from typing import List, Tuple import pytest from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydant..."}, {"qid": "", "rank": 11, "path": "pydantic/type_adapter.py", "score": 0.1442433500833777, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 12, "path": "pydantic/types.py", "score": 0.1304008615353915, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 13, "path": "pydantic/deprecated/tools.py", "score": 0.12918608270032234, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 14, "path": "tests/test_utils.py", "score": 0.12727749215960113, "span_start": null, "span_end": null, "passage": "...lections.abc import json import os import pickle import sys from copy import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest from dirty ..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated.py", "score": 0.09989175870777023, "span_start": null, "span_end": null, "passage": "...datetime import date, timedelta from pathlib import Path from types import Simple Namespace from typing import Any, Dict, Iterable, List, Type import pytest from pydantic core import Core Schema, core..."}, {"qid": "", "rank": 16, "path": "tests/test_type_adapter.py", "score": 0.09716805895396481, "span_start": null, "span_end": null, "passage": "...mport json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union impo..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_core_metadata.py", "score": 0.09142890841477361, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import typing from typing import Any import typing extensions if typing.TYPE CHECKING: from . schema generation shared import ( Core Schema Or Field ..."}, {"qid": "", "rank": 18, "path": "tests/mypy/test_mypy.py", "score": 0.09084270644907322, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib import os import re import sys from bisect import insort from pathlib import Path from typing import Any, List, Optional, Tuple, Union import pytest try: from mypy ..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.08998699134832237, "span_start": null, "span_end": null, "passage": "...ons from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core import Core Schema, Pydantic Cu..."}, {"qid": "", "rank": 20, "path": "tests/test_plugins.py", "score": 0.08936508984134545, "span_start": null, "span_end": null, "passage": "from   future   import annotations import contextlib from functools import partial from typing import Any, Generator, List from pydantic core import Validation Error from pydantic import Base Model, T..."}], "latency_ms": 5.308628082275391, "gold_paths": ["tests/test_json_schema.py"]}
{"qid": "lens_main_func_46a05652", "query": "Add warning when set \"alias\" in low level annontated field (#9170)", "results": [{"qid": "", "rank": 1, "path": "tests/test_warnings.py", "score": 0.1781865076262801, "span_start": null, "span_end": null, "passage": "from pydantic import Pydantic Deprecated Since20, Pydantic Deprecation Warning from pydantic.version import version short def test pydantic deprecation warning(): warning = Pydantic Deprecation Warnin..."}, {"qid": "", "rank": 2, "path": "tests/test_aliases.py", "score": 0.1722802316534338, "span_start": null, "span_end": null, "passage": "from contextlib import nullcontext as does not raise from inspect import signature from typing import Any, Context Manager, List, Optional import pytest from dirty equals import Is Str from pydantic c..."}, {"qid": "", "rank": 3, "path": "pydantic/warnings.py", "score": 0.13603949593139422, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 4, "path": "pydantic/fields.py", "score": 0.10398507268077643, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 10, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.09810153625745001, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail.py", "score": 0.09633200121896567, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.09633200121896567, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.09633200121896567, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Config Dict, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base..."}], "latency_ms": 4.857063293457031, "gold_paths": ["pydantic/_internal/_fields.py", "tests/test_annotated.py"]}
{"qid": "lens_main_func_0e3337fd", "query": "docs(fields): fix link to union modes (#9431)", "results": [{"qid": "", "rank": 1, "path": "docs/plugins/griffe_doclinks.py", "score": 0.2114640373040662, "span_start": null, "span_end": null, "passage": "import ast import re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extens..."}, {"qid": "", "rank": 2, "path": "tests/test_docs_extraction.py", "score": 0.12243002608980019, "span_start": null, "span_end": null, "passage": "import textwrap from typing import Generic, Type Var from typing extensions import Annotated, Typed Dict from pydantic import Base Model, Config Dict, Field, Type Adapter, create model from pydantic.d"}, {"qid": "", "rank": 3, "path": "pydantic/deprecated/class_validators.py", "score": 0.08473754504660509, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 4, "path": "pydantic/config.py", "score": 0.07566540549172465, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 5, "path": "pydantic/dataclasses.py", "score": 0.06590858182216949, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_dataclasses.py", "score": 0.055321088986488076, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic decorators  : Metadata containing th..."}, {"qid": "", "rank": 7, "path": "tests/test_docs.py", "score": 0.05160139810032383, "span_start": null, "span_end": null, "passage": "...nux or macos' if platform.python implementation() != 'CPython': return 'not cpython' try: import devtools  # noqa: F401 except Import Error: return 'devtools not installed' try: import sqlalchemy  # n..."}, {"qid": "", "rank": 8, "path": "pydantic/main.py", "score": 0.051589340178584915, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic custom init  : Whether the model has..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_fields.py", "score": 0.05141634090718958, "span_start": null, "span_end": null, "passage": "... here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The local namespaces. include extras: Whether to recursively include..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.051387364713461836, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/main.py", "score": 0.04975156701523779, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b..."}, {"qid": "", "rank": 12, "path": "tests/test_utils.py", "score": 0.04468463355813301, "span_start": null, "span_end": null, "passage": "... import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest from dirty equals import Is List from pydantic core import Pydantic Custom Error..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/utils.py", "score": 0.04154164312351582, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, ..."}, {"qid": "", "rank": 14, "path": "pydantic/fields.py", "score": 0.04131317095469424, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_model_construction.py", "score": 0.04113621179957172, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 16, "path": "pydantic/root_model.py", "score": 0.03820474907920191, "span_start": null, "span_end": null, "passage": "...Extra fields in the model. Args: root: The root object of the model.  fields set: The set of fields to be updated. Returns: The new model. Raises: Not Implemented: If the model is not a subclass of `R..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/mypy.py", "score": 0.03766668751171446, "span_start": null, "span_end": null, "passage": "...fig Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes import ( ARG NAMED, ARG NAMED OPT, ARG ..."}, {"qid": "", "rank": 18, "path": "pydantic/functional_serializers.py", "score": 0.03652950092032303, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 19, "path": "pydantic/types.py", "score": 0.034696942973520134, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_validators.py", "score": 0.03434577475563535, "span_start": null, "span_end": null, "passage": "...Pv6Address, IPv6Interface, IPv6Network from typing import Any from pydantic core import Pydantic Custom Error, core schema from pydantic core. pydantic core import Pydantic Known Error def sequence va..."}], "latency_ms": 8.392095565795898, "gold_paths": ["pydantic/fields.py"]}
{"qid": "lens_main_func_1ea21160", "query": "[Docs] Fix ModuleNotFoundError in Pydantic Extra Types (#9433)", "results": [{"qid": "", "rank": 1, "path": "tests/test_exports.py", "score": 0.1277496151581134, "span_start": null, "span_end": null, "passage": "...mportlib import importlib.util import json import platform import sys from pathlib import Path from types import Module Type import pytest import pydantic @pytest.mark.filterwarnings('ignore::Deprecat..."}, {"qid": "", "rank": 2, "path": "tests/test_forward_ref.py", "score": 0.12532478149402798, "span_start": null, "span_end": null, "passage": "import dataclasses import re import sys import typing from typing import Any, Optional, Tuple import pytest from pydantic import Base Model, Pydantic User Error, Validation Error def test postponed an..."}, {"qid": "", "rank": 3, "path": "tests/test_migration.py", "score": 0.12054153635789376, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d..."}, {"qid": "", "rank": 4, "path": "pydantic/main.py", "score": 0.11991880384339726, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 5, "path": "tests/test_structural_pattern_matching.py", "score": 0.1139652169440059, "span_start": null, "span_end": null, "passage": "import sys import pytest @pytest.mark.skipif(sys.version info < (3, 10), reason='requires python 3.10 or higher') def test match kwargs(create module): module = create module( ) assert module.main(mod..."}, {"qid": "", "rank": 6, "path": "pydantic/_migration.py", "score": 0.0874708254273827, "span_start": null, "span_end": null, "passage": "import sys from typing import Any, Callable, Dict from .version import version short MOVED IN V2 = { 'pydantic.utils:version info': 'pydantic.version:version info', 'pydantic.error wrappers:Validation..."}, {"qid": "", "rank": 7, "path": "tests/test_docs.py", "score": 0.0835062905131087, "span_start": null, "span_end": null, "passage": "...datetime import datetime from pathlib import Path from tempfile import Named Temporary File from typing import Any import pytest from pydantic core import core schema from pytest examples import Code ..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_validators.py", "score": 0.0730743988844521, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import math import re import typing from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from typin..."}, {"qid": "", "rank": 9, "path": "pydantic/warnings.py", "score": 0.07058394671495333, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/errors.py", "score": 0.06707740200151283, "span_start": null, "span_end": null, "passage": "from decimal import Decimal from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Sequence, Set, Tuple, Type, Union from pydantic.v1.typing import display as type if TYPE CHECKING:..."}, {"qid": "", "rank": 11, "path": "tests/test_docs_extraction.py", "score": 0.06662391372996253, "span_start": null, "span_end": null, "passage": "import textwrap from typing import Generic, Type Var from typing extensions import Annotated, Typed Dict from pydantic import Base Model, Config Dict, Field, Type Adapter, create model from pydantic.d..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_typing_extra.py", "score": 0.06311227215696424, "span_start": null, "span_end": null, "passage": "...ev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10. if v is N..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/utils.py", "score": 0.06237390968512041, "span_start": null, "span_end": null, "passage": "import keyword import warnings import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Fun..."}, {"qid": "", "rank": 14, "path": "docs/plugins/main.py", "score": 0.0623123791699097, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import json import logging import os import re import textwrap from pathlib import Path from textwrap import indent import autoflake import pyupgrade..."}, {"qid": "", "rank": 15, "path": "docs/plugins/griffe_doclinks.py", "score": 0.06017183555422383, "span_start": null, "span_end": null, "passage": "import ast import re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extens..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/generics.py", "score": 0.05601382267537646, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/error_wrappers.py", "score": 0.05387707473306054, "span_start": null, "span_end": null, "passage": "import json from typing import TYPE CHECKING, Any, Dict, Generator, List, Optional, Sequence, Tuple, Type, Union from pydantic.v1.json import pydantic encoder from pydantic.v1.utils import Representat..."}, {"qid": "", "rank": 18, "path": "tests/test_generics.py", "score": 0.05176577357256998, "span_start": null, "span_end": null, "passage": "...port json import platform import re import sys from collections import deque from enum import Enum, Int Enum from typing import ( Any, Callable, Class Var, Counter, Default Dict, Deque, Dict, Frozen S..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_generics.py", "score": 0.05157279754116493, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/main.py", "score": 0.05122112854423638, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b..."}], "latency_ms": 5.977630615234375, "gold_paths": ["docs/plugins/main.py"]}
{"qid": "lens_main_func_86025fc5", "query": "Make detection of TypeVar defaults robust to the CPython PEP-696 implementation (#9426)", "results": [{"qid": "", "rank": 1, "path": "pydantic/dataclasses.py", "score": 0.18387989265806748, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 2, "path": "pydantic/deprecated/class_validators.py", "score": 0.17256936770592343, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 3, "path": "pydantic/config.py", "score": 0.16998865360985285, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_typing_extra.py", "score": 0.15339877770573573, "span_start": null, "span_end": null, "passage": "...ython.org/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_dataclasses.py", "score": 0.14967600520505642, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 6, "path": "pydantic/fields.py", "score": 0.143149092114259, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.13485044643320568, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "pydantic/functional_serializers.py", "score": 0.13244342782840013, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 9, "path": "pydantic/root_model.py", "score": 0.13215618541467739, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.12112600550978378, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_generics.py", "score": 0.1155144182791416, "span_start": null, "span_end": null, "passage": "...vars import Context Var from types import prepare class from typing import TYPE CHECKING, Any, Iterator, List, Mapping, Mutable Mapping, Tuple, Type Var from weakref import Weak Value Dictionary impor..."}, {"qid": "", "rank": 12, "path": "pydantic/json_schema.py", "score": 0.10511505546531749, "span_start": null, "span_end": null, "passage": "...on, cast, ) import pydantic core from pydantic core import Core Schema, Pydantic Omit, core schema, to jsonable python from pydantic core.core schema import Computed Field from typing extensions impor..."}, {"qid": "", "rank": 13, "path": "pydantic/color.py", "score": 0.10206872221194258, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor..."}, {"qid": "", "rank": 14, "path": "pydantic/validate_call_decorator.py", "score": 0.10084956064755816, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 15, "path": "pydantic/types.py", "score": 0.09493000532604502, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 16, "path": "pydantic/type_adapter.py", "score": 0.0920689905833817, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 17, "path": "tests/mypy/modules/covariant_typevar.py", "score": 0.09076222353202085, "span_start": null, "span_end": null, "passage": "from typing import Generic, Type Var from pydantic import Base Model T = Type Var(\"T\", covariant=True) class Foo(Base Model, Generic[T]): value: T class Bar(Foo[T]): ..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/utils.py", "score": 0.08864338701205496, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, ..."}, {"qid": "", "rank": 19, "path": "pydantic/v1/generics.py", "score": 0.08778852745630755, "span_start": null, "span_end": null, "passage": "... import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weakref import Weak Key Dic..."}, {"qid": "", "rank": 20, "path": "pydantic/alias_generators.py", "score": 0.08776195681411911, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}], "latency_ms": 4.24957275390625, "gold_paths": ["pydantic/_internal/_generate_schema.py"]}
{"qid": "lens_main_func_8925e4fe", "query": "added @classmethod to @model_validator(mode='before') in docs and acr\u2026 (#9410)", "results": [{"qid": "", "rank": 1, "path": "tests/test_model_validator.py", "score": 0.2779775374143659, "span_start": null, "span_end": null, "passage": "from   future   import annotations from typing import Any, Dict, cast import pytest from pydantic import Base Model, Validation Info, Validator Function Wrap Handler, model validator def test model va..."}, {"qid": "", "rank": 2, "path": "pydantic/functional_validators.py", "score": 0.24373157524597772, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 3, "path": "tests/test_parse.py", "score": 0.18454484181555775, "span_start": null, "span_end": null, "passage": "from typing import List, Tuple import pytest from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydant..."}, {"qid": "", "rank": 4, "path": "pydantic/config.py", "score": 0.1616324490468816, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.14431647849262288, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.14431647849262288, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 7, "path": "tests/mypy/modules/plugin_success.py", "score": 0.14431647849262288, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.14431647849262288, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.14431647849262288, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.14431647849262288, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.14431647849262288, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "pydantic/deprecated/class_validators.py", "score": 0.1257458993217126, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 13, "path": "tests/test_docs_extraction.py", "score": 0.12553106302148764, "span_start": null, "span_end": null, "passage": "import textwrap from typing import Generic, Type Var from typing extensions import Annotated, Typed Dict from pydantic import Base Model, Config Dict, Field, Type Adapter, create model from pydantic.d..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_decorators.py", "score": 0.11557252591396466, "span_start": null, "span_end": null, "passage": "while building the pydantic-core schema. Attributes: decorator repr: A class variable representing the decorator string, '@validator'. fields: A tuple of field names the validator should be called on...."}, {"qid": "", "rank": 15, "path": "tests/test_validators.py", "score": 0.11134673540948935, "span_start": null, "span_end": null, "passage": "...rom dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools import partial, partialmethod from itertools import product from os.path import normcase from ..."}, {"qid": "", "rank": 16, "path": "tests/test_decorators.py", "score": 0.09592646734991496, "span_start": null, "span_end": null, "passage": "import pytest from pydantic import Pydantic User Error from pydantic. internal. decorators import inspect annotated serializer, inspect validator def  two pos required args(a, b): pass def  two pos re..."}, {"qid": "", "rank": 17, "path": "tests/test_validators_dataclass.py", "score": 0.09540716211870379, "span_start": null, "span_end": null, "passage": "from dataclasses import asdict, is dataclass from typing import Any, List import pytest from dirty equals import Has Repr from pydantic import Validation Error, field validator, model validator from p..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.09091857554049466, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.09091857554049466, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.09091857554049466, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}], "latency_ms": 3.8597583770751953, "gold_paths": ["tests/test_dataclasses.py", "tests/test_root_model.py", "tests/test_validators.py"]}
{"qid": "lens_main_func_07b64739", "query": "Fix duplicate test name (#9387)", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/decorator.py", "score": 0.09360976793164308, "span_start": null, "span_end": null, "passage": "...ate(func) else: return validate ALT V ARGS = 'v  args' ALT V KWARGS = 'v  kwargs' V POSITIONAL ONLY NAME = 'v  positional only' V DUPLICATE KWARGS = 'v  duplicate kwargs' class Validated Function: def..."}, {"qid": "", "rank": 2, "path": "tests/test_deprecated_validate_arguments.py", "score": 0.04866329809112108, "span_start": null, "span_end": null, "passage": "import asyncio import inspect from pathlib import Path from typing import List import pytest from dirty equals import Is Instance from typing extensions import Annotated from pydantic import Base Mode..."}, {"qid": "", "rank": 3, "path": "tests/test_dataclasses.py", "score": 0.04658234669864798, "span_start": null, "span_end": null, "passage": "... Any, Callable, Class Var, Dict, Frozen Set, Generic, List, Optional, Set, Type Var, Union import pytest from dirty equals import Has Repr from pydantic core import Args Kwargs, Core Schema, Schema Va..."}, {"qid": "", "rank": 4, "path": "pydantic/errors.py", "score": 0.04095004350002311, "span_start": null, "span_end": null, "passage": "...rror code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (self, name: str, message: str) -> None: self.name = name super().  init  (..."}, {"qid": "", "rank": 5, "path": "tests/test_deprecated.py", "score": 0.04034401747356214, "span_start": null, "span_end": null, "passage": "...rm import re from datetime import date, timedelta from pathlib import Path from types import Simple Namespace from typing import Any, Dict, Iterable, List, Type import pytest from pydantic core import..."}, {"qid": "", "rank": 6, "path": "tests/test_exports.py", "score": 0.03992820171978423, "span_start": null, "span_end": null, "passage": "...ort json import platform import sys from pathlib import Path from types import Module Type import pytest import pydantic @pytest.mark.filterwarnings('ignore::Deprecation Warning') def test init export..."}, {"qid": "", "rank": 7, "path": "tests/test_plugin_loader.py", "score": 0.03816327759589366, "span_start": null, "span_end": null, "passage": "import importlib.metadata as importlib metadata import os from unittest.mock import patch import pytest import pydantic.plugin. loader as loader class Entry Point: def   init  (self, name, value, grou..."}, {"qid": "", "rank": 8, "path": "tests/test_create_model.py", "score": 0.03430055154043167, "span_start": null, "span_end": null, "passage": "import platform import re from typing import Generic, Optional, Tuple, Type Var import pytest from typing extensions import Annotated from pydantic import ( Base Model, Config Dict, Field, Private Att..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_signature.py", "score": 0.03376628189794606, "span_start": null, "span_end": null, "passage": "...rom . utils import is valid identifier if TYPE CHECKING: from ..fields import Field Info def  field name for signature(field name: str, field info: Field Info) -> str: def  alias if valid(x: Any) -> s..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/tools.py", "score": 0.03276468222297783, "span_start": null, "span_end": null, "passage": "... as type   all   = ('parse file as', 'parse obj as', 'parse raw as', 'schema of', 'schema json of') Name Factory = Union[str, Callable[[Type[Any]], str]] if TYPE CHECKING: from pydantic.v1.typing impo..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.02895516895608895, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 12, "path": "tests/mypy/modules/strict_equality.py", "score": 0.02895516895608895, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 13, "path": "tests/test_main.py", "score": 0.027492670117522204, "span_start": null, "span_end": null, "passage": "...ping, Optional, Set, Type, Type Var, Union, get type hints, ) from uuid import UUID, uuid4 import pytest from pydantic core import Core Schema, core schema from typing extensions import Annotated, Lit..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/utils.py", "score": 0.026993421998938186, "span_start": null, "span_end": null, "passage": "...ple[str, Any], Tuple[str, Any, Any]]]   all   = ( 'import string', 'sequence like', 'validate field name', 'lenient isinstance', 'lenient issubclass', 'in ipython', 'is valid identifier', 'deep update..."}, {"qid": "", "rank": 15, "path": "tests/test_config.py", "score": 0.026819858590682574, "span_start": null, "span_end": null, "passage": "...port Decimal from inspect import signature from typing import Any, Context Manager, Dict, Iterable, Named Tuple, Optional, Tuple, Type, Union from dirty equals import Has Repr, Is Partial Dict from py..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/main.py", "score": 0.026764645148227306, "span_start": null, "span_end": null, "passage": "...ect, Str Bytes from pydantic.v1.typing import ( Any Callable, get args, get origin, is classvar, is namedtuple, is union, resolve annotations, update model forward refs, ) from pydantic.v1.utils impor..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_fields.py", "score": 0.02661221831827706, "span_start": null, "span_end": null, "passage": "It uses the `typing.get type hints`, The only thing that we do here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The lo..."}, {"qid": "", "rank": 18, "path": "tests/test_validators.py", "score": 0.025814981079359197, "span_start": null, "span_end": null, "passage": "...oduct from os.path import normcase from typing import Any, Callable, Deque, Dict, Frozen Set, List, Named Tuple, Optional, Tuple, Union from unittest.mock import Magic Mock import pytest from dirty eq..."}, {"qid": "", "rank": 19, "path": "tests/plugin/test_plugin.py", "score": 0.025692910463667788, "span_start": null, "span_end": null, "passage": "import os import pytest pytestmark = pytest.mark.skipif(not os.getenv('TEST PLUGIN'), reason='Test only with `TEST PLUGIN` env var set.') def test plugin usage(): from pydantic import Base Model class..."}, {"qid": "", "rank": 20, "path": "tests/test_migration.py", "score": 0.02536716049221726, "span_start": null, "span_end": null, "passage": "import importlib import pytest from pydantic. migration import DEPRECATED MOVED IN V2, MOVED IN V2, REDIRECT TO V1, REMOVED IN V2, getattr migration from pydantic.errors import Pydantic Import Error d..."}], "latency_ms": 3.474712371826172, "gold_paths": ["tests/test_aliases.py"]}
{"qid": "lens_main_func_4d7bef62", "query": "Add job for auto labeling (#9367)", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_typing_extra.py", "score": 0.09074177553128203, "span_start": null, "span_end": null, "passage": "... = sys. getframe(parent depth) if frame.f back is None: return None else: return frame.f locals def add module globals(obj: Any, globalns: dict[str, Any] | None = None) -> dict[str, Any]: module name ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08265205019281766, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 3, "path": "tests/test_fastapi_json_schema.py", "score": 0.0786643167363526, "span_start": null, "span_end": null, "passage": "...ntic. internal. core utils import Core Schema Or Field from pydantic.errors import Pydantic Invalid For Json Schema from pydantic.json schema import Generate Json Schema, Json Schema Value class  Erro..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/utils.py", "score": 0.06835936637238613, "span_start": null, "span_end": null, "passage": "...or Type, deque)) def validate field name(bases: List[Type['Base Model']], field name: str) -> None: for base in bases: if getattr(base, field name, None): raise Name Error( f'Field name \"{field name}\"..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.05720839089802366, "span_start": null, "span_end": null, "passage": "...TA DISCRIMINATOR PLACEHOLDER KEY = 'pydantic.internal.union discriminator' class Missing Definition For Union Ref(Exception): def   init  (self, ref: str) -> None: self.ref = ref super().  init  (f'Mi..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_serializers.py", "score": 0.0529344178416675, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 7, "path": "pydantic/mypy.py", "score": 0.0526002389795297, "span_start": null, "span_end": null, "passage": "...f. plugin data def  pydantic model class maker callback(self, ctx: Class Def Context) -> bool: transformer = Pydantic Model Transformer(ctx.cls, ctx.reason, ctx.api, self.plugin config) return transfo..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.0521440885987141, "span_start": null, "span_end": null, "passage": "...e', 'timedelta', 'datetime') CONSTRAINTS TO ALLOWED SCHEMAS: dict[str, set[str]] = defaultdict(set) for constraint in STR CONSTRAINTS: CONSTRAINTS TO ALLOWED SCHEMAS[constraint].update(TEXT SCHEMA TYP..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/mypy.py", "score": 0.05124257196358468, "span_start": null, "span_end": null, "passage": "...instance(sym.node, Type Info):  # pragma: no branch if any(get fullname(base) == BASEMODEL FULLNAME for base in sym.node.mro): return self. pydantic model class maker callback return None def get meta..."}, {"qid": "", "rank": 10, "path": "pydantic/config.py", "score": 0.049240157246028586, "span_start": null, "span_end": null, "passage": "...], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] f..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_decorators.py", "score": 0.04857675097432281, "span_start": null, "span_end": null, "passage": "...ple of field names the validator should be called on. mode: The proposed validator mode. each item: For complex objects (sets, lists etc.) whether to validate individual elements rather than the whole..."}, {"qid": "", "rank": 12, "path": "pydantic/type_adapter.py", "score": 0.047283247217474754, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/main.py", "score": 0.04688127523804435, "span_start": null, "span_end": null, "passage": "...ype, Type Var, Union, cast, no type check, overload, ) from typing extensions import dataclass transform from pydantic.v1.class validators import Validator Group, extract root validators, extract vali..."}, {"qid": "", "rank": 14, "path": "pydantic/fields.py", "score": 0.045911199448697544, "span_start": null, "span_end": null, "passage": "...t: bool | None class  Field Info Inputs( From Field Info Inputs, total=False): `Field Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is ex..."}, {"qid": "", "rank": 15, "path": "docs/plugins/main.py", "score": 0.045801549460578336, "span_start": null, "span_end": null, "passage": "...ing import os import re import textwrap from pathlib import Path from textwrap import indent import autoflake import pyupgrade. main as pyupgrade main  # type: ignore import tomli import yaml from jin..."}, {"qid": "", "rank": 16, "path": "pydantic/plugin/_schema_validator.py", "score": 0.04532740843221823, "span_start": null, "span_end": null, "passage": "...e Validate Handler Protocol] = [] strings event handlers: list[Base Validate Handler Protocol] = [] for plugin in plugins: try: p, j, s = plugin.new schema validator( schema, schema type, schema type ..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_model_construction.py", "score": 0.044714416224437885, "span_start": null, "span_end": null, "passage": "...space: The attribute dictionary of the class to be created.   pydantic generic metadata  : Metadata for generic models.   pydantic reset parent namespace  : Reset parent namespace.  create model modul..."}, {"qid": "", "rank": 18, "path": "pydantic/main.py", "score": 0.04404233385528584, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_generics.py", "score": 0.04245937130301322, "span_start": null, "span_end": null, "passage": "... import Weak Value Dictionary import typing extensions from . core utils import get type ref from . forward ref import Pydantic Recursive Ref from . typing extra import Type Var Type, typing base from..."}, {"qid": "", "rank": 20, "path": "pydantic/json_schema.py", "score": 0.04082740172844933, "span_start": null, "span_end": null, "passage": "...onfig import Json Dict, Json Schema Extra Callable, Json Value from .errors import Pydantic Invalid For Json Schema, Pydantic Schema Generation Error, Pydantic User Error if TYPE CHECKING: from . impo..."}], "latency_ms": 3.4241676330566406, "gold_paths": ["release/check_relnotes.py"]}
{"qid": "lens_main_func_cff0f373", "query": "Fix typing of `_frame_depth` (#9353)", "results": [{"qid": "", "rank": 1, "path": "pydantic/type_adapter.py", "score": 0.19007986186885445, "span_start": null, "span_end": null, "passage": "... function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typing.py`) is not useful. So instead we look at the globals in our parent stack frame. This works f..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_typing_extra.py", "score": 0.08406205860403293, "span_start": null, "span_end": null, "passage": "...g/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10. if v i..."}, {"qid": "", "rank": 3, "path": "tests/test_typing.py", "score": 0.07785228179610232, "span_start": null, "span_end": null, "passage": "import sys import typing from collections import namedtuple from typing import Callable, Class Var, Forward Ref, Named Tuple import pytest from typing extensions import Literal, get origin from pydant..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_generics.py", "score": 0.05548474344026372, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 5, "path": "tests/conftest.py", "score": 0.03912748550980143, "span_start": null, "span_end": null, "passage": "...rap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import Assertion Rewriting ..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail1.py", "score": 0.03666961441305316, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/fail1.py", "score": 0.03666961441305316, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail1.py", "score": 0.03666961441305316, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/fail1.py", "score": 0.03666961441305316, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 10, "path": "tests/mypy/modules/fail1.py", "score": 0.03666961441305316, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model from pydantic.types import Json class Model(Base Model): age: int first name = 'John' last name: Optiona..."}, {"qid": "", "rank": 11, "path": "pydantic/root_model.py", "score": 0.03590920545379122, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 12, "path": "pydantic/fields.py", "score": 0.03426592243013936, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 13, "path": "pydantic/main.py", "score": 0.03368535167980282, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 14, "path": "pydantic/dataclasses.py", "score": 0.03319855793159649, "span_start": null, "span_end": null, "passage": "...etermines if the generated class should be a 'slots' `dataclass`, which does not allow the addition of new attributes after instantiation. Returns: A decorator that accepts a class as its argument and..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail3.py", "score": 0.03057767111720762, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo..."}, {"qid": "", "rank": 16, "path": "tests/mypy/modules/fail3.py", "score": 0.03057767111720762, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail3.py", "score": 0.03057767111720762, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.029460113475447504, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/fail2.py", "score": 0.029089765052460345, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail2.py", "score": 0.029089765052460345, "span_start": null, "span_end": null, "passage": "from datetime import datetime from typing import List, Optional from pydantic import Base Model class Model(Base Model): age: int first name = 'John' last name: Optional[str] = None signup ts: Optiona..."}], "latency_ms": 2.841472625732422, "gold_paths": ["pydantic/type_adapter.py"]}
{"qid": "lens_main_func_37fa1bce", "query": "Provide missing generics for `classmethod` in `create_model` (#9338)", "results": [{"qid": "", "rank": 1, "path": "tests/test_create_model.py", "score": 0.2006718825703375, "span_start": null, "span_end": null, "passage": "import platform import re from typing import Generic, Optional, Tuple, Type Var import pytest from typing extensions import Annotated from pydantic import ( Base Model, Config Dict, Field, Private Att..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.10605362602031956, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/plugin_success.py", "score": 0.10605362602031956, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.10605362602031956, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.10605362602031956, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.10605362602031956, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.10605362602031956, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.10605362602031956, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 9, "path": "tests/test_forward_ref.py", "score": 0.10270131456835449, "span_start": null, "span_end": null, "passage": "import dataclasses import re import sys import typing from typing import Any, Optional, Tuple import pytest from pydantic import Base Model, Pydantic User Error, Validation Error def test postponed an..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.09966915527188717, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.09966915527188717, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.09966915527188717, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.09966915527188717, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.09966915527188717, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.09966915527188717, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/annotated_types.py", "score": 0.09743259018309552, "span_start": null, "span_end": null, "passage": "import sys from typing import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typ..."}, {"qid": "", "rank": 17, "path": "pydantic/main.py", "score": 0.09644972456405397, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 18, "path": "tests/test_model_validator.py", "score": 0.09128005614350235, "span_start": null, "span_end": null, "passage": "from   future   import annotations from typing import Any, Dict, cast import pytest from pydantic import Base Model, Validation Info, Validator Function Wrap Handler, model validator def test model va..."}, {"qid": "", "rank": 19, "path": "tests/test_generics.py", "score": 0.08311483245230984, "span_start": null, "span_end": null, "passage": "import gc import itertools import json import platform import re import sys from collections import deque from enum import Enum, Int Enum from typing import ( Any, Callable, Class Var, Counter, Defaul..."}, {"qid": "", "rank": 20, "path": "tests/test_main.py", "score": 0.08181308966561382, "span_start": null, "span_end": null, "passage": "import json import platform import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum impo..."}], "latency_ms": 5.653858184814453, "gold_paths": ["pydantic/main.py"]}
{"qid": "lens_main_func_c4d2edc4", "query": "Fix Outputted Model JSON Schema for Sequence type (#9303)", "results": [{"qid": "", "rank": 1, "path": "tests/test_json_schema.py", "score": 0.33980239270790225, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 2, "path": "tests/test_fastapi_json_schema.py", "score": 0.2858446996287486, "span_start": null, "span_end": null, "passage": "... typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pydantic. internal. core metadata import Core Metadata Handler from pydantic..."}, {"qid": "", "rank": 3, "path": "pydantic/json_schema.py", "score": 0.23980227698871756, "span_start": null, "span_end": null, "passage": "...opy import deepcopy from dataclasses import is dataclass from enum import Enum from typing import ( TYPE CHECKING, Any, Callable, Counter, Dict, Hashable, Iterable, New Type, Pattern, Sequence, Tuple,..."}, {"qid": "", "rank": 4, "path": "pydantic/annotated_handlers.py", "score": 0.23749127278435783, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.22332017392356682, "span_start": null, "span_end": null, "passage": "...Network from operator import attrgetter from typing import Any, Callable, Iterable, Literal, Tuple, Type Var import typing extensions from pydantic core import ( Core Schema, Multi Host Url, Pydantic ..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.18532505060396653, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_generate_schema.py", "score": 0.18210864459050113, "span_start": null, "span_end": null, "passage": "...heck. Returns: `True` if field name is in validator fields, `False` otherwise. It ignores the check for a decorator if the decorator has `*` as field or `check fields=False`. Args: decorators: An iter..."}, {"qid": "", "rank": 8, "path": "pydantic/types.py", "score": 0.161198882623956, "span_start": null, "span_end": null, "passage": "... the field in strict mode. Example: ```python from typing extensions import Annotated from pydantic.types import Strict Strict Bool = Annotated[bool, Strict()] ``` def conint( *, strict: bool | None =..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_core_utils.py", "score": 0.15832287367423878, "span_start": null, "span_end": null, "passage": "...tations import os from collections import defaultdict from typing import ( Any, Callable, Hashable, Type Var, Union, ) from pydantic core import Core Schema, core schema from pydantic core import vali..."}, {"qid": "", "rank": 10, "path": "tests/test_parse.py", "score": 0.1561929318786409, "span_start": null, "span_end": null, "passage": "from typing import List, Tuple import pytest from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydant..."}, {"qid": "", "rank": 11, "path": "pydantic/type_adapter.py", "score": 0.1508482501453892, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 12, "path": "pydantic/deprecated/tools.py", "score": 0.1494355963128086, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 13, "path": "tests/test_json.py", "score": 0.13509715793451713, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/schema.py", "score": 0.1245109039891236, "span_start": null, "span_end": null, "passage": "... IPv4Network, IPv6Address, IPv6Interface, IPv6Network from pathlib import Path from typing import ( TYPE CHECKING, Any, Callable, Dict, Forward Ref, Frozen Set, Generic, Iterable, List, Optional, Patt..."}, {"qid": "", "rank": 15, "path": "tests/test_type_adapter.py", "score": 0.11113506754670976, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp..."}, {"qid": "", "rank": 16, "path": "pydantic/functional_validators.py", "score": 0.11101748947334994, "span_start": null, "span_end": null, "passage": ".... Example: ```py from typing extensions import Annotated from pydantic import After Validator, Base Model, Validation Error My Int = Annotated[int, After Validator(lambda v: v + 1)] class Model(Base M..."}, {"qid": "", "rank": 17, "path": "tests/test_main.py", "score": 0.1098752278168738, "span_start": null, "span_end": null, "passage": "import json import platform import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum impo..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/tools.py", "score": 0.10626899546118901, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.09969270465259772, "span_start": null, "span_end": null, "passage": "...llections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core import Core Schema, Pydantic Custom Error,..."}, {"qid": "", "rank": 20, "path": "tests/test_utils.py", "score": 0.09828033589382298, "span_start": null, "span_end": null, "passage": "import collections.abc import json import os import pickle import sys from copy import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest f..."}], "latency_ms": 4.360675811767578, "gold_paths": ["pydantic/_internal/_generate_schema.py", "pydantic/_internal/_known_annotated_metadata.py", "tests/test_json_schema.py"]}
{"qid": "lens_main_func_6b992fda", "query": "\ud83d\udc65 Update Pydantic People (#9326)", "results": [{"qid": "", "rank": 1, "path": ".github/actions/people/people.py", "score": 0.0847827403225566, "span_start": null, "span_end": null, "passage": "...rom typing import Any, Container, Dict, List, Set, Union import yaml from github import Github from pydantic import Base Model, Secret Str from pydantic settings import Base Settings github graphql ur..."}, {"qid": "", "rank": 2, "path": "pydantic/_migration.py", "score": 0.07300132850449856, "span_start": null, "span_end": null, "passage": "...port sys from typing import Any, Callable, Dict from .version import version short MOVED IN V2 = { 'pydantic.utils:version info': 'pydantic.version:version info', 'pydantic.error wrappers:Validation E..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.07207297558865762, "span_start": null, "span_end": null, "passage": "...t copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core import Core Schema, Pydantic Custom Error, to jsonable python from pydantic core impor..."}, {"qid": "", "rank": 4, "path": "docs/plugins/main.py", "score": 0.06998765409180238, "span_start": null, "span_end": null, "passage": "...rkdown, page): return md elif md := devtools example(markdown, page): return md elif md := populate pydantic people(markdown, page): return md else: return markdown def add changelog() -> None: histor..."}, {"qid": "", "rank": 5, "path": "pydantic/main.py", "score": 0.051672323614116375, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 6, "path": "docs/plugins/using_update.py", "score": 0.03886467079820619, "span_start": null, "span_end": null, "passage": "...leep import requests import tomli THIS DIR = Path(  file  ).parent session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'https://api.github.com/repos/{repo}' resp = ..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_utils.py", "score": 0.03494872644262925, "span_start": null, "span_end": null, "passage": "...ifier.isidentifier() and not keyword.iskeyword(identifier) Key Type = Type Var('Key Type') def deep update(mapping: dict[Key Type, Any], *updating mappings: dict[Key Type, Any]) -> dict[Key Type, Any]..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_dataclasses.py", "score": 0.030431125320657948, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/utils.py", "score": 0.02954184646419212, "span_start": null, "span_end": null, "passage": "...Return, Optional, Set, Tuple, Type, Type Var, Union, ) from typing extensions import Annotated from pydantic.v1.errors import Config Error from pydantic.v1.typing import ( None Type, With Args Types, ..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/main.py", "score": 0.028875106390882886, "span_start": null, "span_end": null, "passage": "...Var, Union, cast, no type check, overload, ) from typing extensions import dataclass transform from pydantic.v1.class validators import Validator Group, extract root validators, extract validators, in..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_model_construction.py", "score": 0.02820955533958775, "span_start": null, "span_end": null, "passage": "...asses of the class to be created. namespace: The attribute dictionary of the class to be created.   pydantic generic metadata  : Metadata for generic models.   pydantic reset parent namespace  : Reset..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/schema.py", "score": 0.02646982265557266, "span_start": null, "span_end": null, "passage": "...ype Var, Union, cast, ) from uuid import UUID from typing extensions import Annotated, Literal from pydantic.v1.fields import ( MAPPING LIKE SHAPES, SHAPE DEQUE, SHAPE FROZENSET, SHAPE GENERIC, SHAPE ..."}, {"qid": "", "rank": 13, "path": "docs/plugins/griffe_doclinks.py", "score": 0.025708958453766865, "span_start": null, "span_end": null, "passage": "...end:]}' ) return f'!!! abstract \"Usage Documentation\"\\n    [{heading}](../{rel file}#{slug})\\n' def update docstring(obj: Griffe Object) -> str: return re.sub( r'usage[\\- ]docs: ?https://docs\\.pydanti..."}, {"qid": "", "rank": 14, "path": "tests/test_exports.py", "score": 0.025346091616843248, "span_start": null, "span_end": null, "passage": "...ort platform import sys from pathlib import Path from types import Module Type import pytest import pydantic @pytest.mark.filterwarnings('ignore::Deprecation Warning') def test init export(): for name..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/types.py", "score": 0.02394302433244732, "span_start": null, "span_end": null, "passage": "...e, Type, Type Var, Union, cast, overload, ) from uuid import UUID from weakref import Weak Set from pydantic.v1 import errors from pydantic.v1.datetime parse import parse date from pydantic.v1.utils i..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/__init__.py", "score": 0.02236705168286262, "span_start": null, "span_end": null, "passage": "from pydantic.v1 import dataclasses from pydantic.v1.annotated types import create model from namedtuple, create model from typeddict from pydantic.v1.class validators import root validator, validator..."}, {"qid": "", "rank": 17, "path": "tests/test_dataclasses.py", "score": 0.022352026303591992, "span_start": null, "span_end": null, "passage": "... Generic, List, Optional, Set, Type Var, Union import pytest from dirty equals import Has Repr from pydantic core import Args Kwargs, Core Schema, Schema Validator, core schema from typing extensions ..."}, {"qid": "", "rank": 18, "path": "tests/test_warnings.py", "score": 0.021102188292680103, "span_start": null, "span_end": null, "passage": "from pydantic import Pydantic Deprecated Since20, Pydantic Deprecation Warning from pydantic.version import version short def test pydantic deprecation warning(): warning = Pydantic Deprecation Warnin..."}, {"qid": "", "rank": 19, "path": "pydantic/warnings.py", "score": 0.020716821177040472, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 20, "path": "tests/test_version.py", "score": 0.02065639213446793, "span_start": null, "span_end": null, "passage": "...nittest.mock import patch import pytest from packaging.version import parse as parse version import pydantic from pydantic.version import version info, version short def test version info(): version i..."}], "latency_ms": 3.912210464477539, "gold_paths": [".github/actions/people/people.py"]}
{"qid": "lens_main_func_73d10494", "query": "adds test case for unexpected discriminated union behavior (#9236)", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.1.1/pyproject-default_toml/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 5, "path": "tests/mypy/modules/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/pydantic_settings.py", "score": 0.09850567315181918, "span_start": null, "span_end": null, "passage": "...ings, Settings Config Dict class Settings(Base Settings): foo: str s = Settings() s = Settings(foo='test',  case sensitive=True,  env prefix='test  ',  env file='test') s = Settings(foo='test',  case ..."}, {"qid": "", "rank": 10, "path": "pydantic/alias_generators.py", "score": 0.07628197810296666, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 11, "path": "tests/test_discriminated_union.py", "score": 0.06597788839323299, "span_start": null, "span_end": null, "passage": "...ort Simple Namespace from typing import Any, Callable, Generic, List, Optional, Sequence, Type Var, Union import pytest from dirty equals import Has Repr, Is Str from pydantic core import Schema Valid..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.04051380945554507, "span_start": null, "span_end": null, "passage": "....types import Discriminator CORE SCHEMA METADATA DISCRIMINATOR PLACEHOLDER KEY = 'pydantic.internal.union discriminator' class Missing Definition For Union Ref(Exception): def   init  (self, ref: str)..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/utils.py", "score": 0.03522258823874874, "span_start": null, "span_end": null, "passage": "...ict, Generator, Iterable, Iterator, List, Mapping, No Return, Optional, Set, Tuple, Type, Type Var, Union, ) from typing extensions import Annotated from pydantic.v1.errors import Config Error from py..."}, {"qid": "", "rank": 14, "path": "pydantic/type_adapter.py", "score": 0.034450709830450135, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 15, "path": "tests/test_utils.py", "score": 0.03405785872587694, "span_start": null, "span_end": null, "passage": "... import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest from dirty equals import Is List from pydantic core import Pydantic Custom Error..."}, {"qid": "", "rank": 16, "path": "tests/test_dataclasses.py", "score": 0.031600732458423215, "span_start": null, "span_end": null, "passage": "...m typing import Any, Callable, Class Var, Dict, Frozen Set, Generic, List, Optional, Set, Type Var, Union import pytest from dirty equals import Has Repr from pydantic core import Args Kwargs, Core Sc..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_typing_extra.py", "score": 0.030863683329261395, "span_start": null, "span_end": null, "passage": "... type hints lenient(obj: Any, globalns: dict[str, Any] | None = None) -> dict[str, Any]: hints = {} for base in reversed(obj.  mro  ): ann = base.  dict  .get('  annotations  ') localns = dict(vars(ba..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/mypy.py", "score": 0.02961377202259129, "span_start": null, "span_end": null, "passage": "...fig Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes import ( ARG NAMED, ARG NAMED OPT, ARG ..."}, {"qid": "", "rank": 19, "path": "tests/test_fields.py", "score": 0.02816680227663449, "span_start": null, "span_end": null, "passage": "from typing import Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def te..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_forward_ref.py", "score": 0.02802033342816355, "span_start": null, "span_end": null, "passage": "...   future   import annotations as  annotations from dataclasses import dataclass from typing import Union @dataclass class Pydantic Recursive Ref: type ref: str   name   = 'Pydantic Recursive Ref'   h..."}], "latency_ms": 4.084348678588867, "gold_paths": ["tests/test_discriminated_union.py"]}
{"qid": "lens_main_func_82e46640", "query": "Fix model json schema with config types (#9287)", "results": [{"qid": "", "rank": 1, "path": "tests/test_json_schema.py", "score": 0.33402569082875594, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 2, "path": "tests/test_fastapi_json_schema.py", "score": 0.2811950565710689, "span_start": null, "span_end": null, "passage": "... typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pydantic. internal. core metadata import Core Metadata Handler from pydantic..."}, {"qid": "", "rank": 3, "path": "pydantic/annotated_handlers.py", "score": 0.2518346871789211, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w..."}, {"qid": "", "rank": 4, "path": "pydantic/json_schema.py", "score": 0.23296833308341794, "span_start": null, "span_end": null, "passage": "...tern, Sequence, Tuple, Type Var, Union, cast, ) import pydantic core from pydantic core import Core Schema, Pydantic Omit, core schema, to jsonable python from pydantic core.core schema import Compute..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.2230990096981154, "span_start": null, "span_end": null, "passage": "...lable, Iterable, Literal, Tuple, Type Var import typing extensions from pydantic core import ( Core Schema, Multi Host Url, Pydantic Custom Error, Pydantic Omit, Url, core schema, ) from typing extens..."}, {"qid": "", "rank": 6, "path": "tests/mypy/modules/with_config_decorator.py", "score": 0.21966119318574, "span_start": null, "span_end": null, "passage": "from typing import Typed Dict from pydantic import Config Dict, with config @with config(Config Dict(str to lower=True)) class Model(Typed Dict): a: str model = Model(a='ABC')"}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_generate_schema.py", "score": 0.19269658308842055, "span_start": null, "span_end": null, "passage": "...ame. Raises: Pydantic User Error: If one of the field names does not exist in `fields` param. Args: schema or field: The schema data to generate a JSON schema from. handler: The `Get Core Schema Handl..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.17886931953194524, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 9, "path": "tests/test_config.py", "score": 0.16988571469897348, "span_start": null, "span_end": null, "passage": "import json import re import sys from contextlib import nullcontext as does not raise from decimal import Decimal from inspect import signature from typing import Any, Context Manager, Dict, Iterable,..."}, {"qid": "", "rank": 10, "path": "tests/test_parse.py", "score": 0.16896169401951036, "span_start": null, "span_end": null, "passage": "from typing import List, Tuple import pytest from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydant..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_core_utils.py", "score": 0.16759257105178457, "span_start": null, "span_end": null, "passage": "...ict from typing import ( Any, Callable, Hashable, Type Var, Union, ) from pydantic core import Core Schema, core schema from pydantic core import validate core schema as  validate core schema from typ..."}, {"qid": "", "rank": 12, "path": "pydantic/types.py", "score": 0.16006040636151322, "span_start": null, "span_end": null, "passage": "... the field in strict mode. Example: ```python from typing extensions import Annotated from pydantic.types import Strict Strict Bool = Annotated[bool, Strict()] ``` def conint( *, strict: bool | None =..."}, {"qid": "", "rank": 13, "path": "pydantic/type_adapter.py", "score": 0.1529581058240319, "span_start": null, "span_end": null, "passage": "...mbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typing.py`) is not usefu..."}, {"qid": "", "rank": 14, "path": "tests/test_json.py", "score": 0.15206554708683287, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_config.py", "score": 0.13698413457685377, "span_start": null, "span_end": null, "passage": "...xtmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schema from typing extensions import ( Literal, Self, ) from ..aliases import Alias Generator from ...."}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/tools.py", "score": 0.12519933857209387, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 17, "path": "tests/test_deprecated.py", "score": 0.12108033736004309, "span_start": null, "span_end": null, "passage": "import platform import re from datetime import date, timedelta from pathlib import Path from types import Simple Namespace from typing import Any, Dict, Iterable, List, Type import pytest from pydanti..."}, {"qid": "", "rank": 18, "path": "tests/test_main.py", "score": 0.11928360508728687, "span_start": null, "span_end": null, "passage": "import json import platform import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum impo..."}, {"qid": "", "rank": 19, "path": "tests/test_type_adapter.py", "score": 0.1180247109275528, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp..."}, {"qid": "", "rank": 20, "path": "pydantic/config.py", "score": 0.1126938080837589, "span_start": null, "span_end": null, "passage": "...r name Input should be a valid string [type=string type, input value=123, input type=int] arbitrary types allowed: bool 1 validation error for Model pet Input should be an instance of Pet [type=is ins..."}], "latency_ms": 3.6818981170654297, "gold_paths": ["pydantic/json_schema.py", "tests/test_json_schema.py"]}
{"qid": "lens_main_func_77b0e1cc", "query": "Address case where model_construct on a class which defines model_post_init fails with AttributeError: __pydantic_private__ when subsequently model_copy'd (#9168)", "results": [{"qid": "", "rank": 1, "path": "tests/test_main.py", "score": 0.22157855672993937, "span_start": null, "span_end": null, "passage": "import json import platform import re import warnings from collections import defaultdict from copy import deepcopy from dataclasses import dataclass from datetime import date, datetime from enum impo..."}, {"qid": "", "rank": 2, "path": "pydantic/main.py", "score": 0.1909953846770896, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 3, "path": "tests/test_construction.py", "score": 0.1772767954747292, "span_start": null, "span_end": null, "passage": "import pickle from typing import Any, List, Optional import pytest from pydantic core import Pydantic Undefined, Validation Error from pydantic import Alias Choices, Alias Path, Base Model, Config Dic..."}, {"qid": "", "rank": 4, "path": "tests/test_private_attributes.py", "score": 0.17341456185108153, "span_start": null, "span_end": null, "passage": "import functools from typing import Class Var, Generic, Type Var import pytest from pydantic core import Pydantic Undefined from pydantic import Base Model, Config Dict, Private Attr, computed field d..."}, {"qid": "", "rank": 5, "path": "tests/test_create_model.py", "score": 0.16703957160125715, "span_start": null, "span_end": null, "passage": "import platform import re from typing import Generic, Optional, Tuple, Type Var import pytest from typing extensions import Annotated from pydantic import ( Base Model, Config Dict, Field, Private Att..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_model_construction.py", "score": 0.16566042048505908, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 7, "path": "tests/test_dataclasses.py", "score": 0.15211082024052647, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 8, "path": "pydantic/_migration.py", "score": 0.15167227992457616, "span_start": null, "span_end": null, "passage": "import sys from typing import Any, Callable, Dict from .version import version short MOVED IN V2 = { 'pydantic.utils:version info': 'pydantic.version:version info', 'pydantic.error wrappers:Validation..."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/plugin_success.py", "score": 0.14754972863797375, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success.py", "score": 0.14754972863797375, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success.py", "score": 0.14754972863797375, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success.py", "score": 0.14754972863797375, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/plugin_success.py", "score": 0.14754972863797375, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success.py", "score": 0.14754972863797375, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.1.1/mypy-default_ini/plugin_success.py", "score": 0.14754972863797375, "span_start": null, "span_end": null, "passage": "from dataclasses import Init Var from typing import Any, Class Var, Generic, List, Optional, Type Var, Union from typing extensions import Self from pydantic import Base Model, Config Dict, Field, cre..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_success_baseConfig.py", "score": 0.14555002774477502, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_success_baseConfig.py", "score": 0.14555002774477502, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 18, "path": "tests/mypy/modules/plugin_success_baseConfig.py", "score": 0.14555002774477502, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.14555002774477502, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/mypy-default_ini/plugin_success_baseConfig.py", "score": 0.14555002774477502, "span_start": null, "span_end": null, "passage": "from typing import Class Var, Generic, List, Optional, Type Var, Union from pydantic import Base Model, Field, create model, field validator from pydantic.dataclasses import dataclass class Model(Base..."}], "latency_ms": 4.5833587646484375, "gold_paths": ["pydantic/main.py", "tests/test_main.py"]}
{"qid": "lens_main_func_6322b24d", "query": "Fix `strict` application to `function-after` with `use_enum_values` (#9279)", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.10756458736444212, "span_start": null, "span_end": null, "passage": "...rt dataclasses import decimal import inspect import os import typing from enum import Enum from functools import partial from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv..."}, {"qid": "", "rank": 2, "path": "tests/test_strict.py", "score": 0.10651121498070025, "span_start": null, "span_end": null, "passage": "...notated import pytest from pydantic import Base Model, Config Dict, Field, Validation Error @pytest.fixture(scope='session', name='Model With Strict Field') def model with strict field(): class Model ..."}, {"qid": "", "rank": 3, "path": "tests/test_types.py", "score": 0.08994314955279621, "span_start": null, "span_end": null, "passage": "import collections import itertools import json import math import os import re import sys import typing import uuid from collections import Ordered Dict, defaultdict, deque from dataclasses import da..."}, {"qid": "", "rank": 4, "path": "pydantic/config.py", "score": 0.08773635823368524, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 5, "path": "pydantic/deprecated/class_validators.py", "score": 0.08469747152348271, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.08040750982490838, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.07842631835527343, "span_start": null, "span_end": null, "passage": "def   call  (self,   value: Any) -> Any: ... class V1Validator With Values(Protocol): def   call  (self,   value: Any, *, values: dict[str, Any]) -> Any: ... class V1Validator With Kwargs(Protocol): d..."}, {"qid": "", "rank": 8, "path": "tests/test_model_validator.py", "score": 0.07596254960682658, "span_start": null, "span_end": null, "passage": "...typing import Any, Dict, cast import pytest from pydantic import Base Model, Validation Info, Validator Function Wrap Handler, model validator def test model validator wrap() -> None: class Model(Base..."}, {"qid": "", "rank": 9, "path": "pydantic/dataclasses.py", "score": 0.07136233106567191, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 10, "path": "pydantic/validate_call_decorator.py", "score": 0.06696005609685747, "span_start": null, "span_end": null, "passage": "...hat validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate call(...)`. Args: func: The function to be decorat..."}, {"qid": "", "rank": 11, "path": "pydantic/types.py", "score": 0.06372491230256001, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.06109634572061709, "span_start": null, "span_end": null, "passage": "...om   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core im..."}, {"qid": "", "rank": 13, "path": "pydantic/functional_serializers.py", "score": 0.05741073271978947, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.055900501457098156, "span_start": null, "span_end": null, "passage": "...rom dataclasses import dataclass from datetime import date, datetime from enum import Enum from functools import partial from typing import ( Any, Callable, Class Var, Dict, Final, Generic, List, Mapp..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/config.py", "score": 0.055723850634245, "span_start": null, "span_end": null, "passage": "...Callable, Dict, Forward Ref, Optional, Tuple, Type, Union from typing extensions import Literal, Protocol from pydantic.v1.typing import Any Arg TCallable, Any Callable from pydantic.v1.utils import G..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/utils.py", "score": 0.051334080019045054, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, ..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-default_ini/fail4.py", "score": 0.05127743898528429, "span_start": null, "span_end": null, "passage": "from typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=..."}, {"qid": "", "rank": 18, "path": "tests/mypy/modules/fail4.py", "score": 0.05127743898528429, "span_start": null, "span_end": null, "passage": "from typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.4.1/mypy-default_ini/fail4.py", "score": 0.05127743898528429, "span_start": null, "span_end": null, "passage": "from typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail4.py", "score": 0.05127743898528429, "span_start": null, "span_end": null, "passage": "from typing import Any from pydantic import Base Model, root validator, validate call @validate call def foo(a: int, *, c: str = 'x') -> str: return c * a x: str = foo(1, c='hello') foo('x') foo(1, c=..."}], "latency_ms": 4.320621490478516, "gold_paths": ["pydantic/_internal/_known_annotated_metadata.py", "tests/test_types.py"]}
{"qid": "lens_main_func_ae71183f", "query": "Fix `Secret` serialization schema, applicable for unions (#9240)", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_core_utils.py", "score": 0.1488655626632325, "span_start": null, "span_end": null, "passage": "...ict from typing import ( Any, Callable, Hashable, Type Var, Union, ) from pydantic core import Core Schema, core schema from pydantic core import validate core schema as  validate core schema from typ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_generate_schema.py", "score": 0.14404581942500744, "span_start": null, "span_end": null, "passage": "...heck. Returns: `True` if field name is in validator fields, `False` otherwise. It ignores the check for a decorator if the decorator has `*` as field or `check fields=False`. Args: decorators: An iter..."}, {"qid": "", "rank": 3, "path": "pydantic/types.py", "score": 0.14191993541129194, "span_start": null, "span_end": null, "passage": "....pydantic.dev/2/v/greater than equal', } ] Strict Int = Annotated[int, Strict()] 1 validation error for Strict Int Model strict int Input should be a valid integer [type=int type, input value=3.14159,..."}, {"qid": "", "rank": 4, "path": "pydantic/annotated_handlers.py", "score": 0.12351531716692851, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.11874484851337387, "span_start": null, "span_end": null, "passage": "...lable, Iterable, Literal, Tuple, Type Var import typing extensions from pydantic core import ( Core Schema, Multi Host Url, Pydantic Custom Error, Pydantic Omit, Url, core schema, ) from typing extens..."}, {"qid": "", "rank": 6, "path": "tests/test_fastapi_json_schema.py", "score": 0.11736808312552387, "span_start": null, "span_end": null, "passage": "...ntic. internal. core utils import Core Schema Or Field from pydantic.errors import Pydantic Invalid For Json Schema from pydantic.json schema import Generate Json Schema, Json Schema Value class  Erro..."}, {"qid": "", "rank": 7, "path": "pydantic/json_schema.py", "score": 0.11336961706143081, "span_start": null, "span_end": null, "passage": "...tern, Sequence, Tuple, Type Var, Union, cast, ) import pydantic core from pydantic core import Core Schema, Pydantic Omit, core schema, to jsonable python from pydantic core.core schema import Compute..."}, {"qid": "", "rank": 8, "path": "tests/test_json_schema.py", "score": 0.10192999732231138, "span_start": null, "span_end": null, "passage": "...m dirty equals import Has Repr from packaging.version import Version from pydantic core import Core Schema, Schema Validator, core schema, to json from typing extensions import Annotated, Literal, Sel..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.093341476458059, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_discriminated_union.py", "score": 0.08310374370366883, "span_start": null, "span_end": null, "passage": "...nnotations from typing import TYPE CHECKING, Any, Hashable, Sequence from pydantic core import Core Schema, core schema from ..errors import Pydantic User Error from . import  core utils from . core u..."}, {"qid": "", "rank": 11, "path": "pydantic/functional_serializers.py", "score": 0.08246039859813337, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 12, "path": "tests/test_utils.py", "score": 0.07318721990821841, "span_start": null, "span_end": null, "passage": "...se Model from pydantic. internal import  repr from pydantic. internal. core utils import  Walk Core Schema, pretty print core schema from pydantic. internal. typing extra import all literal values, ge..."}, {"qid": "", "rank": 13, "path": "pydantic/fields.py", "score": 0.07247803690871109, "span_start": null, "span_end": null, "passage": "...as: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias: str | None title: str | None field title generator: typing extensions.Callable[..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/schema.py", "score": 0.06871888727461017, "span_start": null, "span_end": null, "passage": "...face, IPv6Network from pathlib import Path from typing import ( TYPE CHECKING, Any, Callable, Dict, Forward Ref, Frozen Set, Generic, Iterable, List, Optional, Pattern, Sequence, Set, Tuple, Type, Typ..."}, {"qid": "", "rank": 15, "path": "tests/test_json.py", "score": 0.06864173822201797, "span_start": null, "span_end": null, "passage": "..., List, Optional, Pattern, Union from uuid import UUID import pytest from pydantic core import Core Schema, Schema Serializer, core schema from typing extensions import Annotated from pydantic import ..."}, {"qid": "", "rank": 16, "path": "tests/test_internal.py", "score": 0.06718355273095955, "span_start": null, "span_end": null, "passage": "from dataclasses import dataclass import pytest from pydantic core import Core Schema, Schema Validator from pydantic core import core schema as cs from pydantic. internal. core utils import ( HAS INV..."}, {"qid": "", "rank": 17, "path": "pydantic/type_adapter.py", "score": 0.06461546074748248, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.06123305434493065, "span_start": null, "span_end": null, "passage": "...rt partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core import Core Schema, Pydantic Custom Error, to jsonable python from pydantic core import core schema as cs from ...."}, {"qid": "", "rank": 19, "path": "pydantic/config.py", "score": 0.057482978864213365, "span_start": null, "span_end": null, "passage": "...], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] f..."}, {"qid": "", "rank": 20, "path": "pydantic/functional_validators.py", "score": 0.056489273356911, "span_start": null, "span_end": null, "passage": "...print(e.json(indent=2)) ``` A metadata class that indicates that a validation should be applied **before** the inner validation logic. Attributes: func: The validator function. Example: ```py from typ..."}], "latency_ms": 5.484104156494141, "gold_paths": ["pydantic/types.py", "tests/test_types.py"]}
{"qid": "lens_main_func_6aab43e4", "query": "Fix `validation_alias` behavior with `model_construct` for `AliasChoices` and `AliasPath` (#9223)", "results": [{"qid": "", "rank": 1, "path": "tests/test_aliases.py", "score": 0.4216702621656627, "span_start": null, "span_end": null, "passage": "...puted field, ) def test alias generator(): def to camel(string: str): return ''.join(x.capitalize() for x in string.split(' ')) class My Model(Base Model): model config = Config Dict(alias generator=t..."}, {"qid": "", "rank": 2, "path": "pydantic/aliases.py", "score": 0.2772511048714514, "span_start": null, "span_end": null, "passage": "...` as a convenience to create various aliases. Attributes: alias: A callable that takes a field name and returns an alias for it. validation alias: A callable that takes a field name and returns a vali..."}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 15, "path": "tests/mypy/modules/plugin_fail.py", "score": 0.17136068521833972, "span_start": null, "span_end": null, "passage": "... class Model(Base Model): model config = Config Dict(alias generator=None, frozen=True, extra=Extra.forbid) x: int y: str def method(self) -> None: pass model = Model(x=1, y='y', z='z') model = Model(..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.17038010056152894, "span_start": null, "span_end": null, "passage": "...str def method(self) -> None: pass class Config: alias generator = None frozen = True extra = Extra.forbid def config method(self) -> None: ... model = Model(x=1, y='y', z='z') model = Model(x=1) mode..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.17038010056152894, "span_start": null, "span_end": null, "passage": "...str def method(self) -> None: pass class Config: alias generator = None frozen = True extra = Extra.forbid def config method(self) -> None: ... model = Model(x=1, y='y', z='z') model = Model(x=1) mode..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.17038010056152894, "span_start": null, "span_end": null, "passage": "...str def method(self) -> None: pass class Config: alias generator = None frozen = True extra = Extra.forbid def config method(self) -> None: ... model = Model(x=1, y='y', z='z') model = Model(x=1) mode..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.17038010056152894, "span_start": null, "span_end": null, "passage": "...str def method(self) -> None: pass class Config: alias generator = None frozen = True extra = Extra.forbid def config method(self) -> None: ... model = Model(x=1, y='y', z='z') model = Model(x=1) mode..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.17038010056152894, "span_start": null, "span_end": null, "passage": "...str def method(self) -> None: pass class Config: alias generator = None frozen = True extra = Extra.forbid def config method(self) -> None: ... model = Model(x=1, y='y', z='z') model = Model(x=1) mode..."}], "latency_ms": 5.239248275756836, "gold_paths": ["pydantic/aliases.py", "pydantic/main.py", "tests/test_construction.py"]}
{"qid": "lens_main_func_60d77f02", "query": "Update `warnings` parameter for serialization utilities to allow raising a warning (#9166)", "results": [{"qid": "", "rank": 1, "path": "tests/test_warnings.py", "score": 0.18536424679075808, "span_start": null, "span_end": null, "passage": "from pydantic import Pydantic Deprecated Since20, Pydantic Deprecation Warning from pydantic.version import version short def test pydantic deprecation warning(): warning = Pydantic Deprecation Warnin..."}, {"qid": "", "rank": 2, "path": "pydantic/config.py", "score": 0.1627354871029051, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 3, "path": "pydantic/deprecated/config.py", "score": 0.15427013257981798, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from typing import TYPE CHECKING, Any from typing extensions import Literal, deprecated from .. internal import  config from ..warnin..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.1499662699005356, "span_start": null, "span_end": null, "passage": "def   call  (self,   value: Any) -> Any: ... class V1Validator With Values(Protocol): def   call  (self,   value: Any, *, values: dict[str, Any]) -> Any: ... class V1Validator With Kwargs(Protocol): d..."}, {"qid": "", "rank": 5, "path": "pydantic/dataclasses.py", "score": 0.14270679018563873, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_serializers.py", "score": 0.13712565393517198, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 7, "path": "pydantic/aliases.py", "score": 0.12692358299499434, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/utils.py", "score": 0.11257476840323374, "span_start": null, "span_end": null, "passage": "import keyword import warnings import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Fun..."}, {"qid": "", "rank": 9, "path": "pydantic/deprecated/class_validators.py", "score": 0.1063690797045635, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_signature.py", "score": 0.10459885463651945, "span_start": null, "span_end": null, "passage": "from   future   import annotations import dataclasses from inspect import Parameter, Signature, signature from typing import TYPE CHECKING, Any, Callable from pydantic core import Pydantic Undefined f..."}, {"qid": "", "rank": 11, "path": "pydantic/fields.py", "score": 0.10150958730289732, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.09546635072528467, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core ..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_config.py", "score": 0.08374085457125124, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import warnings from contextlib import contextmanager from typing import ( TYPE CHECKING, Any, Callable, cast, ) from pydantic core import core schem..."}, {"qid": "", "rank": 14, "path": "tests/test_aliases.py", "score": 0.07890114632189464, "span_start": null, "span_end": null, "passage": "from contextlib import nullcontext as does not raise from inspect import signature from typing import Any, Context Manager, List, Optional import pytest from dirty equals import Is Str from pydantic c..."}, {"qid": "", "rank": 15, "path": "tests/test_utils.py", "score": 0.07666953999251518, "span_start": null, "span_end": null, "passage": "import collections.abc import json import os import pickle import sys from copy import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest f..."}, {"qid": "", "rank": 16, "path": "pydantic/deprecated/tools.py", "score": 0.0748832765843391, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 17, "path": "pydantic/json_schema.py", "score": 0.0712544412160193, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import inspect import math import re import warnings from collections import defaultdict from copy import deepcopy from dataclasse..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_model_construction.py", "score": 0.06988247413410081, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 19, "path": "pydantic/warnings.py", "score": 0.06755713943966463, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 20, "path": "tests/test_construction.py", "score": 0.06672413413716245, "span_start": null, "span_end": null, "passage": "import pickle from typing import Any, List, Optional import pytest from pydantic core import Pydantic Undefined, Validation Error from pydantic import Alias Choices, Alias Path, Base Model, Config Dic..."}], "latency_ms": 3.495454788208008, "gold_paths": ["pydantic/main.py", "pydantic/root_model.py", "pydantic/type_adapter.py"]}
{"qid": "lens_main_func_99821e95", "query": "Add support for field level number to str coercion option (#9137)", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.08345909926967007, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 2, "path": "pydantic/fields.py", "score": 0.08242761201004231, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 3, "path": "tests/test_titles.py", "score": 0.0822414202802758, "span_start": null, "span_end": null, "passage": "...mport pytest import typing extensions import pydantic from pydantic import Base Model, Config Dict, Field, Type Adapter, computed field from pydantic.fields import Field Info from pydantic.json schema..."}, {"qid": "", "rank": 4, "path": "pydantic/dataclasses.py", "score": 0.0690667881133391, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_model_construction.py", "score": 0.0583612211319216, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 6, "path": "pydantic/deprecated/class_validators.py", "score": 0.05788687269956499, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 7, "path": "tests/test_fields.py", "score": 0.05714441252997138, "span_start": null, "span_end": null, "passage": "...mport Union import pytest import pydantic.dataclasses from pydantic import Base Model, Config Dict, Field, Pydantic User Error, Root Model, Validation Error, computed field, fields def test field info..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_config.py", "score": 0.05337922093596258, "span_start": null, "span_end": null, "passage": "...port core schema from typing extensions import ( Literal, Self, ) from ..aliases import Alias Generator from ..config import Config Dict, Extra Values, Json Dict, Json Encoder, Json Schema Extra Calla..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/schema.py", "score": 0.05242333696177801, "span_start": null, "span_end": null, "passage": "...ime import date, datetime, time, timedelta from decimal import Decimal from enum import Enum from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/utils.py", "score": 0.051364855481829445, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, ..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/types.py", "score": 0.05025435781730619, "span_start": null, "span_end": null, "passage": "...ort new class from typing import ( TYPE CHECKING, Any, Callable, Class Var, Dict, Frozen Set, List, Optional, Pattern, Set, Tuple, Type, Type Var, Union, cast, overload, ) from uuid import UUID from w..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_fields.py", "score": 0.04929065316444811, "span_start": null, "span_end": null, "passage": "... here is fetching global namespace from `obj.  module  ` if it is not `None`. Args: obj: The object to get its type hints. localns: The local namespaces. include extras: Whether to recursively include..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/annotated_types.py", "score": 0.04853442896942215, "span_start": null, "span_end": null, "passage": "...ort sys from typing import TYPE CHECKING, Any, Dict, Frozen Set, Named Tuple, Type from pydantic.v1.fields import Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typing..."}, {"qid": "", "rank": 14, "path": "tests/test_annotated.py", "score": 0.046617131348079564, "span_start": null, "span_end": null, "passage": "... as dt import sys from dataclasses import dataclass from typing import Any, Callable, Generic, Iterator, List, Optional, Set, Type Var import pytest import pytz from annotated types import Base Metada..."}, {"qid": "", "rank": 15, "path": "tests/test_config.py", "score": 0.04543814275654144, "span_start": null, "span_end": null, "passage": "...from inspect import signature from typing import Any, Context Manager, Dict, Iterable, Named Tuple, Optional, Tuple, Type, Union from dirty equals import Has Repr, Is Partial Dict from pydantic core i..."}, {"qid": "", "rank": 16, "path": "pydantic/types.py", "score": 0.04429547160754479, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 17, "path": "tests/mypy/modules/plugin_default_factory.py", "score": 0.04419343707080979, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_default_factory.py", "score": 0.04419343707080979, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_default_factory.py", "score": 0.04419343707080979, "span_start": null, "span_end": null, "passage": "from typing import Dict, List from pydantic import Base Model, Field def new list() -> List[int]: return [] class Model(Base Model): l1: List[str] = Field(default factory=list) l2: List[int] = Field(d..."}, {"qid": "", "rank": 20, "path": "tests/test_types_payment_card_number.py", "score": 0.04353657228277038, "span_start": null, "span_end": null, "passage": "...ctions import namedtuple from typing import Any import pytest from pydantic core import Pydantic Custom Error from pydantic import Base Model, Validation Error from pydantic.types import Payment Card ..."}], "latency_ms": 5.409955978393555, "gold_paths": ["pydantic/_internal/_known_annotated_metadata.py", "pydantic/fields.py", "tests/test_fields.py"]}
{"qid": "lens_main_func_a01b9029", "query": "Updating JSON docs, adding `cache_strings` to `ConfigDict` (#9178)", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_config.py", "score": 0.18454222826445443, "span_start": null, "span_end": null, "passage": "...port core schema from typing extensions import ( Literal, Self, ) from ..aliases import Alias Generator from ..config import Config Dict, Extra Values, Json Dict, Json Encoder, Json Schema Extra Calla..."}, {"qid": "", "rank": 2, "path": "pydantic/config.py", "score": 0.16393339858720818, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/with_config_decorator.py", "score": 0.16258434152544804, "span_start": null, "span_end": null, "passage": "...typing import Typed Dict from pydantic import Config Dict, with config @with config(Config Dict(str to lower=True)) class Model(Typed Dict): a: str model = Model(a='ABC')"}, {"qid": "", "rank": 4, "path": "tests/test_config.py", "score": 0.1417716779758336, "span_start": null, "span_end": null, "passage": "import json import re import sys from contextlib import nullcontext as does not raise from decimal import Decimal from inspect import signature from typing import Any, Context Manager, Dict, Iterable,..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/config.py", "score": 0.14057249088090026, "span_start": null, "span_end": null, "passage": "import json from enum import Enum from typing import TYPE CHECKING, Any, Callable, Dict, Forward Ref, Optional, Tuple, Type, Union from typing extensions import Literal, Protocol from pydantic.v1.typi..."}, {"qid": "", "rank": 6, "path": "tests/test_docs_extraction.py", "score": 0.13459645132898868, "span_start": null, "span_end": null, "passage": "...ydantic config   = Config Dict(use attribute docstrings=True) ta = Type Adapter(My Model) assert ta.json schema() == { 'properties': {'a': {'title': 'A', 'type': 'integer', 'description': 'A docs'}}, ..."}, {"qid": "", "rank": 7, "path": "tests/mypy/modules/config_conditional_extra.py", "score": 0.12439893626578358, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Config Dict def condition() -> bool: return True class My Model(Base Model): model config = Config Dict(extra='ignore' if condition() else 'forbid')"}, {"qid": "", "rank": 8, "path": "pydantic/type_adapter.py", "score": 0.1015096331336071, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/error_wrappers.py", "score": 0.09597280824253901, "span_start": null, "span_end": null, "passage": "import json from typing import TYPE CHECKING, Any, Dict, Generator, List, Optional, Sequence, Tuple, Type, Union from pydantic.v1.json import pydantic encoder from pydantic.v1.utils import Representat..."}, {"qid": "", "rank": 10, "path": "tests/test_generics.py", "score": 0.09154145225233142, "span_start": null, "span_end": null, "passage": "import gc import itertools import json import platform import re import sys from collections import deque from enum import Enum, Int Enum from typing import ( Any, Callable, Class Var, Counter, Defaul..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_generics.py", "score": 0.08809046834621899, "span_start": null, "span_end": null, "passage": "...vars import Context Var from types import prepare class from typing import TYPE CHECKING, Any, Iterator, List, Mapping, Mutable Mapping, Tuple, Type Var from weakref import Weak Value Dictionary impor..."}, {"qid": "", "rank": 12, "path": "tests/test_type_adapter.py", "score": 0.08549768670529954, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp..."}, {"qid": "", "rank": 13, "path": "tests/test_json_schema.py", "score": 0.084662247296336, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 14, "path": "pydantic/json_schema.py", "score": 0.08028016473126105, "span_start": null, "span_end": null, "passage": "...on, cast, ) import pydantic core from pydantic core import Core Schema, Pydantic Omit, core schema, to jsonable python from pydantic core.core schema import Computed Field from typing extensions impor..."}, {"qid": "", "rank": 15, "path": "tests/test_fastapi_json_schema.py", "score": 0.07653512716341702, "span_start": null, "span_end": null, "passage": ".... internal. core utils import Core Schema Or Field from pydantic.errors import Pydantic Invalid For Json Schema from pydantic.json schema import Generate Json Schema, Json Schema Value class  Error Ke..."}, {"qid": "", "rank": 16, "path": "tests/mypy/modules/no_strict_optional.py", "score": 0.07265051771343815, "span_start": null, "span_end": null, "passage": "...Base Model, Config Dict class Mongo Settings(Base Model): MONGO PASSWORD: Union[str, None] class Custom Base Model(Base Model): model config = Config Dict( validate assignment=True, validate default=T..."}, {"qid": "", "rank": 17, "path": "tests/test_json.py", "score": 0.0705195402741679, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/main.py", "score": 0.06883359560876971, "span_start": null, "span_end": null, "passage": "import warnings from abc import ABCMeta from copy import deepcopy from enum import Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve b..."}, {"qid": "", "rank": 19, "path": "pydantic/plugin/__init__.py", "score": 0.06812048940095948, "span_start": null, "span_end": null, "passage": "...ic core import Core Config, Core Schema, Validation Error from typing extensions import Literal, Protocol, Type Alias   all   = ( 'Pydantic Plugin Protocol', 'Base Validate Handler Protocol', 'Validat..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_utils.py", "score": 0.06699375039150979, "span_start": null, "span_end": null, "passage": "...weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generato..."}], "latency_ms": 6.185054779052734, "gold_paths": ["pydantic/_internal/_config.py", "pydantic/config.py"]}
{"qid": "lens_main_func_a7d32534", "query": "Fix allow extra generic (#9193)", "results": [{"qid": "", "rank": 1, "path": "pydantic/deprecated/config.py", "score": 0.10835115333830952, "span_start": null, "span_end": null, "passage": "...0 if not TYPE CHECKING: Deprecation Warning = Pydantic Deprecated Since20   all   = 'Base Config', 'Extra' class  Config Metaclass(type): def   getattr  (self, item: str) -> Any: try: obj =  config.co..."}, {"qid": "", "rank": 2, "path": "tests/test_generics.py", "score": 0.09133991405736476, "span_start": null, "span_end": null, "passage": "...Enum from typing import ( Any, Callable, Class Var, Counter, Default Dict, Deque, Dict, Frozen Set, Generic, Iterable, List, Mapping, Named Tuple, Optional, Ordered Dict, Sequence, Set, Tuple, Type, T..."}, {"qid": "", "rank": 3, "path": "tests/test_model_signature.py", "score": 0.0900719097283864, "span_start": null, "span_end": null, "passage": "import sys from inspect import Parameter, Signature, signature from typing import Any, Generic, Iterable, Optional, Type Var, Union import pytest from typing extensions import Annotated from pydantic ..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/config.py", "score": 0.08961662963673049, "span_start": null, "span_end": null, "passage": "... Model Field from pydantic.v1.main import Base Model Config Type = Type['Base Config'] class Schema Extra Callable(Protocol): @overload def   call  (self, schema: Dict[str, Any]) -> None: pass @overlo..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_generics.py", "score": 0.07470901380001914, "span_start": null, "span_end": null, "passage": "...rom . core utils import get type ref from . forward ref import Pydantic Recursive Ref from . typing extra import Type Var Type, typing base from . utils import all identical, is model class if sys.ver..."}, {"qid": "", "rank": 6, "path": "tests/mypy/modules/covariant_typevar.py", "score": 0.074673761699738, "span_start": null, "span_end": null, "passage": "from typing import Generic, Type Var from pydantic import Base Model T = Type Var(\"T\", covariant=True) class Foo(Base Model, Generic[T]): value: T class Bar(Foo[T]): ..."}, {"qid": "", "rank": 7, "path": "pydantic/main.py", "score": 0.0644799349371267, "span_start": null, "span_end": null, "passage": ".... This replaces `Model.  validators  ` and `Model.  root validators  ` from Pydantic V1.   pydantic generic metadata  : Metadata for generic models; contains data used for a similar purpose to   args ..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/generics.py", "score": 0.05438404915645986, "span_start": null, "span_end": null, "passage": "...s import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weakref impor..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 14, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.04481975909325998, "span_start": null, "span_end": null, "passage": "from typing import Any, Generic, List, Optional, Set, Type Var, Union from pydantic import Base Model, Extra, Field, field validator from pydantic.dataclasses import dataclass class Model(Base Model):..."}], "latency_ms": 5.048274993896484, "gold_paths": ["pydantic/_internal/_generate_schema.py", "tests/test_generics.py"]}
{"qid": "lens_main_func_fc0cb917", "query": "fix `model_construct` with `validation_alias` (#9144)", "results": [{"qid": "", "rank": 1, "path": "tests/test_aliases.py", "score": 0.32423456439668996, "span_start": null, "span_end": null, "passage": "... data def test alias generator wrong type error(): def return bytes(string): return b'not a string' with pytest.raises(Type Error) as e: class My Model(Base Model): model config = Config Dict(alias ge..."}, {"qid": "", "rank": 2, "path": "pydantic/aliases.py", "score": 0.215623186870047, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat"}, {"qid": "", "rank": 3, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 4, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 5, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 6, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 7, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 8, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 10, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 14, "path": "tests/mypy/modules/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail.py", "score": 0.14794882033808374, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.1438313391328314, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.1438313391328314, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.1438313391328314, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.1438313391328314, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.1438313391328314, "span_start": null, "span_end": null, "passage": "...ist) l : str = Field(default factory=3) m: int = Field(default=1, default factory=list) class Model With Annotated Validator(Base Model): name: str @field validator('name') def noop validator with ann..."}], "latency_ms": 6.693840026855469, "gold_paths": ["pydantic/main.py", "tests/test_construction.py"]}
{"qid": "lens_main_func_b900fe2c", "query": "WIP: add feedback widget to docs with flarelytics integration (#9129)", "results": [{"qid": "", "rank": 1, "path": "docs/extra/feedback.js", "score": 0.5999562432370977, "span_start": null, "span_end": null, "passage": "var feedback = document.forms.feedback feedback.hidden = false feedback.add Event Listener(\"submit\", function(ev) { ev.prevent Default() var data = ev.submitter.get Attribute(\"data-md-value\") feedback..."}, {"qid": "", "rank": 2, "path": "tests/test_docs_extraction.py", "score": 0.0976722041526484, "span_start": null, "span_end": null, "passage": "...t dataclass as pydantic dataclass T = Type Var('T') def dec noop(obj): return obj def test model no docs extraction(): class My Model(Base Model): a: int = 1 assert My Model.model fields['a'].descript..."}, {"qid": "", "rank": 3, "path": "pydantic/config.py", "score": 0.08614035740063944, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 4, "path": "pydantic/deprecated/class_validators.py", "score": 0.07816895538085931, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 5, "path": "pydantic/dataclasses.py", "score": 0.07755103770239405, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 6, "path": "tests/test_docs.py", "score": 0.05812980463634203, "span_start": null, "span_end": null, "passage": "...ple, Eval Example, find examples from pydantic.errors import Pydantic Error Codes INDEX MAIN = None DOCS ROOT = Path(  file  ).parent.parent / 'docs' SOURCES ROOT = Path(  file  ).parent.parent / 'pyd..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.057254898582135325, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 8, "path": "docs/plugins/griffe_doclinks.py", "score": 0.052678386004453716, "span_start": null, "span_end": null, "passage": "import ast import re from functools import partial from pathlib import Path from typing import Tuple from griffe.dataclasses import Object as Griffe Object from griffe.extensions import Visitor Extens..."}, {"qid": "", "rank": 9, "path": "tests/mypy/modules/with_config_decorator.py", "score": 0.05016491803055062, "span_start": null, "span_end": null, "passage": "from typing import Typed Dict from pydantic import Config Dict, with config @with config(Config Dict(str to lower=True)) class Model(Typed Dict): a: str model = Model(a='ABC')"}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_validators.py", "score": 0.038267458573208665, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import math import re import typing from ipaddress import IPv4Address, IPv4Interface, IPv4Network, IPv6Address, IPv6Interface, IPv6Network from typin..."}, {"qid": "", "rank": 11, "path": "pydantic/alias_generators.py", "score": 0.03623014906287295, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 12, "path": "pydantic/validate_call_decorator.py", "score": 0.03620117450022526, "span_start": null, "span_end": null, "passage": "...hat validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate call(...)`. Args: func: The function to be decorat..."}, {"qid": "", "rank": 13, "path": "pydantic/fields.py", "score": 0.03592201296574733, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_serializers.py", "score": 0.035676418515601896, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 15, "path": "tests/test_utils.py", "score": 0.03542828138784778, "span_start": null, "span_end": null, "passage": "...ype Var, Union import pytest from dirty equals import Is List from pydantic core import Pydantic Custom Error, Pydantic Undefined, core schema from typing extensions import Annotated, Literal from pyd..."}, {"qid": "", "rank": 16, "path": "pydantic/types.py", "score": 0.03495542251328867, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_dataclasses.py", "score": 0.03464198749974335, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic decorators  : Metadata containing th..."}, {"qid": "", "rank": 18, "path": "docs/plugins/main.py", "score": 0.03273117277442598, "span_start": null, "span_end": null, "passage": "...g import os import re import textwrap from pathlib import Path from textwrap import indent import autoflake import pyupgrade. main as pyupgrade main  # type: ignore import tomli import yaml from jinja..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_typing_extra.py", "score": 0.032013679187603124, "span_start": null, "span_end": null, "passage": "... = sys. getframe(parent depth) if frame.f back is None: return None else: return frame.f locals def add module globals(obj: Any, globalns: dict[str, Any] | None = None) -> dict[str, Any]: module name ..."}, {"qid": "", "rank": 20, "path": "pydantic/json_schema.py", "score": 0.03136410215442476, "span_start": null, "span_end": null, "passage": "...on, cast, ) import pydantic core from pydantic core import Core Schema, Pydantic Omit, core schema, to jsonable python from pydantic core.core schema import Computed Field from typing extensions impor..."}], "latency_ms": 4.340410232543945, "gold_paths": ["docs/extra/feedback.js"]}
{"qid": "lens_main_func_3ad2018f", "query": "Remove `update_json_schema` (bad practice func) (#9125)", "results": [{"qid": "", "rank": 1, "path": "tests/test_fastapi_json_schema.py", "score": 0.31397446900572906, "span_start": null, "span_end": null, "passage": "from   future   import annotations from dataclasses import dataclass from typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pyd"}, {"qid": "", "rank": 2, "path": "pydantic/annotated_handlers.py", "score": 0.30507585819692695, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w"}, {"qid": "", "rank": 3, "path": "pydantic/json_schema.py", "score": 0.2836425634886487, "span_start": null, "span_end": null, "passage": "...ferenced schema, but this is not how the official JSON schema spec works. Because of this, we first remove any sibling keys that are redundant with the referenced schema, then if any remain, we transf..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.279079585807335, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import collections import collections.abc import dataclasses import decimal import inspect import os import typing from enum import Enum from functoo"}, {"qid": "", "rank": 5, "path": "tests/test_json_schema.py", "score": 0.2779203427660826, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor"}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_generate_schema.py", "score": 0.2148214338165091, "span_start": null, "span_end": null, "passage": "...bj, '  get validators  ', None)) is not None: warn( '`  get validators  ` is deprecated and will be removed, use `  get pydantic core schema  ` instead.', Pydantic Deprecated Since20, ) schema = core ..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.2120865806825222, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge"}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_core_utils.py", "score": 0.19158744127887523, "span_start": null, "span_end": null, "passage": "from   future   import annotations import os from collections import defaultdict from typing import ( Any, Callable, Hashable, Type Var, Union, ) from pydantic core import Core Schema, core schema fro"}, {"qid": "", "rank": 9, "path": "pydantic/deprecated/tools.py", "score": 0.15166812836006394, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import"}, {"qid": "", "rank": 10, "path": "pydantic/types.py", "score": 0.14921986623848157, "span_start": null, "span_end": null, "passage": "...ler ) -> Json Schema Value: field schema = handler(core schema) field schema.pop('any Of', None)  # remove the bytes/str union field schema.update(type='string', format=f'uuid{self.uuid version}') ret..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_known_annotated_metadata.py", "score": 0.14708776659987302, "span_start": null, "span_end": null, "passage": "from   future   import annotations from collections import defaultdict from copy import copy from functools import partial from typing import TYPE CHECKING, Any, Callable, Iterable from pydantic core "}, {"qid": "", "rank": 12, "path": "tests/test_parse.py", "score": 0.14634247794139715, "span_start": null, "span_end": null, "passage": "from typing import List, Tuple import pytest from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydant"}, {"qid": "", "rank": 13, "path": "pydantic/type_adapter.py", "score": 0.1372075097011034, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ"}, {"qid": "", "rank": 14, "path": "tests/test_json.py", "score": 0.13317512757801866, "span_start": null, "span_end": null, "passage": "import json import math import re import sys from dataclasses import dataclass as vanilla dataclass from datetime import date, datetime, time, timedelta, timezone from decimal import Decimal from enum"}, {"qid": "", "rank": 15, "path": "pydantic/v1/schema.py", "score": 0.1098210962786796, "span_start": null, "span_end": null, "passage": "...e in attrs) if attr is not None } if kwargs: constraint func = cast(Callable[..., type], constraint func) return constraint func(**kwargs) return type  return go(annotation), used constraints def norm..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_core_metadata.py", "score": 0.10304035508633402, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import typing from typing import Any import typing extensions if typing.TYPE CHECKING: from . schema generation shared import ( Core Schema Or Field "}, {"qid": "", "rank": 17, "path": "tests/test_utils.py", "score": 0.09806004223525978, "span_start": null, "span_end": null, "passage": "import collections.abc import json import os import pickle import sys from copy import copy, deepcopy from typing import Callable, Dict, Generic, List, New Type, Tuple, Type Var, Union import pytest f"}, {"qid": "", "rank": 18, "path": "pydantic/plugin/_schema_validator.py", "score": 0.0962793697947754, "span_start": null, "span_end": null, "passage": "...uple(h.on exception for h in event handlers if filter handlers(h, 'on exception')) @functools.wraps(func) def wrapper(*args: P.args, **kwargs: P.kwargs) -> R: for on enter handler in on enters: on ent..."}, {"qid": "", "rank": 19, "path": "tests/test_internal.py", "score": 0.09467886972248679, "span_start": null, "span_end": null, "passage": "...lify schema references, walk core schema, ) from pydantic. internal. repr import Representation def remove metadata(schema: Core Schema) -> Core Schema: def inner(s: Core Schema, recurse: Walk) -> Cor..."}, {"qid": "", "rank": 20, "path": "pydantic/networks.py", "score": 0.09199089501685945, "span_start": null, "span_end": null, "passage": "Attributes: max length: The maximum length of the url. Defaults to `None`. allowed schemes: The allowed schemes. Defaults to `None`. host required: Whether the host is required. Defaults to `None`. de"}], "latency_ms": 3.2341480255126953, "gold_paths": ["pydantic/_internal/_std_types_schema.py", "pydantic/json_schema.py"]}
{"qid": "lens_main_func_7ac7881f", "query": "Fix discriminated union bug with unsubstituted type var (#9124)", "results": [{"qid": "", "rank": 1, "path": "tests/test_discriminated_union.py", "score": 0.11074573903105944, "span_start": null, "span_end": null, "passage": "import re import sys from enum import Enum, Int Enum from types import Simple Namespace from typing import Any, Callable, Generic, List, Optional, Sequence, Type Var, Union import pytest from dirty eq..."}, {"qid": "", "rank": 2, "path": "tests/mypy/modules/covariant_typevar.py", "score": 0.10938304120044345, "span_start": null, "span_end": null, "passage": "from typing import Generic, Type Var from pydantic import Base Model T = Type Var(\"T\", covariant=True) class Foo(Base Model, Generic[T]): value: T class Bar(Foo[T]): ..."}, {"qid": "", "rank": 3, "path": "tests/test_generics.py", "score": 0.09992080008593626, "span_start": null, "span_end": null, "passage": "... collections import deque from enum import Enum, Int Enum from typing import ( Any, Callable, Class Var, Counter, Default Dict, Deque, Dict, Frozen Set, Generic, Iterable, List, Mapping, Named Tuple, ..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/generics.py", "score": 0.09900033617098916, "span_start": null, "span_end": null, "passage": "import sys import types import typing from typing import ( TYPE CHECKING, Any, Class Var, Dict, Forward Ref, Generic, Iterator, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, ) from weak..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/typing.py", "score": 0.09869265209327467, "span_start": null, "span_end": null, "passage": "...import typing from collections.abc import Callable from os import Path Like from typing import (  # type: ignore TYPE CHECKING, Abstract Set, Any, Callable as Typing Callable, Class Var, Dict, Forward..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_generics.py", "score": 0.0967795723803106, "span_start": null, "span_end": null, "passage": "from   future   import annotations import sys import types import typing from collections import Chain Map from contextlib import contextmanager from contextvars import Context Var from types import p..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/tools.py", "score": 0.08644761532413917, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/utils.py", "score": 0.07806286190822223, "span_start": null, "span_end": null, "passage": "...d Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Ty..."}, {"qid": "", "rank": 9, "path": "tests/test_type_alias_type.py", "score": 0.07252402447230555, "span_start": null, "span_end": null, "passage": "import datetime from dataclasses import dataclass from typing import Dict, Generic, List, Tuple, Type Var, Union import pytest from annotated types import Max Len from typing extensions import Annotat..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/mypy.py", "score": 0.07238141666833561, "span_start": null, "span_end": null, "passage": "...nfigparser import Config Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes import ( ARG NAMED..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_utils.py", "score": 0.07194245212423073, "span_start": null, "span_end": null, "passage": "...t Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Ty..."}, {"qid": "", "rank": 12, "path": "tests/test_typing.py", "score": 0.06324446943664418, "span_start": null, "span_end": null, "passage": "import sys import typing from collections import namedtuple from typing import Callable, Class Var, Forward Ref, Named Tuple import pytest from typing extensions import Literal, get origin from pydant..."}, {"qid": "", "rank": 13, "path": "pydantic/mypy.py", "score": 0.06306581092722365, "span_start": null, "span_end": null, "passage": "... than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy plugin type. def   init  (self, options: Options) -> None: self.plugin config = Pydantic Plugin Config(opti..."}, {"qid": "", "rank": 14, "path": "pydantic/deprecated/tools.py", "score": 0.06145303886335938, "span_start": null, "span_end": null, "passage": "from   future   import annotations import json import warnings from typing import TYPE CHECKING, Any, Callable, Type, Type Var, Union from typing extensions import deprecated from ..json schema import..."}, {"qid": "", "rank": 15, "path": "pydantic/deprecated/decorator.py", "score": 0.05646116159480455, "span_start": null, "span_end": null, "passage": "import warnings from functools import wraps from typing import TYPE CHECKING, Any, Callable, Dict, List, Mapping, Optional, Tuple, Type, Type Var, Union, overload from typing extensions import depreca..."}, {"qid": "", "rank": 16, "path": "tests/mypy/modules/generics.py", "score": 0.055189636524255084, "span_start": null, "span_end": null, "passage": "from typing import Any, Dict, Generic, Optional, Type Var from pydantic import Base Model Tbody = Type Var('Tbody') class Response(Base Model, Generic[Tbody]): url: str body: Tbody class Json Body(Bas..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_forward_ref.py", "score": 0.05300699892732233, "span_start": null, "span_end": null, "passage": "...   future   import annotations as  annotations from dataclasses import dataclass from typing import Union @dataclass class Pydantic Recursive Ref: type ref: str   name   = 'Pydantic Recursive Ref'   h..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/fields.py", "score": 0.05234149003462151, "span_start": null, "span_end": null, "passage": "...t Callable, Hashable as Collections Hashable, Iterable as Collections Iterable from typing import ( TYPE CHECKING, Any, Counter, Default Dict, Deque, Dict, Forward Ref, Frozen Set, Generator, Iterable..."}, {"qid": "", "rank": 19, "path": "tests/mypy/modules/fail3.py", "score": 0.05159459749130413, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/pyproject-default_toml/fail3.py", "score": 0.05159459749130413, "span_start": null, "span_end": null, "passage": "from typing import Generic, List, Type Var from pydantic import Base Model T = Type Var('T') class Model(Base Model): list of ints: List[int] class Wrapper Model(Base Model, Generic[T]): payload: T mo..."}], "latency_ms": 3.780364990234375, "gold_paths": ["pydantic/_internal/_generate_schema.py", "tests/test_discriminated_union.py"]}
{"qid": "lens_main_func_548feec7", "query": "Add benchmark decorators (#9123)", "results": [{"qid": "", "rank": 1, "path": "tests/benchmarks/basemodel_eq_performance.py", "score": 0.14594926715436216, "span_start": null, "span_end": null, "passage": "... Path, 'itemgetter+fastpath+safe-fallback': Item Getter Eq Model Fast Path Fallback, } def plot all benchmark( bases: dict[str, type[pydantic.Base Model]], sizes: list[int], ) -> figure.Figure: import..."}, {"qid": "", "rank": 2, "path": "tests/benchmarks/test_north_star.py", "score": 0.11932973250692762, "span_start": null, "span_end": null, "passage": "...bytes() return data def test north star validate json(pydantic type adapter, north star data bytes, benchmark): benchmark(pydantic type adapter.validate json, north star data bytes) def test north sta..."}, {"qid": "", "rank": 3, "path": "pydantic/functional_validators.py", "score": 0.06658843392536695, "span_start": null, "span_end": null, "passage": "...his is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields: Additional field(s) the `field validator` should be called on. mode: Specifies whether to validate t..."}, {"qid": "", "rank": 4, "path": "tests/benchmarks/test_discriminated_unions.py", "score": 0.05222950506790701, "span_start": null, "span_end": null, "passage": "...d[Union[Nested State, Loop State, Leaf State], Field(..., discriminator='state type')] @pytest.mark.benchmark def test schema build() -> None: adapter = Type Adapter(Any State) assert adapter.core sch..."}, {"qid": "", "rank": 5, "path": "tests/benchmarks/test_schema_build.py", "score": 0.051604096936070556, "span_start": null, "span_end": null, "passage": "...ss Nested Model(Base Model): animal: Annotated[Union[Cat, Dog], Discriminator('type')] @pytest.mark.benchmark def test construct schema(): @dataclass(frozen=True, kw only=True) class Root: data class:..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_dataclasses.py", "score": 0.0364752512112369, "span_start": null, "span_end": null, "passage": "...ma  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic decorators  : Metadata containing the decorators defined on the dataclass.   pydantic fields  : Meta..."}, {"qid": "", "rank": 7, "path": "pydantic/main.py", "score": 0.02227179953846331, "span_start": null, "span_end": null, "passage": "...erializer.   pydantic custom init  : Whether the model has a custom `  init  ` function.   pydantic decorators  : Metadata containing the decorators defined on the model. This replaces `Model.  valida..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_fields.py", "score": 0.01754639577513792, "span_start": null, "span_end": null, "passage": "...rotected namespaces'] = {valid namespaces}`.\", User Warning, ) if is classvar(ann type): class vars.add(ann name) continue if  is finalvar with default val(ann type, getattr(cls, ann name, Pydantic Un..."}, {"qid": "", "rank": 9, "path": "docs/extra/feedback.js", "score": 0.01664217353672353, "span_start": null, "span_end": null, "passage": "var feedback = document.forms.feedback feedback.hidden = false feedback.add Event Listener(\"submit\", function(ev) { ev.prevent Default() var data = ev.submitter.get Attribute(\"data-md-value\") feedback..."}, {"qid": "", "rank": 10, "path": "docs/plugins/main.py", "score": 0.013898322262999776, "span_start": null, "span_end": null, "passage": "...DOCS DIR = THIS DIR.parent PROJECT ROOT = DOCS DIR.parent def on pre build(config: Config) -> None: add changelog() add mkdocs run deps() def on files(files: Files, config: Config) -> Files: return fi..."}, {"qid": "", "rank": 11, "path": "pydantic/mypy.py", "score": 0.011978864613727621, "span_start": null, "span_end": null, "passage": "...turn False is settings = any(base.fullname == BASESETTINGS FULLNAME for base in info.mro[:-1]) self.add initializer(fields, config, is settings, is root model) if not is root model: self.add model con..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/mypy.py", "score": 0.011100871822708299, "span_start": null, "span_end": null, "passage": "...nfig) is settings = any(get fullname(base) == BASESETTINGS FULLNAME for base in info.mro[:-1]) self.add initializer(fields, config, is settings) self.add construct method(fields) self.set frozen(field..."}, {"qid": "", "rank": 13, "path": "pydantic/fields.py", "score": 0.010100922447289966, "span_start": null, "span_end": null, "passage": "...xpected arguments. Args: default: The default value for the field. Defaults to Undefined. **kwargs: Additional arguments dictionary. Raises: Type Error: If 'annotation' is passed as a keyword argument..."}, {"qid": "", "rank": 14, "path": "tests/test_create_model.py", "score": 0.010058304489266976, "span_start": null, "span_end": null, "passage": "...ame   == 'Foo Model' assert model.model fields.keys() == {'foo', 'bar'} assert not model.  pydantic decorators  .validators assert not model.  pydantic decorators  .root validators assert not model.  ..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_generate_schema.py", "score": 0.010013295680464999, "span_start": null, "span_end": null, "passage": "... ignores the check for a decorator if the decorator has `*` as field or `check fields=False`. Args: decorators: An iterable of decorators. fields: An iterable of fields name. Raises: Pydantic User Err..."}, {"qid": "", "rank": 16, "path": "tests/test_dataclasses.py", "score": 0.009870556027214136, "span_start": null, "span_end": null, "passage": "...}], 'default': None, 'title': 'The age of the user', 'description': 'do not lie!', }, 'aliases': { 'additional Properties': {'type': 'string'}, 'title': 'Aliases', 'type': 'object', }, 'height': { 'an..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_typing_extra.py", "score": 0.009687232455519282, "span_start": null, "span_end": null, "passage": "... = sys. getframe(parent depth) if frame.f back is None: return None else: return frame.f locals def add module globals(obj: Any, globalns: dict[str, Any] | None = None) -> dict[str, Any]: module name ..."}, {"qid": "", "rank": 18, "path": "tests/test_decorators.py", "score": 0.008434626622966462, "span_start": null, "span_end": null, "passage": "import pytest from pydantic import Pydantic User Error from pydantic. internal. decorators import inspect annotated serializer, inspect validator def  two pos required args(a, b): pass def  two pos re..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_model_construction.py", "score": 0.008198015153571719, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 20, "path": "pydantic/json_schema.py", "score": 0.007494284556489583, "span_start": null, "span_end": null, "passage": "... import Pydantic Deprecated Since26 from . internal import (  config,  core metadata,  core utils,  decorators,  internal dataclass,  mock val ser,  schema generation shared,  typing extra, ) from .an..."}], "latency_ms": 3.547191619873047, "gold_paths": ["tests/benchmarks/test_discriminated_unions.py", "tests/benchmarks/test_schema_build.py"]}
{"qid": "lens_main_func_3259d7c2", "query": "Add benchmark for schema build time with nested dataclass and model (#9121)", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_generate_schema.py", "score": 0.15338322688041953, "span_start": null, "span_end": null, "passage": "...heck. Returns: `True` if field name is in validator fields, `False` otherwise. It ignores the check for a decorator if the decorator has `*` as field or `check fields=False`. Args: decorators: An iter..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_core_utils.py", "score": 0.15144045613583032, "span_start": null, "span_end": null, "passage": "...ict from typing import ( Any, Callable, Hashable, Type Var, Union, ) from pydantic core import Core Schema, core schema from pydantic core import validate core schema as  validate core schema from typ..."}, {"qid": "", "rank": 3, "path": "tests/test_json_schema.py", "score": 0.14567248920754236, "span_start": null, "span_end": null, "passage": "import dataclasses import importlib.metadata import json import math import re import sys import typing from datetime import date, datetime, time, timedelta from decimal import Decimal from enum impor..."}, {"qid": "", "rank": 4, "path": "tests/test_parse.py", "score": 0.14268529541027172, "span_start": null, "span_end": null, "passage": "from typing import List, Tuple import pytest from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydant..."}, {"qid": "", "rank": 5, "path": "tests/benchmarks/test_discriminated_unions.py", "score": 0.1369147690244563, "span_start": null, "span_end": null, "passage": "...port Literal, Union import pytest from typing extensions import Annotated from pydantic import Base Model, Field, Type Adapter class Nested State(Base Model): state type: Literal['nested'] substate: A..."}, {"qid": "", "rank": 6, "path": "tests/test_fastapi_json_schema.py", "score": 0.13026629029511042, "span_start": null, "span_end": null, "passage": "from   future   import annotations from dataclasses import dataclass from typing import Any from dirty equals import Has Repr, Is Instance, Is Str from pydantic import Base Model, Config Dict from pyd..."}, {"qid": "", "rank": 7, "path": "tests/test_config.py", "score": 0.12907761749027724, "span_start": null, "span_end": null, "passage": "...al, Tuple, Type, Union from dirty equals import Has Repr, Is Partial Dict from pydantic core import Schema Error, Schema Serializer, Schema Validator from pydantic import ( Base Config, Base Model, Fi..."}, {"qid": "", "rank": 8, "path": "tests/benchmarks/test_schema_build.py", "score": 0.12199467080670494, "span_start": null, "span_end": null, "passage": "...port Literal, Union import pytest from typing extensions import Annotated from pydantic import Base Model, Discriminator from pydantic.dataclasses import dataclass @dataclass(frozen=True, kw only=True..."}, {"qid": "", "rank": 9, "path": "pydantic/v1/schema.py", "score": 0.1214305984874209, "span_start": null, "span_end": null, "passage": "import re import warnings from collections import defaultdict from dataclasses import is dataclass from datetime import date, datetime, time, timedelta from decimal import Decimal from enum import Enu..."}, {"qid": "", "rank": 10, "path": "tests/benchmarks/basemodel_eq_performance.py", "score": 0.1213267273540159, "span_start": null, "span_end": null, "passage": "from   future   import annotations import dataclasses import enum import gc import itertools import operator import sys import textwrap import timeit from importlib import metadata from typing import ..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_std_types_schema.py", "score": 0.12024798898641571, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import collections import collections.abc import dataclasses import decimal import inspect import os import typing from enum import Enum from functoo..."}, {"qid": "", "rank": 12, "path": "pydantic/json_schema.py", "score": 0.11916809549505537, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import inspect import math import re import warnings from collections import defaultdict from copy import deepcopy from dataclasse..."}, {"qid": "", "rank": 13, "path": "pydantic/annotated_handlers.py", "score": 0.1161978505228483, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w..."}, {"qid": "", "rank": 14, "path": "tests/test_pickle.py", "score": 0.11549067011802742, "span_start": null, "span_end": null, "passage": "import dataclasses import gc import pickle from typing import Optional, Type import cloudpickle import pytest import pydantic from pydantic import Base Model, Positive Float, Validation Error from pyd..."}, {"qid": "", "rank": 15, "path": "pydantic/type_adapter.py", "score": 0.11327745170970088, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 16, "path": "pydantic/config.py", "score": 0.10983210554201987, "span_start": null, "span_end": null, "passage": "...], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] f..."}, {"qid": "", "rank": 17, "path": "tests/test_type_adapter.py", "score": 0.10748310585566083, "span_start": null, "span_end": null, "passage": "import json import sys from dataclasses import dataclass from datetime import date, datetime from typing import Any, Dict, Forward Ref, Generic, List, Named Tuple, Optional, Tuple, Type Var, Union imp..."}, {"qid": "", "rank": 18, "path": "pydantic/types.py", "score": 0.10570597406459513, "span_start": null, "span_end": null, "passage": "....pydantic.dev/2/v/greater than equal', } ] Strict Int = Annotated[int, Strict()] 1 validation error for Strict Int Model strict int Input should be a valid integer [type=int type, input value=3.14159,..."}, {"qid": "", "rank": 19, "path": "tests/test_dataclasses.py", "score": 0.10553171487820695, "span_start": null, "span_end": null, "passage": "import dataclasses import inspect import pickle import re import sys import traceback from collections.abc import Hashable from dataclasses import Init Var from datetime import date, datetime from pat..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_dataclasses.py", "score": 0.10112300870288378, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}], "latency_ms": 3.0100345611572266, "gold_paths": ["tests/benchmarks/test_schema_build.py"]}
{"qid": "lens_main_func_b9ec63fe", "query": "Ability to pass context to serialization (fix #7143) (#8965)", "results": [{"qid": "", "rank": 1, "path": "pydantic/config.py", "score": 0.17084936916671334, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 2, "path": "pydantic/deprecated/class_validators.py", "score": 0.15313306146854969, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 3, "path": "pydantic/dataclasses.py", "score": 0.14047525330877694, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 4, "path": "pydantic/functional_serializers.py", "score": 0.1346880546356017, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 5, "path": "pydantic/type_adapter.py", "score": 0.10977282193843982, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10952523746408299, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 7, "path": "pydantic/fields.py", "score": 0.08551149052508837, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 8, "path": "pydantic/plugin/__init__.py", "score": 0.07970905635576643, "span_start": null, "span_end": null, "passage": "...ic core import Core Config, Core Schema, Validation Error from typing extensions import Literal, Protocol, Type Alias   all   = ( 'Pydantic Plugin Protocol', 'Base Validate Handler Protocol', 'Validat..."}, {"qid": "", "rank": 9, "path": "pydantic/aliases.py", "score": 0.07085071813178745, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/mypy.py", "score": 0.07037686142898433, "span_start": null, "span_end": null, "passage": "...MED OPT, ARG OPT, ARG POS, ARG STAR2, MDEF, Argument, Assignment Stmt, Block, Call Expr, Class Def, Context, Decorator, Ellipsis Expr, Func Base, Func Def, Json Dict, Member Expr, Name Expr, Pass Stmt..."}, {"qid": "", "rank": 11, "path": "pydantic/alias_generators.py", "score": 0.06930613410794542, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 12, "path": "pydantic/types.py", "score": 0.06799374276193072, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_dataclasses.py", "score": 0.06626807489134288, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic decorators  : Metadata containing th..."}, {"qid": "", "rank": 14, "path": "tests/test_utils.py", "score": 0.06351704200293906, "span_start": null, "span_end": null, "passage": "...ype Var, Union import pytest from dirty equals import Is List from pydantic core import Pydantic Custom Error, Pydantic Undefined, core schema from typing extensions import Annotated, Literal from pyd..."}, {"qid": "", "rank": 15, "path": "pydantic/main.py", "score": 0.05986919343390744, "span_start": null, "span_end": null, "passage": "...ed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Schema Validator and Schema Serializer.   pydantic custom init  : Whether the model has..."}, {"qid": "", "rank": 16, "path": "pydantic/color.py", "score": 0.05469585733464342, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor..."}, {"qid": "", "rank": 17, "path": "pydantic/mypy.py", "score": 0.05422867008839119, "span_start": null, "span_end": null, "passage": "We might want to use this to print a warning if the mypy version being used is newer, or especially older, than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy p..."}, {"qid": "", "rank": 18, "path": "pydantic/json_schema.py", "score": 0.05409804295109521, "span_start": null, "span_end": null, "passage": "...on, cast, ) import pydantic core from pydantic core import Core Schema, Pydantic Omit, core schema, to jsonable python from pydantic core.core schema import Computed Field from typing extensions impor..."}, {"qid": "", "rank": 19, "path": "pydantic/validate_call_decorator.py", "score": 0.05236920648076434, "span_start": null, "span_end": null, "passage": "...hat validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate call(...)`. Args: func: The function to be decorat..."}, {"qid": "", "rank": 20, "path": "tests/test_aliases.py", "score": 0.05221778834386661, "span_start": null, "span_end": null, "passage": "from contextlib import nullcontext as does not raise from inspect import signature from typing import Any, Context Manager, List, Optional import pytest from dirty equals import Is Str from pydantic c..."}], "latency_ms": 2.6662349700927734, "gold_paths": ["pydantic/main.py", "pydantic/root_model.py", "tests/test_serialize.py"]}
{"qid": "lens_main_func_synthetic_0", "query": "authentication middleware", "results": [], "latency_ms": 2.585172653198242, "gold_paths": ["pydantic/class_validators.py"]}
{"qid": "lens_main_func_synthetic_1", "query": "error handling function", "results": [{"qid": "", "rank": 1, "path": "pydantic/v1/error_wrappers.py", "score": 0.19125063994648855, "span_start": null, "span_end": null, "passage": "...mport Model Or Dc from pydantic.v1.typing import Repr Args Loc = Tuple[Union[int, str], ...] class  Error Dict Required(Typed Dict): loc: Loc msg: str type: str class Error Dict( Error Dict Required, ..."}, {"qid": "", "rank": 2, "path": "tests/conftest.py", "score": 0.1788447567783391, "span_start": null, "span_end": null, "passage": "...rt sys import textwrap from dataclasses import dataclass from pathlib import Path from types import Function Type from typing import Any, Optional import pytest from  pytest.assertion.rewrite import A..."}, {"qid": "", "rank": 3, "path": "pydantic/v1/errors.py", "score": 0.17037974401062708, "span_start": null, "span_end": null, "passage": "...ay as type if TYPE CHECKING: from pydantic.v1.typing import Dict Str Any   all   = ( 'Pydantic Type Error', 'Pydantic Value Error', 'Config Error', 'Missing Error', 'Extra Error', 'None Is Not Allowed..."}, {"qid": "", "rank": 4, "path": "pydantic/validate_call_decorator.py", "score": 0.16881476188410238, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 5, "path": "pydantic/errors.py", "score": 0.14929239267521402, "span_start": null, "span_end": null, "passage": "Attributes: message: A message describing the error. code: An optional error code from Pydantic Error Codes enum. class Pydantic Undefined Annotation(Pydantic Error Mixin, Name Error): def   init  (se..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_serializers.py", "score": 0.11841277130128096, "span_start": null, "span_end": null, "passage": "...=['Math', 'Chemistry', 'English']) print(student.model dump()) ``` Attributes: func: The serializer function. return type: The return type for the function. If omitted it will be inferred from the typ..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_validators.py", "score": 0.10716001495629368, "span_start": null, "span_end": null, "passage": "... validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotated from pydantic import After Validato..."}, {"qid": "", "rank": 8, "path": "pydantic/_migration.py", "score": 0.09817324740978829, "span_start": null, "span_end": null, "passage": "...ion short MOVED IN V2 = { 'pydantic.utils:version info': 'pydantic.version:version info', 'pydantic.error wrappers:Validation Error': 'pydantic:Validation Error', 'pydantic.utils:to camel': 'pydantic...."}, {"qid": "", "rank": 9, "path": "pydantic/v1/decorator.py", "score": 0.0962520413452058, "span_start": null, "span_end": null, "passage": "...n, overload from pydantic.v1 import validator from pydantic.v1.config import Extra from pydantic.v1.errors import Config Error from pydantic.v1.main import Base Model, create model from pydantic.v1.ty..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_decorators.py", "score": 0.08679260110841744, "span_start": null, "span_end": null, "passage": "... wrapped: The decorator that has to be wrapped. decorator info: The decorator info. shim: A wrapper function to wrap V1 style function. return getattr(self.wrapped,   name) Decorator Info Type = Type ..."}, {"qid": "", "rank": 11, "path": "pydantic/types.py", "score": 0.08479824992017498, "span_start": null, "span_end": null, "passage": "...ined int',), 'msg': 'Input should be greater than 1', 'input': 0, 'ctx': {'gt': 1}, 'url': 'https://errors.pydantic.dev/2/v/greater than', } ] return Annotated[  # pyright: ignore[report Return Type] ..."}, {"qid": "", "rank": 12, "path": "pydantic/deprecated/class_validators.py", "score": 0.0819029879964675, "span_start": null, "span_end": null, "passage": "...tr): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) the validator sho..."}, {"qid": "", "rank": 13, "path": "tests/test_assert_in_validators.py", "score": 0.07577936633624835, "span_start": null, "span_end": null, "passage": "... pprint import pytest from dirty equals import Has Repr from pydantic import Base Model, Validation Error, field validator def  pformat lines(obj): return pprint.pformat(obj).splitlines(keepends=True)..."}, {"qid": "", "rank": 14, "path": "tests/test_generics.py", "score": 0.07543546268083459, "span_start": null, "span_end": null, "passage": "...import ( Base Model, Field, Get Core Schema Handler, Json, Positive Int, Pydantic Schema Generation Error, Pydantic User Error, Type Adapter, Validation Error, Validation Info, computed field, field v..."}, {"qid": "", "rank": 15, "path": "tests/test_fastapi_json_schema.py", "score": 0.07420972001457501, "span_start": null, "span_end": null, "passage": "...Core Metadata Handler from pydantic. internal. core utils import Core Schema Or Field from pydantic.errors import Pydantic Invalid For Json Schema from pydantic.json schema import Generate Json Schema..."}, {"qid": "", "rank": 16, "path": "pydantic/annotated_handlers.py", "score": 0.07400293710875602, "span_start": null, "span_end": null, "passage": "... schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, which will raise a `pyd..."}, {"qid": "", "rank": 17, "path": "tests/test_errors.py", "score": 0.06900338868365186, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 18, "path": "tests/plugin/example_plugin.py", "score": 0.06797194539576004, "span_start": null, "span_end": null, "passage": "...import Base Model class My Model(Base Model): x: int m = My Model(x='10') if m.x != 10: raise Value Error('m.x should be 10') log = [] class Validate Python Handler: def on enter(self, *args, **kwargs..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_utils.py", "score": 0.06579647695469214, "span_start": null, "span_end": null, "passage": "...ltdict, deque from copy import deepcopy from itertools import zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Type, Lambda Type, Module Type from typing import..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_core_metadata.py", "score": 0.06519901299963658, "span_start": null, "span_end": null, "passage": "...Schema Or Field as Core Schema Or Field, ) from . schema generation shared import ( Get Json Schema Function, ) class Core Metadata(typing extensions.Typed Dict, total=False): pydantic js functions: l..."}], "latency_ms": 2.6259422302246094, "gold_paths": ["pydantic/datetime_parse.py"]}
{"qid": "lens_main_func_synthetic_2", "query": "data validation logic", "results": [{"qid": "", "rank": 1, "path": "pydantic/functional_validators.py", "score": 0.11326096506512015, "span_start": null, "span_end": null, "passage": "A metadata class that indicates that a validation should be applied **after** the inner validation logic. Attributes: func: The validator function. Example: ```py from typing extensions import Annotat..."}, {"qid": "", "rank": 2, "path": "pydantic/functional_serializers.py", "score": 0.09476834760353794, "span_start": null, "span_end": null, "passage": "...he source type. handler: The `Get Core Schema Handler` instance. Returns: The Pydantic core schema. logic, and can modify the resulting value before returning it as the final output of serialization. ..."}, {"qid": "", "rank": 3, "path": "docs/extra/feedback.js", "score": 0.0849951252059855, "span_start": null, "span_end": null, "passage": "...edback.hidden = false feedback.add Event Listener(\"submit\", function(ev) { ev.prevent Default() var data = ev.submitter.get Attribute(\"data-md-value\") feedback.first Element Child.disabled = true var ..."}, {"qid": "", "rank": 4, "path": "pydantic/aliases.py", "score": 0.07513119570440857, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat..."}, {"qid": "", "rank": 5, "path": "tests/test_generics.py", "score": 0.07381673428471028, "span_start": null, "span_end": null, "passage": "...a Handler, Json, Positive Int, Pydantic Schema Generation Error, Pydantic User Error, Type Adapter, Validation Error, Validation Info, computed field, field validator, model validator, ) from pydantic..."}, {"qid": "", "rank": 6, "path": "tests/test_types_self.py", "score": 0.06966895058746032, "span_start": null, "span_end": null, "passage": "import dataclasses import typing from typing import List, Optional, Union import pytest import typing extensions from typing extensions import Named Tuple, Typed Dict from pydantic import Base Model, ..."}, {"qid": "", "rank": 7, "path": "tests/test_aliases.py", "score": 0.06927014589654529, "span_start": null, "span_end": null, "passage": "... from pydantic import ( Alias Choices, Alias Generator, Alias Path, Base Model, Config Dict, Field, Validation Error, computed field, ) def test alias generator(): def to camel(string: str): return ''..."}, {"qid": "", "rank": 8, "path": "tests/test_types_typeddict.py", "score": 0.0673823132855301, "span_start": null, "span_end": null, "passage": "...l, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribute from bases..."}, {"qid": "", "rank": 9, "path": "tests/test_parse.py", "score": 0.06343456702997781, "span_start": null, "span_end": null, "passage": "...est from pydantic core import Core Schema from pydantic import Base Model, Get Json Schema Handler, Validation Error, model validator, parse obj as from pydantic.functional serializers import model se..."}, {"qid": "", "rank": 10, "path": "pydantic/config.py", "score": 0.06312312648001933, "span_start": null, "span_end": null, "passage": "...mputed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, ..."}, {"qid": "", "rank": 11, "path": "tests/test_errors.py", "score": 0.05941052680765237, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 12, "path": "tests/test_types.py", "score": 0.058194049556591625, "span_start": null, "span_end": null, "passage": "... import sys import typing import uuid from collections import Ordered Dict, defaultdict, deque from dataclasses import dataclass from datetime import date, datetime, time, timedelta, timezone from dec..."}, {"qid": "", "rank": 13, "path": "tests/benchmarks/test_north_star.py", "score": 0.053222667966103976, "span_start": null, "span_end": null, "passage": "...websites: List[Website] = Field(default factory=list) return Type Adapter(List[Person])  NORTH STAR DATA PATH = Path(  file  ).parent / 'north star data.json' @pytest.fixture(scope='module') def north..."}, {"qid": "", "rank": 14, "path": "pydantic/types.py", "score": 0.05054102988491126, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 15, "path": "pydantic/plugin/__init__.py", "score": 0.0479256586202509, "span_start": null, "span_end": null, "passage": "...s from typing import Any, Callable, Named Tuple from pydantic core import Core Config, Core Schema, Validation Error from typing extensions import Literal, Protocol, Type Alias   all   = ( 'Pydantic P..."}, {"qid": "", "rank": 16, "path": "tests/test_assert_in_validators.py", "score": 0.04767076555154103, "span_start": null, "span_end": null, "passage": "...flib import pprint import pytest from dirty equals import Has Repr from pydantic import Base Model, Validation Error, field validator def  pformat lines(obj): return pprint.pformat(obj).splitlines(kee..."}, {"qid": "", "rank": 17, "path": "tests/test_model_signature.py", "score": 0.043313838327929406, "span_start": null, "span_end": null, "passage": "...o') model config = Config Dict(extra='allow') def   init  (self, id: int = 1, bar=2, *, baz: Any, **data): super().  init  (id=id, **data) self.bar = bar self.baz = baz sig = signature(My Model) asser..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/dataclasses.py", "score": 0.03782473345676918, "span_start": null, "span_end": null, "passage": "import copy import dataclasses import sys from contextlib import contextmanager from functools import wraps try: from functools import cached property except Import Error: pass from typing import TYPE..."}, {"qid": "", "rank": 19, "path": "tests/test_validate_call.py", "score": 0.03751503236692703, "span_start": null, "span_end": null, "passage": "...t Annotated, Typed Dict from pydantic import Field, Pydantic Invalid For Json Schema, Type Adapter, Validation Error, validate call from pydantic.main import Base Model def test args(): @validate call..."}, {"qid": "", "rank": 20, "path": "tests/test_deprecated.py", "score": 0.03613580101804589, "span_start": null, "span_end": null, "passage": "...Get Core Schema Handler, Get Json Schema Handler, Pydantic Deprecated Since20, Pydantic User Error, Validation Error, conlist, root validator, ) from pydantic.config import Extra from pydantic.depreca..."}], "latency_ms": 3.2765865325927734, "gold_paths": ["pydantic/decorator.py"]}
{"qid": "lens_main_func_synthetic_3", "query": "configuration parser", "results": [{"qid": "", "rank": 1, "path": "release/make_history.py", "score": 0.08046255127846427, "span_start": null, "span_end": null, "passage": "...t date from pathlib import Path import requests def main(): root dir = Path(  file  ).parent.parent parser = argparse.Argument Parser() parser.add argument('--preview', help='print preview of release ..."}, {"qid": "", "rank": 2, "path": "pydantic/validate_call_decorator.py", "score": 0.07516206123827428, "span_start": null, "span_end": null, "passage": "...all` or with arguments `@validate call(...)`. Args: func: The function to be decorated. config: The configuration dictionary. validate return: Whether to validate the return value. Returns: The decora..."}, {"qid": "", "rank": 3, "path": "tests/conftest.py", "score": 0.06316897419762753, "span_start": null, "span_end": null, "passage": "...n.rewrite import Assertion Rewriting Hook from pydantic import Generate Schema def pytest addoption(parser: pytest.Parser): parser.addoption('--test-mypy', action='store true', help='run mypy tests') ..."}, {"qid": "", "rank": 4, "path": "tests/benchmarks/basemodel_eq_performance.py", "score": 0.03201184650346371, "span_start": null, "span_end": null, "passage": "... numpy, matplotlib and tqdm. ' 'Install those in your environment to run the benchmark.' ) from err parser = argparse.Argument Parser( description='Test the performance of various Base Model.  eq   im..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_dataclasses.py", "score": 0.02377754714001236, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 6, "path": "pydantic/v1/mypy.py", "score": 0.015315852670126053, "span_start": null, "span_end": null, "passage": "import sys from configparser import Config Parser from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type as Typing Type, Union from mypy.errorcodes import Error Code from mypy.nodes ..."}, {"qid": "", "rank": 7, "path": "pydantic/config.py", "score": 0.008407198518223632, "span_start": null, "span_end": null, "passage": "...ance difference is minimal if repeated strings are rare. A convenience decorator to set a [Pydantic configuration](config.md) on a `Typed Dict` or a `dataclass` from the standard library. Although the..."}, {"qid": "", "rank": 8, "path": "pydantic/main.py", "score": 0.007182631237470304, "span_start": null, "span_end": null, "passage": "...ntic private  : Instance attribute with the values of private attributes set on the model instance. Configuration for the model, should be a dictionary conforming to [`Config Dict`][pydantic.config.Co..."}, {"qid": "", "rank": 9, "path": "pydantic/type_adapter.py", "score": 0.007063943530128852, "span_start": null, "span_end": null, "passage": "...he schema serializer for the type. Args: type: The type associated with the `Type Adapter`. config: Configuration for the `Type Adapter`, should be a dictionary conforming to [`Config Dict`][pydantic...."}, {"qid": "", "rank": 10, "path": "pydantic/mypy.py", "score": 0.006960226409837657, "span_start": null, "span_end": null, "passage": "...f.  slots  : setting = config.get(key, False) if not isinstance(setting, bool): raise Value Error(f'Configuration value must be a boolean for key: {key}') setattr(self, key, setting) else: plugin conf..."}, {"qid": "", "rank": 11, "path": "tests/test_docs.py", "score": 0.0054205383828832224, "span_start": null, "span_end": null, "passage": "...pe.  args  ) expected validation error codes.remove('timezone offset')  # not currently exposed for configuration in pydantic test failures = [] documented validation error codes = [] error code secti..."}, {"qid": "", "rank": 12, "path": "tests/mypy/test_mypy.py", "score": 0.0044392937511947865, "span_start": null, "span_end": null, "passage": "...ug as necessary with pytest.raises(Value Error) as e: mypy api.run(command) assert str(e.value) == 'Configuration value must be a boolean for key: init forbid extra' def get expected return code(sourc..."}], "latency_ms": 3.5669803619384766, "gold_paths": ["pydantic/env_settings.py"]}
{"qid": "lens_main_func_synthetic_4", "query": "logging utility", "results": [{"qid": "", "rank": 1, "path": ".github/actions/people/people.py", "score": 0.11058122935587986, "span_start": null, "span_end": null, "passage": "import requests import logging import subprocess import sys from collections import Counter from datetime import datetime, timedelta, timezone from pathlib import Path from typing import Any, Containe..."}, {"qid": "", "rank": 2, "path": "docs/plugins/main.py", "score": 0.02458374566333094, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import json import logging import os import re import textwrap from pathlib import Path from textwrap import indent import autoflake import pyupgrade..."}], "latency_ms": 2.268552780151367, "gold_paths": ["pydantic/error_wrappers.py"]}
{"qid": "lens_main_func_synthetic_5", "query": "cache management", "results": [{"qid": "", "rank": 1, "path": "tests/test_generics.py", "score": 0.18398282337833363, "span_start": null, "span_end": null, "passage": "...core utils import collect invalid schemas from pydantic. internal. generics import (  GENERIC TYPES CACHE,  LIMITED DICT SIZE, Limited Dict, generic recursion self type, iter contained typevars, recur..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_generics.py", "score": 0.15368083314628825, "span_start": null, "span_end": null, "passage": "...c Alias  # type: ignore[attr-defined] if TYPE CHECKING: from ..main import Base Model Generic Types Cache Key = Tuple[Any, Any, Tuple[Any, ...]] KT = Type Var('KT') VT = Type Var('VT')  LIMITED DICT S..."}, {"qid": "", "rank": 3, "path": "pydantic/v1/generics.py", "score": 0.12944255400193522, "span_start": null, "span_end": null, "passage": "...ound='Generic Model') Type Var Type = Any  # since mypy doesn't allow the use of Type Var as a type Cache Key = Tuple[Type[Any], Any, Tuple[Any, ...]] Parametrization = Mapping[Type Var Type, Type[Any..."}, {"qid": "", "rank": 4, "path": "pydantic/v1/error_wrappers.py", "score": 0.12098423396317189, "span_start": null, "span_end": null, "passage": "...er] class Validation Error(Representation, Value Error):   slots   = 'raw errors', 'model', ' error cache' def   init  (self, errors: Sequence[Error List], model: 'Model Or Dc') -> None: self.raw erro..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/networks.py", "score": 0.09408243431963642, "span_start": null, "span_end": null, "passage": "... 'Cockroach Dsn', 'Amqp Dsn', 'Redis Dsn', 'Mongo Dsn', 'Kafka Dsn', 'validate email', ]  url regex cache = None  multi host url regex cache = None  ascii domain regex cache = None  int domain regex c..."}, {"qid": "", "rank": 6, "path": "tests/mypy/test_mypy.py", "score": 0.04999154781367346, "span_start": null, "span_end": null, "passage": "...OOT / 'tests/mypy/configs' / config filename test config = get test config(input path, config path) cache dir = f'.mypy cache/test-{os.path.splitext(config filename)[0]}' command = [ str(input path), ..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/tools.py", "score": 0.04136136773180911, "span_start": null, "span_end": null, "passage": "import json from functools import lru cache from pathlib import Path from typing import TYPE CHECKING, Any, Callable, Optional, Type, Type Var, Union from pydantic.v1.parse import Protocol, load file,..."}, {"qid": "", "rank": 8, "path": "tests/test_computed_fields.py", "score": 0.039893423232949955, "span_start": null, "span_end": null, "passage": "...nerators import to camel from pydantic.errors import Pydantic User Error try: from functools import cached property, lru cache, singledispatchmethod except Import Error: cached property = None lru cac..."}, {"qid": "", "rank": 9, "path": "pydantic/config.py", "score": 0.02366867852514295, "span_start": null, "span_end": null, "passage": "...e same source file). The behavior can be different depending on the Python version used. Whether to cache strings to avoid constructing new Python objects. Defaults to True. Enabling this setting shou..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_config.py", "score": 0.016444753133145727, "span_start": null, "span_end": null, "passage": "...str=False, regex engine='rust-regex', validation error cause=False, use attribute docstrings=False, cache strings=True, ) def prepare config(config: Config Dict | dict[str, Any] | type[Any] | None) ->..."}, {"qid": "", "rank": 11, "path": "pydantic/v1/main.py", "score": 0.013623815082712317, "span_start": null, "span_end": null, "passage": "... rv new, name factory=lambda skip on failure and v: skip on failure and v[1].  name  , ), '  schema cache  ': {}, '  json encoder  ': staticmethod(json encoder), '  custom root type  ':  custom root t..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_fields.py", "score": 0.00839866033592653, "span_start": null, "span_end": null, "passage": "...ta(**metadata: Any) -> Base Metadata: return  general metadata cls()(metadata)  # type: ignore @lru cache(maxsize=None) def  general metadata cls() -> type[Base Metadata]: def   init  (self, metadata:..."}, {"qid": "", "rank": 13, "path": "tests/test_serialize.py", "score": 0.002259121324125865, "span_start": null, "span_end": null, "passage": "...}'), (Wrap Serializer, lambda v, nxt: f'{nxt(v + 1):,}'), ], ) def test serializer annotated typing cache(serializer, func): Fancy Int = Annotated[int, serializer(func)] class Fancy Int Model(Base Mod..."}, {"qid": "", "rank": 14, "path": "tests/test_main.py", "score": 0.001756771489781159, "span_start": null, "span_end": null, "passage": "...def   hash  (self): return hash(id(self)) class My Sub Class(My Base Model): x: Dict[str, int] @lru cache(maxsize=None) def cached method(self): return len(self.x) my instance = My Sub Class(x={'a': 1..."}], "latency_ms": 2.242565155029297, "gold_paths": ["pydantic/generics.py"]}
{"qid": "lens_main_func_synthetic_6", "query": "user permission check", "results": [{"qid": "", "rank": 1, "path": "tests/mypy/modules/strict_equality.py", "score": 0.30752008316985924, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 2, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin-strict-equality_toml/strict_equality.py", "score": 0.30752008316985924, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model class User(Base Model): username: str user = User(username='test') print(user == 'test') print(user.username == int('1')) print(user.username == 'test')"}, {"qid": "", "rank": 3, "path": "tests/test_serialize_as_any.py", "score": 0.23145146666203556, "span_start": null, "span_end": null, "passage": "...rialize As Any, Type Adapter from pydantic.dataclasses import dataclass as pydantic dataclass class User(Base Model): name: str class User Login(User): password: Secret Str user = User(name='pydantic'..."}, {"qid": "", "rank": 4, "path": "tests/test_rich_repr.py", "score": 0.19894489097491985, "span_start": null, "span_end": null, "passage": "... pydantic import Base Model from pydantic.color import Color @pytest.fixture(scope='session', name='User') def user fixture(): class User(Base Model): id: int name: str = 'John Doe' signup ts: Optiona..."}, {"qid": "", "rank": 5, "path": "pydantic/config.py", "score": 0.16350492633672248, "span_start": null, "span_end": null, "passage": "...tr] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] froze..."}, {"qid": "", "rank": 6, "path": "docs/plugins/main.py", "score": 0.1623281472665662, "span_start": null, "span_end": null, "passage": "...f=\"why/#org-{key}\" title=\"{name}\"> <img src=\"logos/{key} logo.png\" alt=\"{name}\" /> </a> <div class=\"user-list user-list-center\"> {% for user in people.experts %} <div class=\"user\"> <a href=\"{{ user.ur..."}, {"qid": "", "rank": 7, "path": "tests/test_types.py", "score": 0.1431607714259304, "span_start": null, "span_end": null, "passage": "... 'Input should be a valid timedelta', 'input': '1 days', } ] @pytest.fixture(scope='session', name='Check Model') def check model fixture(): class Check Model(Base Model): bool check: bool = True str ..."}, {"qid": "", "rank": 8, "path": "pydantic/networks.py", "score": 0.08925659849798974, "span_start": null, "span_end": null, "passage": "...cheme`: the URL scheme (`http`), always set. - `host`: the URL host (`example.com`), always set. - `username`: optional username if included (`samuel`). - `password`: optional password if included (`p..."}, {"qid": "", "rank": 9, "path": "tests/test_computed_fields.py", "score": 0.0855268835429228, "span_start": null, "span_end": null, "passage": "...ld validator, ) from pydantic.alias generators import to camel from pydantic.errors import Pydantic User Error try: from functools import cached property, lru cache, singledispatchmethod except Import..."}, {"qid": "", "rank": 10, "path": "tests/test_main.py", "score": 0.07607270260181803, "span_start": null, "span_end": null, "passage": "...ld, Generate Schema, Get Core Schema Handler, Private Attr, Pydantic Undefined Annotation, Pydantic User Error, Secret Str, String Constraints, Type Adapter, Validation Error, Validation Info, constr,..."}, {"qid": "", "rank": 11, "path": "tests/test_networks.py", "score": 0.07544117844815701, "span_start": null, "span_end": null, "passage": ".../example.org', 'http://test', 'http://localhost', 'https://example.org/whatever/next/', 'postgres://user:pass@localhost:5432/app', 'postgres://just-user@localhost:5432/app', 'postgresql+asyncpg://user..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_git.py", "score": 0.07255675690519359, "span_start": null, "span_end": null, "passage": "return os.path.exists(os.path.join(dir, '.git')) def have git() -> bool: return subprocess.check output(['git', 'rev-parse', '--short', 'HEAD'], cwd=dir).decode('utf-8').strip()"}, {"qid": "", "rank": 13, "path": "tests/test_errors.py", "score": 0.07241553014288427, "span_start": null, "span_end": null, "passage": "import re import pytest from pydantic import Base Model, Pydantic User Error, Validation Error from pydantic.version import version short def test user error url(): with pytest.raises(Pydantic User Er..."}, {"qid": "", "rank": 14, "path": "pydantic/experimental/pipeline.py", "score": 0.06742512177457527, "span_start": null, "span_end": null, "passage": "...loat): s['gt'] = gt elif s['type'] == 'decimal' and isinstance(gt, Decimal): s['gt'] = gt else: def check gt(v: Any) -> bool: return v > gt s =  check func(check gt, f'> {gt}', s) elif isinstance(cons..."}, {"qid": "", "rank": 15, "path": "pydantic/v1/networks.py", "score": 0.05730022976565771, "span_start": null, "span_end": null, "passage": "... IPv6Address, IPv6Interface, IPv6Network,  Base Address,  Base Network, ) from typing import ( TYPE CHECKING, Any, Collection, Dict, Generator, List, Match, Optional, Pattern, Set, Tuple, Type, Union,..."}, {"qid": "", "rank": 16, "path": "tests/test_config.py", "score": 0.05721590511539839, "span_start": null, "span_end": null, "passage": "...om pydantic.dataclasses import dataclass as pydantic dataclass from pydantic.errors import Pydantic User Error from pydantic.fields import Computed Field Info, Field Info from pydantic.type adapter im..."}, {"qid": "", "rank": 17, "path": "tests/test_dataclasses.py", "score": 0.04808265965430077, "span_start": null, "span_end": null, "passage": "... Config Dict, Generate Schema, Pydantic Deprecated Since20, Pydantic Undefined Annotation, Pydantic User Error, Root Model, Type Adapter, Validation Error, Validation Info, computed field, field seria..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_dataclasses.py", "score": 0.047190693889504864, "span_start": null, "span_end": null, "passage": "...Pydantic Undefined Annotation: If `raise error` is `True` and there is an undefined annotations. We check that - ` cls` is a dataclass - ` cls` does not inherit from a processed pydantic dataclass (an..."}, {"qid": "", "rank": 19, "path": "tests/test_decorators.py", "score": 0.04424838355665265, "span_start": null, "span_end": null, "passage": "import pytest from pydantic import Pydantic User Error from pydantic. internal. decorators import inspect annotated serializer, inspect validator def  two pos required args(a, b): pass def  two pos re..."}, {"qid": "", "rank": 20, "path": "tests/test_types_typeddict.py", "score": 0.042173775025415076, "span_start": null, "span_end": null, "passage": "... ( Base Model, Config Dict, Field, Generate Schema, Get Core Schema Handler, Positive Int, Pydantic User Error, Validation Error, with config, ) from pydantic. internal. decorators import get attribut..."}], "latency_ms": 2.960205078125, "gold_paths": ["pydantic/json.py"]}
{"qid": "lens_main_func_synthetic_7", "query": "database connection", "results": [], "latency_ms": 2.8166770935058594, "gold_paths": ["pydantic/parse.py"]}
{"qid": "lens_main_func_synthetic_8", "query": "API response formatter", "results": [{"qid": "", "rank": 1, "path": "docs/plugins/griffe_doclinks.py", "score": 0.22493943706877956, "span_start": null, "span_end": null, "passage": "...se Value Error(f'heading with slug {slug!r} not found in {file path}') def insert at top(path: str, api link: str) -> str: rel file = path.rstrip('/') + '.md' file path = DOCS PATH / rel file content ..."}, {"qid": "", "rank": 2, "path": "pydantic/mypy.py", "score": 0.18384838182530397, "span_start": null, "span_end": null, "passage": "... ctx: Class Def Context) -> bool: transformer = Pydantic Model Transformer(ctx.cls, ctx.reason, ctx.api, self.plugin config) return transformer.transform() def  pydantic model metaclass marker callbac..."}, {"qid": "", "rank": 3, "path": "tests/mypy/modules/generics.py", "score": 0.12551763427947774, "span_start": null, "span_end": null, "passage": "..., Dict, Generic, Optional, Type Var from pydantic import Base Model Tbody = Type Var('Tbody') class Response(Base Model, Generic[Tbody]): url: str body: Tbody class Json Body(Base Model): raw: str dat..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.09431989376224931, "span_start": null, "span_end": null, "passage": "... Pydantic, please do not rely on this implementation. See `Get Json Schema Handler` for the handler API. This returns the input json schema if there is no `$ref` in json schema. Args: maybe ref json s..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/mypy.py", "score": 0.08964783199539136, "span_start": null, "span_end": null, "passage": "...x.args[1] if default args and default factory args: error default and default factory specified(ctx.api, ctx.context) return default any type if default args: default type = ctx.arg types[0][0] defaul..."}, {"qid": "", "rank": 6, "path": ".github/actions/people/people.py", "score": 0.06033897004865008, "span_start": null, "span_end": null, "passage": "...rt Base Model, Secret Str from pydantic settings import Base Settings github graphql url = \"https://api.github.com/graphql\" class Author(Base Model): login: str avatar Url: str url: str class Comments..."}, {"qid": "", "rank": 7, "path": "release/make_history.py", "score": 0.053755869678583326, "span_start": null, "span_end": null, "passage": "... data = {'target committish': 'main', 'previous tag name': last tag, 'tag name': f'v{new version}'} response = requests.post( 'https://api.github.com/repos/pydantic/pydantic/releases/generate-notes', ..."}, {"qid": "", "rank": 8, "path": "docs/plugins/using_update.py", "score": 0.032424553831897865, "span_start": null, "span_end": null, "passage": "...nt session = requests.Session() def update lib(lib, *, retry=0): repo = lib['repo'] url = f'https://api.github.com/repos/{repo}' resp = session.get(url) if resp.status code == 403 and retry < 3: print..."}, {"qid": "", "rank": 9, "path": "tests/mypy/outputs/1.4.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 10, "path": "tests/mypy/modules/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 11, "path": "tests/mypy/outputs/1.4.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 12, "path": "tests/mypy/outputs/1.2.0/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 13, "path": "tests/mypy/outputs/1.2.0/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 14, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 15, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 16, "path": "tests/mypy/outputs/1.4.1/pyproject-plugin-strict_toml/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 17, "path": "tests/mypy/outputs/1.0.1/mypy-plugin_ini/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 18, "path": "tests/mypy/outputs/1.2.0/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 19, "path": "tests/mypy/outputs/1.0.1/pyproject-plugin_toml/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-strict_ini/plugin_fail_baseConfig.py", "score": 0.026769105071331678, "span_start": null, "span_end": null, "passage": "...x='1', y='2') class Blah(Base Model): fields set: Optional[Set[str]] = None T = Type Var('T') class Response(Base Model, Generic[T]): data: T error: Optional[str] response = Response[Model](data=model..."}], "latency_ms": 2.9342174530029297, "gold_paths": ["pydantic/schema.py"]}
{"qid": "lens_main_func_synthetic_9", "query": "input sanitization", "results": [{"qid": "", "rank": 1, "path": "tests/test_errors.py", "score": 0.3974640515266312, "span_start": null, "span_end": null, "passage": ".../errors.pydantic.dev/{version short()}/u/base-model-instantiated' ) @pytest.mark.parametrize( 'hide input,input str', ((False, 'type=greater than, input value=4, input type=int'), (True, 'type=greater..."}, {"qid": "", "rank": 2, "path": "tests/test_types.py", "score": 0.18533812734695745, "span_start": null, "span_end": null, "passage": "...nnotated[str, Strict] assert Model(v='foo').v == 'foo' with pytest.raises(Validation Error, match=r'Input should be a valid string \\[type=string type,'): Model(v=b'fo') @pytest.mark.parametrize( ('dat..."}, {"qid": "", "rank": 3, "path": "docs/plugins/conversion_table.py", "score": 0.18176493538108576, "span_start": null, "span_end": null, "passage": "... Dict from pydantic import Byte Size, Instance Of @dataclass class Row: field type: type[Any] | str input type: type[Any] | str python input: bool = False json input: bool = False strict: bool = False..."}, {"qid": "", "rank": 4, "path": "tests/test_type_alias_type.py", "score": 0.15677754985344883, "span_start": null, "span_end": null, "passage": "... assert exc info.value.errors(include url=False) == [ { 'type': 'int parsing', 'loc': (0,), 'msg': 'Input should be a valid integer, unable to parse string as an integer', 'input': 'a', } ] assert t.j..."}, {"qid": "", "rank": 5, "path": "tests/test_datetime.py", "score": 0.13389530225799354, "span_start": null, "span_end": null, "passage": "...Err('Datetimes provided to dates should have zero time - e.g. be exact dates')), ('x20120423', Err('Input should be a valid date or datetime, input is too short')), ('2012-04-56', Err('Input should be..."}, {"qid": "", "rank": 6, "path": "tests/test_edge_cases.py", "score": 0.12246904586563014, "span_start": null, "span_end": null, "passage": "... exc info.value.errors(include url=False) == [ {'type': 'string type', 'loc': ('v', 'str'), 'msg': 'Input should be a valid string', 'input': None}, {'type': 'bytes type', 'loc': ('v', 'bytes'), 'msg'..."}, {"qid": "", "rank": 7, "path": "tests/test_types_namedtuple.py", "score": 0.11163993274702723, "span_start": null, "span_end": null, "passage": "...exc info.value.errors(include url=False) == [ { 'type': 'int parsing', 'loc': ('event', 0), 'msg': 'Input should be a valid integer, unable to parse string as an integer', 'input': 'qwe', } ] def test..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.10908184614286309, "span_start": null, "span_end": null, "passage": "...ot rely on this implementation. See `Get Json Schema Handler` for the handler API. This returns the input json schema if there is no `$ref` in json schema. Args: maybe ref json schema: The input json ..."}, {"qid": "", "rank": 9, "path": "tests/test_validate_call.py", "score": 0.1001886219194852, "span_start": null, "span_end": null, "passage": "...de url=False) == [ {'type': 'missing argument', 'loc': ('a',), 'msg': 'Missing required argument', 'input': Args Kwargs(())}, {'type': 'missing argument', 'loc': ('b',), 'msg': 'Missing required argum..."}, {"qid": "", "rank": 10, "path": "tests/test_type_adapter.py", "score": 0.08427483125262965, "span_start": null, "span_end": null, "passage": "...e) assert exc info.value.errors(include url=False) == [ {'type': 'int type', 'loc': ('x',), 'msg': 'Input should be a valid integer', 'input': '1'} ] with pytest.raises(Validation Error) as exc info: ..."}, {"qid": "", "rank": 11, "path": "tests/test_types_typeddict.py", "score": 0.07790105203959274, "span_start": null, "span_end": null, "passage": "...uired \\[type=missing,'): M(d=dict(foo='baz')) with pytest.raises(Validation Error, match=r'd\\.bar\\s+Input should be less than 10 \\[type=less than,'): M(d=dict(foo='baz', bar='11')) def test typeddict ..."}, {"qid": "", "rank": 12, "path": "tests/test_deprecated_validate_arguments.py", "score": 0.07682921451532054, "span_start": null, "span_end": null, "passage": "....raises(Validation Error) as exc info: foo() assert exc info.value.errors(include url=False) == [ {'input': {}, 'loc': ('a',), 'msg': 'Field required', 'type': 'missing'}, {'input': {}, 'loc': ('b',),..."}, {"qid": "", "rank": 13, "path": "tests/test_main.py", "score": 0.07579737907279116, "span_start": null, "span_end": null, "passage": "...o.value.errors(include url=False) == [ {'loc': ('a',), 'msg': 'Field required', 'type': 'missing', 'input': {}} ] assert str(exc info.value) == ( '1 validation error for Ultra Simple Model\\n' 'a\\n' ' ..."}, {"qid": "", "rank": 14, "path": "tests/test_strict.py", "score": 0.07440237494198237, "span_start": null, "span_end": null, "passage": "...e) assert exc info.value.errors(include url=False) == [ {'type': 'int type', 'loc': ('a',), 'msg': 'Input should be a valid integer', 'input': value} ] def test parse strict mode on field valid(Model ..."}, {"qid": "", "rank": 15, "path": "tests/test_validators.py", "score": 0.07050173961923027, "span_start": null, "span_end": null, "passage": "...rors(include url=False) == [ { 'ctx': {'error': Has Repr(repr(Assertion Error('assert -1 > 0')))}, 'input': -1, 'loc': ('x',), 'msg': 'Assertion failed, assert -1 > 0', 'type': 'assertion error', } ] ..."}, {"qid": "", "rank": 16, "path": "tests/test_generics.py", "score": 0.06931052095451169, "span_start": null, "span_end": null, "passage": "... exc info.value.errors(include url=False) == [ { 'type': 'int parsing', 'loc': ('data', 1), 'msg': 'Input should be a valid integer, unable to parse string as an integer', 'input': 'a', } ] with pytes..."}, {"qid": "", "rank": 17, "path": "tests/test_plugins.py", "score": 0.06921221940849451, "span_start": null, "span_end": null, "passage": "...ccess() -> None: class Custom On Validate Json(Validate Json Handler Protocol): def on enter( self, input: str | bytes | bytearray, *, strict: bool | None = None, context: dict[str, Any] | None = None..."}, {"qid": "", "rank": 18, "path": "tests/test_fields.py", "score": 0.06772402625165645, "span_start": null, "span_end": null, "passage": "... Error) as exc info: Model.model validate(1) assert exc info.value.errors(include url=False) == [ {'input': 1, 'loc': (), 'msg': 'Input should be a valid string', 'type': 'string type'} ] class Sub Mo..."}, {"qid": "", "rank": 19, "path": "pydantic/plugin/__init__.py", "score": 0.0657186635654628, "span_start": null, "span_end": null, "passage": "... The validation error. Args: exception: The exception raised during validation. def on enter( self, input: Any, *, strict: bool | None = None, from attributes: bool | None = None, context: dict[str, A..."}, {"qid": "", "rank": 20, "path": "tests/test_dataclasses.py", "score": 0.06428558810602733, "span_start": null, "span_end": null, "passage": "... assert exc info.value.errors(include url=False) == [ { 'type': 'int parsing', 'loc': (1,), 'msg': 'Input should be a valid integer, unable to parse string as an integer', 'input': 'wrong', } ] def te..."}], "latency_ms": 3.530263900756836, "gold_paths": ["pydantic/tools.py"]}
