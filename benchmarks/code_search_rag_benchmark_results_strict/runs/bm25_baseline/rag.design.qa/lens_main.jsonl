{"qid": "lens_main_rag_design_0", "query": "What is the overall architecture of this system?", "results": [{"qid": "", "rank": 1, "path": "pydantic/warnings.py", "score": 0.16651676167348997, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 2, "path": "pydantic/root_model.py", "score": 0.16476037295713145, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 3, "path": "pydantic/fields.py", "score": 0.1616936805113349, "span_start": null, "span_end": null, "passage": "...rator: typing extensions.Callable[[str, Field Info], str] | None description: str | None examples: list[Any] | None exclude: bool | None gt: annotated types.Supports Gt | None ge: annotated types.Supp..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_dataclasses.py", "score": 0.1457960098537913, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 5, "path": "pydantic/dataclasses.py", "score": 0.13368636806392903, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.1232165370761417, "span_start": null, "span_end": null, "passage": "...ype=int] arbitrary types allowed: bool 1 validation error for Model pet Input should be an instance of Pet [type=is instance of, input value='Hedwig', input type=str] from attributes: bool loc by alia..."}, {"qid": "", "rank": 7, "path": "pydantic/_internal/_typing_extra.py", "score": 0.12026859994671096, "span_start": null, "span_end": null, "passage": "...ython.org/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10..."}, {"qid": "", "rank": 8, "path": "pydantic/functional_serializers.py", "score": 0.11453671439274186, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_validators.py", "score": 0.11135480675864333, "span_start": null, "span_end": null, "passage": "...quence[Any], /, validator: core schema.Validator Function Wrap Handler, ) -> typing.Sequence[Any]: (This is necessary to distinguish between a submodule and an attribute when there is a conflict.). If..."}, {"qid": "", "rank": 10, "path": "pydantic/json_schema.py", "score": 0.10866129388772815, "span_start": null, "span_end": null, "passage": "...port warnings from collections import defaultdict from copy import deepcopy from dataclasses import is dataclass from enum import Enum from typing import ( TYPE CHECKING, Any, Callable, Counter, Dict,..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10814652604793942, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.10713418235952077, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 13, "path": "pydantic/validate_call_decorator.py", "score": 0.09425142996987208, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 14, "path": "pydantic/color.py", "score": 0.09302439669934104, "span_start": null, "span_end": null, "passage": "...rgba' def   init  (self, value: Color Type) -> None: self. rgba: RGBA self. original: Color Type if isinstance(value, (tuple, list)): self. rgba = parse tuple(value) elif isinstance(value, str): self...."}, {"qid": "", "rank": 15, "path": "pydantic/type_adapter.py", "score": 0.08371563604575832, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 16, "path": "tests/test_typing.py", "score": 0.08036018922986041, "span_start": null, "span_end": null, "passage": "...om pydantic. internal. typing extra import ( None Type, eval type lenient, get function type hints, is classvar, is literal type, is namedtuple, is none type, origin is union, parent frame namespace, ..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_model_construction.py", "score": 0.08025804419272933, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 18, "path": "pydantic/deprecated/class_validators.py", "score": 0.07723928402196073, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 19, "path": "pydantic/types.py", "score": 0.07247346139013243, "span_start": null, "span_end": null, "passage": "... metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import Annotate..."}, {"qid": "", "rank": 20, "path": "pydantic/alias_generators.py", "score": 0.0712763711384139, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}], "latency_ms": 8.511543273925781, "gold_paths": ["docs/index.md", "docs/migration.md"]}
{"qid": "lens_main_rag_design_1", "query": "How are components organized and structured?", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_typing_extra.py", "score": 0.08372381085046532, "span_start": null, "span_end": null, "passage": "...isinstance because it fails <3.10. if v is None: return False return v.  class   == Final.  class   and (sys.version info < (3, 8) or getattr(v, ' name', None) == 'Final') def is finalvar(ann type: An..."}, {"qid": "", "rank": 2, "path": "pydantic/config.py", "score": 0.05593174384358124, "span_start": null, "span_end": null, "passage": "...r: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] frozen: bool populate by na..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.041520304782305235, "span_start": null, "span_end": null, "passage": "...s of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names and their corres..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_utils.py", "score": 0.038669256569756325, "span_start": null, "span_end": null, "passage": "...class(cls: Any, class or tuple: Any) -> bool:  # pragma: no cover try: return isinstance(cls, type) and issubclass(cls, class or tuple) except Type Error: if isinstance(cls,  typing extra.With Args Ty..."}, {"qid": "", "rank": 5, "path": "tests/test_type_alias_type.py", "score": 0.03578175045052273, "span_start": null, "span_end": null, "passage": "...== data def test type alias to type with ref(): class Div(Base Model): type: Literal['Div'] = 'Div' components: List['Any Component'] Any Component = Type Alias Type('Any Component', Div) adapter = Ty..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_dataclasses.py", "score": 0.034481229791169354, "span_start": null, "span_end": null, "passage": "...ings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 7, "path": "pydantic/v1/utils.py", "score": 0.03273067299068252, "span_start": null, "span_end": null, "passage": "...ass Attribute', 'path type', 'ROOT KEY', 'get unique discriminator alias', 'get discriminator alias and values', 'DUNDER ATTRIBUTES', ) ROOT KEY = '  root  ' IMMUTABLE NON COLLECTIONS TYPES: Set[Type[..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/main.py", "score": 0.028270883317834613, "span_start": null, "span_end": null, "passage": "...rt Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve bases from typing import ( TYPE CHECKING, Abstract Set, Any, Callable, Class Var,..."}, {"qid": "", "rank": 9, "path": "pydantic/fields.py", "score": 0.026046747995172308, "span_start": null, "span_end": null, "passage": "...the field. title: The title of the field. field title generator: A callable that takes a field name and returns title for it. description: The description of the field. examples: List of examples of t..."}, {"qid": "", "rank": 10, "path": "pydantic/functional_serializers.py", "score": 0.025635344400021517, "span_start": null, "span_end": null, "passage": "...this serializer should be used. Accepts a string with values `'always'`, `'unless-none'`, `'json'`, and `'json-unless-none'`. Defaults to 'always'. Args: source type: The source type. handler: The `Ge..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.024266000433569176, "span_start": null, "span_end": null, "passage": "...ator With Values, V1Validator With Values Kw Only, V1Validator With Kwargs, V1Validator With Values And Kwargs ] def can be keyword(param: Parameter) -> bool: return param.kind in (Parameter.POSITIONA..."}, {"qid": "", "rank": 12, "path": "pydantic/aliases.py", "score": 0.02344097124749674, "span_start": null, "span_end": null, "passage": "...` as a convenience to create various aliases. Attributes: alias: A callable that takes a field name and returns an alias for it. validation alias: A callable that takes a field name and returns a vali..."}, {"qid": "", "rank": 13, "path": "pydantic/type_adapter.py", "score": 0.022838160369369573, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 14, "path": "pydantic/main.py", "score": 0.02273834189778087, "span_start": null, "span_end": null, "passage": "...or instantiating the model.   pydantic complete  : Whether model building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 15, "path": "pydantic/mypy.py", "score": 0.022533414078970967, "span_start": null, "span_end": null, "passage": "...lf, fullname: str) -> Callable[[Class Def Context], None] | None: if fullname == DATACLASS FULLNAME and MYPY VERSION TUPLE < (1, 1): return dataclasses.dataclass class maker callback  # type: ignore[r..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/generics.py", "score": 0.021678067110610693, "span_start": null, "span_end": null, "passage": "...-> Type[Any]: def  cache key( params: Any) -> Cache Key: args = get args( params) if len(args) == 2 and isinstance(args[0], list): args = (tuple(args[0]), args[1]) return cls,  params, args cached =  ..."}, {"qid": "", "rank": 17, "path": "pydantic/deprecated/copy_internals.py", "score": 0.02038491932875089, "span_start": null, "span_end": null, "passage": "...lude=include, exclude=exclude, exclude unset=exclude unset)  # type: ignore if allowed keys is None and not (to dict or by alias or exclude unset or exclude defaults or exclude none): yield from self...."}, {"qid": "", "rank": 18, "path": "pydantic/version.py", "score": 0.019713998606007026, "span_start": null, "span_end": null, "passage": "...n '.'.join(VERSION.split('.')[:2]) def version info() -> str: It parses normal version like `0.930` and extra info followed by a `+` sign like `0.940+dev.04cac4b5d911c4f9529e6ce86a27b44f28846f5d.dirty..."}, {"qid": "", "rank": 19, "path": "pydantic/dataclasses.py", "score": 0.01965797384326341, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_model_construction.py", "score": 0.018336591028034026, "span_start": null, "span_end": null, "passage": "... class to be created.   pydantic generic metadata  : Metadata for generic models.   pydantic reset parent namespace  : Reset parent namespace.  create model module: The module of the class to be creat..."}], "latency_ms": 4.893779754638672, "gold_paths": ["HISTORY.md", "docs/contributing.md"]}
{"qid": "lens_main_rag_design_2", "query": "What design patterns are implemented?", "results": [{"qid": "", "rank": 1, "path": "pydantic/warnings.py", "score": 0.09202711385206527, "span_start": null, "span_end": null, "passage": "...nality will be removed. Attributes: message: Description of the warning. since: Pydantic version in what the deprecation was introduced. expected removal: Pydantic version in what the corresponding fu..."}, {"qid": "", "rank": 2, "path": "pydantic/annotated_handlers.py", "score": 0.0722430475741025, "span_start": null, "span_end": null, "passage": "Attributes: mode: Json schema mode, can be `validation` or `serialization`. This will call the next JSON schema modifying function up until it calls into `pydantic.json schema.Generate Json Schema`, w"}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_typing_extra.py", "score": 0.04916661234737648, "span_start": null, "span_end": null, "passage": "... type: Any) -> bool: return  check finalvar(ann type) or  check finalvar(get origin(ann type)) def parent frame namespace(*, parent depth: int = 2) -> dict[str, Any] | None: frame = sys. getframe(pare..."}, {"qid": "", "rank": 4, "path": "pydantic/root_model.py", "score": 0.03349360279677571, "span_start": null, "span_end": null, "passage": "... `Base Model` subclass, then the return type will likely be `dict[str, Any]`, as `model dump` calls are recursive. The return type could even be something different, in the case of a custom serializer..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_utils.py", "score": 0.024513685188288576, "span_start": null, "span_end": null, "passage": "...alize indexes({'  all  ': True}, 4) {0: True, 1: True, 2: True, 3: True} Both `base` and `override` are converted to dictionaries if possible. Sets are converted to dictionaries with the sets entries ..."}, {"qid": "", "rank": 6, "path": "pydantic/v1/utils.py", "score": 0.023840054495457595, "span_start": null, "span_end": null, "passage": "...continue merged params[param.name] = param if var kw:  # if custom init has no var kw, fields which are not declared in it cannot be passed through allow names = config.allow population by field name ..."}, {"qid": "", "rank": 7, "path": "pydantic/config.py", "score": 0.023765351042449995, "span_start": null, "span_end": null, "passage": "...r: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] frozen: bool populate by na..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_dataclasses.py", "score": 0.019662396398471057, "span_start": null, "span_end": null, "passage": "...ings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 9, "path": "tests/benchmarks/basemodel_eq_performance.py", "score": 0.018809778492843054, "span_start": null, "span_end": null, "passage": "...on-{PYTHON VERSION.replace('.', '-')}.png\" fig.savefig( filepath, dpi=200, facecolor='white', transparent=False, ) print(f'wrote {filepath!s}', file=sys.stderr)"}, {"qid": "", "rank": 10, "path": "pydantic/plugin/__init__.py", "score": 0.013684683188696162, "span_start": null, "span_end": null, "passage": "from   future   import annotations from typing import Any, Callable, Named Tuple from pydantic core import Core Config, Core Schema, Validation Error from typing extensions import Literal, Protocol, T"}, {"qid": "", "rank": 11, "path": "pydantic/type_adapter.py", "score": 0.013650233372429006, "span_start": null, "span_end": null, "passage": "...s, where `  module  ` (always `typing.py`) is not useful. So instead we look at the globals in our parent stack frame. This works for the case where this function is called in a module that has the ta..."}, {"qid": "", "rank": 12, "path": "pydantic/json_schema.py", "score": 0.012622134874775308, "span_start": null, "span_end": null, "passage": "...  core metadata,  core utils,  decorators,  internal dataclass,  mock val ser,  schema generation shared,  typing extra, ) from .annotated handlers import Get Json Schema Handler from .config import J..."}, {"qid": "", "rank": 13, "path": "pydantic/main.py", "score": 0.011661939636130419, "span_start": null, "span_end": null, "passage": "...or instantiating the model.   pydantic complete  : Whether model building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 14, "path": "tests/test_type_hints.py", "score": 0.010778758512082022, "span_start": null, "span_end": null, "passage": "... info < (3, 10), reason='requires python3.10 or higher to work properly'), ] @pytest.fixture(name='Parent Model', scope='session') def parent sub model fixture(): class Ultra Simple Model(Base Model):..."}, {"qid": "", "rank": 15, "path": "tests/test_deprecated_validate_arguments.py", "score": 0.009863023268437446, "span_start": null, "span_end": null, "passage": "... Pydantic User Error, match='\"v  args\", \"v  kwargs\", \"v  positional only\" and \"v  duplicate kwargs\" are not permitted', ): @validate arguments def foo1(v  args: int): pass with pytest.raises( Pydantic..."}, {"qid": "", "rank": 16, "path": "pydantic/v1/config.py", "score": 0.009573347984181555, "span_start": null, "span_end": null, "passage": "...le[..., None]   all   = 'Base Config', 'Config Dict', 'get config', 'Extra', 'inherit config', 'prepare config' class Extra(str, Enum): allow = 'allow' ignore = 'ignore' forbid = 'forbid' if not compi..."}, {"qid": "", "rank": 17, "path": "pydantic/functional_serializers.py", "score": 0.008719391906197159, "span_start": null, "span_end": null, "passage": "...serializers](../concepts/serialization.md#custom-serializers) for more information. Four signatures are supported: - `(self, value: Any, info: Field Serialization Info)` - `(self, value: Any, nxt: Ser..."}, {"qid": "", "rank": 18, "path": "tests/test_utils.py", "score": 0.008436807325142131, "span_start": null, "span_end": null, "passage": "...t issubclass(A, str) is True @pytest.mark.skipif(sys.version info < (3, 9), reason='generic aliases are not available in python < 3.9') def test lenient issubclass with generic aliases(): from collect..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.007604446976423251, "span_start": null, "span_end": null, "passage": "... param name in ('field', 'config'): raise Pydantic User Error( 'The `field` and `config` parameters are not available in Pydantic V2, ' 'please use the `info` parameter instead.', code='validator-fiel..."}, {"qid": "", "rank": 20, "path": "pydantic/dataclasses.py", "score": 0.007248765863073527, "span_start": null, "span_end": null, "passage": "... init: A deprecated parameter included for backwards compatibility; in V2, all Pydantic dataclasses are validated on init. kw only: Determines if `  init  ` method parameters must be specified by keyw..."}], "latency_ms": 6.922721862792969, "gold_paths": ["HISTORY.md", "docs/migration.md"]}
{"qid": "lens_main_rag_design_3", "query": "How does data flow through the system?", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_dataclasses.py", "score": 0.15895116517567556, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 2, "path": "pydantic/dataclasses.py", "score": 0.15344237325772778, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 3, "path": "pydantic/validate_call_decorator.py", "score": 0.13417709983068177, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 4, "path": "pydantic/functional_serializers.py", "score": 0.13397792437362566, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 5, "path": "pydantic/fields.py", "score": 0.1275768071393559, "span_start": null, "span_end": null, "passage": "...rom Field Info Inputs, total=False): `Field Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally s..."}, {"qid": "", "rank": 6, "path": "pydantic/root_model.py", "score": 0.12306515405501485, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 7, "path": "pydantic/json_schema.py", "score": 0.11848335384642003, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import inspect import math import re import warnings from collections import defaultdict from copy import deepcopy from dataclasse..."}, {"qid": "", "rank": 8, "path": "pydantic/config.py", "score": 0.10858043483729024, "span_start": null, "span_end": null, "passage": "...f [`Alias Generator`][pydantic.aliases.Alias Generator]. Defaults to `None`. When using a callable, the alias generator is used for both validation and serialization. If you want to use different alia..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_typing_extra.py", "score": 0.10796130726925285, "span_start": null, "span_end": null, "passage": "...ython.org/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.10690236247604441, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 11, "path": "pydantic/alias_generators.py", "score": 0.10146961981229095, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 12, "path": "pydantic/_internal/_validators.py", "score": 0.096273939400506, "span_start": null, "span_end": null, "passage": "...> typing.Sequence[Any]: (This is necessary to distinguish between a submodule and an attribute when there is a conflict.). If the dotted path does not include a colon and the final item is not a valid..."}, {"qid": "", "rank": 13, "path": "pydantic/color.py", "score": 0.09061574213299892, "span_start": null, "span_end": null, "passage": "...schema.update(type='string', format='color') return field schema def original(self) -> Color Type: otherwise returns the hexadecimal representation of the color or raises `Value Error`. Args: fallback..."}, {"qid": "", "rank": 14, "path": "pydantic/types.py", "score": 0.08253452861090571, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08061487767941905, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 16, "path": "pydantic/type_adapter.py", "score": 0.07773988674772107, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 17, "path": "docs/extra/feedback.js", "score": 0.07723441011959321, "span_start": null, "span_end": null, "passage": "...edback.hidden = false feedback.add Event Listener(\"submit\", function(ev) { ev.prevent Default() var data = ev.submitter.get Attribute(\"data-md-value\") feedback.first Element Child.disabled = true var ..."}, {"qid": "", "rank": 18, "path": "pydantic/warnings.py", "score": 0.07430642037273999, "span_start": null, "span_end": null, "passage": "... warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality wil..."}, {"qid": "", "rank": 19, "path": "pydantic/aliases.py", "score": 0.06722439865666315, "span_start": null, "span_end": null, "passage": "A data class used by `validation alias` as a convenience to create aliases. Attributes: path: A list of string or integer aliases. Returns: The list of aliases. Returns: The value at the specified pat..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_model_construction.py", "score": 0.06562753629221771, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}], "latency_ms": 3.2486915588378906, "gold_paths": ["HISTORY.md", "README.md"]}
{"qid": "lens_main_rag_design_4", "query": "What are the key design decisions and trade-offs?", "results": [{"qid": "", "rank": 1, "path": "pydantic/warnings.py", "score": 0.17111921063549163, "span_start": null, "span_end": null, "passage": "... warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality wil..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_dataclasses.py", "score": 0.17097095336087867, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_typing_extra.py", "score": 0.16832413669039692, "span_start": null, "span_end": null, "passage": "...ython.org/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.15394045577985094, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 5, "path": "pydantic/validate_call_decorator.py", "score": 0.14782956382916315, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 6, "path": "pydantic/dataclasses.py", "score": 0.14495654840347905, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 7, "path": "pydantic/config.py", "score": 0.1440845740642965, "span_start": null, "span_end": null, "passage": "...r: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] frozen: bool populate by na..."}, {"qid": "", "rank": 8, "path": "pydantic/fields.py", "score": 0.1440089498116277, "span_start": null, "span_end": null, "passage": "...rom Field Info Inputs, total=False): `Field Info` is used for any field definition regardless of whether the [`Field()`][pydantic.fields.Field] function is explicitly used. !!! warning You generally s..."}, {"qid": "", "rank": 9, "path": "pydantic/functional_serializers.py", "score": 0.13299195035304842, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 10, "path": "pydantic/json_schema.py", "score": 0.13107685681278428, "span_start": null, "span_end": null, "passage": "...  core metadata,  core utils,  decorators,  internal dataclass,  mock val ser,  schema generation shared,  typing extra, ) from .annotated handlers import Get Json Schema Handler from .config import J..."}, {"qid": "", "rank": 11, "path": "pydantic/root_model.py", "score": 0.13031849936266102, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/utils.py", "score": 0.12739962407826036, "span_start": null, "span_end": null, "passage": "import keyword import warnings import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Fun..."}, {"qid": "", "rank": 13, "path": "pydantic/_internal/_utils.py", "score": 0.12497560934288013, "span_start": null, "span_end": null, "passage": "from   future   import annotations as  annotations import dataclasses import keyword import typing import weakref from collections import Ordered Dict, defaultdict, deque from copy import deepcopy fro..."}, {"qid": "", "rank": 14, "path": "pydantic/type_adapter.py", "score": 0.11380020097616331, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 15, "path": "pydantic/color.py", "score": 0.10486021610626615, "span_start": null, "span_end": null, "passage": "...ping extensions import deprecated from . internal import  repr from . internal. schema generation shared import Get Json Schema Handler as  Get Json Schema Handler from .json schema import Json Schema..."}, {"qid": "", "rank": 16, "path": "pydantic/alias_generators.py", "score": 0.09806485477074395, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_validators.py", "score": 0.09207773943424571, "span_start": null, "span_end": null, "passage": "...ce validator( input value: typing.Sequence[Any], /, validator: core schema.Validator Function Wrap Handler, ) -> typing.Sequence[Any]: (This is necessary to distinguish between a submodule and an attr..."}, {"qid": "", "rank": 18, "path": "pydantic/main.py", "score": 0.08385643132441091, "span_start": null, "span_end": null, "passage": "A base class for creating Pydantic models. Attributes:   class vars  : The names of classvars defined on the model.   private attributes  : Metadata about the private attributes of the model.   signat..."}, {"qid": "", "rank": 19, "path": "pydantic/deprecated/class_validators.py", "score": 0.07892014581693892, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 20, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.07790988363431249, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}], "latency_ms": 3.7424564361572266, "gold_paths": ["HISTORY.md", "docs/migration.md"]}
{"qid": "lens_main_rag_design_5", "query": "How is the system designed to scale?", "results": [{"qid": "", "rank": 1, "path": "pydantic/dataclasses.py", "score": 0.20153974051325585, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 2, "path": "pydantic/config.py", "score": 0.18005942762830288, "span_start": null, "span_end": null, "passage": "title: str | None field title generator: Callable[[str, Field Info | Computed Field Info], str] | None str to upper: bool str min length: int extra: Extra Values | None 1 validation error for User age..."}, {"qid": "", "rank": 3, "path": "pydantic/_internal/_dataclasses.py", "score": 0.17514637467797164, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 4, "path": "pydantic/fields.py", "score": 0.166532346328533, "span_start": null, "span_end": null, "passage": "annotation: type[Any] | None default factory: typing.Callable[[], Any] | None alias: str | None alias priority: int | None validation alias: str | Alias Path | Alias Choices | None serialization alias..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.1496504088542502, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 6, "path": "pydantic/functional_serializers.py", "score": 0.14861257996802907, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 7, "path": "pydantic/deprecated/class_validators.py", "score": 0.147052740456227, "span_start": null, "span_end": null, "passage": "Args:   field (str): The first field the validator should be called on; this is separate from `fields` to ensure an error is raised if you don't pass at least one. *fields (str): Additional field(s) t..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_typing_extra.py", "score": 0.1459234342190973, "span_start": null, "span_end": null, "passage": "...ython.org/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10..."}, {"qid": "", "rank": 9, "path": "pydantic/root_model.py", "score": 0.14235503551418324, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 10, "path": "pydantic/validate_call_decorator.py", "score": 0.1415900458254774, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 11, "path": "pydantic/json_schema.py", "score": 0.13266370733532615, "span_start": null, "span_end": null, "passage": "...port warnings from collections import defaultdict from copy import deepcopy from dataclasses import is dataclass from enum import Enum from typing import ( TYPE CHECKING, Any, Callable, Counter, Dict,..."}, {"qid": "", "rank": 12, "path": "pydantic/alias_generators.py", "score": 0.12321540527549699, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 13, "path": "pydantic/color.py", "score": 0.12001983640383714, "span_start": null, "span_end": null, "passage": "import math import re from colorsys import hls to rgb, rgb to hls from typing import Any, Callable, Optional, Tuple, Type, Union, cast from pydantic core import Core Schema, Pydantic Custom Error, cor..."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_validators.py", "score": 0.09661954049370061, "span_start": null, "span_end": null, "passage": "...Pv6Address, IPv6Interface, IPv6Network from typing import Any from pydantic core import Pydantic Custom Error, core schema from pydantic core. pydantic core import Pydantic Known Error def sequence va..."}, {"qid": "", "rank": 15, "path": "pydantic/warnings.py", "score": 0.09590979674503569, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 16, "path": "pydantic/type_adapter.py", "score": 0.08907499176488366, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_model_construction.py", "score": 0.08893931484801158, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 18, "path": "tests/test_typing.py", "score": 0.08753069313868948, "span_start": null, "span_end": null, "passage": "...om pydantic. internal. typing extra import ( None Type, eval type lenient, get function type hints, is classvar, is literal type, is namedtuple, is none type, origin is union, parent frame namespace, ..."}, {"qid": "", "rank": 19, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.0865254606122765, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 20, "path": "pydantic/types.py", "score": 0.08613663998968543, "span_start": null, "span_end": null, "passage": "A field metadata class to indicate that a field should be validated in strict mode. Attributes: strict: Whether to validate the field in strict mode. Example: ```python from typing extensions import A..."}], "latency_ms": 8.821725845336914, "gold_paths": ["HISTORY.md", "README.md"]}
{"qid": "lens_main_rag_design_6", "query": "What security design principles are followed?", "results": [{"qid": "", "rank": 1, "path": "pydantic/warnings.py", "score": 0.11288298093581148, "span_start": null, "span_end": null, "passage": "...nality will be removed. Attributes: message: Description of the warning. since: Pydantic version in what the deprecation was introduced. expected removal: Pydantic version in what the corresponding fu..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_typing_extra.py", "score": 0.04607404998874993, "span_start": null, "span_end": null, "passage": "... type: Any) -> bool: return  check finalvar(ann type) or  check finalvar(get origin(ann type)) def parent frame namespace(*, parent depth: int = 2) -> dict[str, Any] | None: frame = sys. getframe(pare..."}, {"qid": "", "rank": 3, "path": "pydantic/config.py", "score": 0.029151231157485063, "span_start": null, "span_end": null, "passage": "...r: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] frozen: bool populate by na..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_dataclasses.py", "score": 0.024118434501476712, "span_start": null, "span_end": null, "passage": "...ings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/utils.py", "score": 0.023553018015821214, "span_start": null, "span_end": null, "passage": "...continue merged params[param.name] = param if var kw:  # if custom init has no var kw, fields which are not declared in it cannot be passed through allow names = config.allow population by field name ..."}, {"qid": "", "rank": 6, "path": "pydantic/_internal/_utils.py", "score": 0.018585058089363237, "span_start": null, "span_end": null, "passage": "...alize indexes({'  all  ': True}, 4) {0: True, 1: True, 2: True, 3: True} Both `base` and `override` are converted to dictionaries if possible. Sets are converted to dictionaries with the sets entries ..."}, {"qid": "", "rank": 7, "path": "pydantic/type_adapter.py", "score": 0.016743750499730585, "span_start": null, "span_end": null, "passage": "...s, where `  module  ` (always `typing.py`) is not useful. So instead we look at the globals in our parent stack frame. This works for the case where this function is called in a module that has the ta..."}, {"qid": "", "rank": 8, "path": "pydantic/json_schema.py", "score": 0.015482656695383545, "span_start": null, "span_end": null, "passage": "...  core metadata,  core utils,  decorators,  internal dataclass,  mock val ser,  schema generation shared,  typing extra, ) from .annotated handlers import Get Json Schema Handler from .config import J..."}, {"qid": "", "rank": 9, "path": "pydantic/root_model.py", "score": 0.014396488253288512, "span_start": null, "span_end": null, "passage": "... `Base Model` subclass, then the return type will likely be `dict[str, Any]`, as `model dump` calls are recursive. The return type could even be something different, in the case of a custom serializer..."}, {"qid": "", "rank": 10, "path": "tests/test_type_hints.py", "score": 0.013221520709505165, "span_start": null, "span_end": null, "passage": "... info < (3, 10), reason='requires python3.10 or higher to work properly'), ] @pytest.fixture(name='Parent Model', scope='session') def parent sub model fixture(): class Ultra Simple Model(Base Model):..."}, {"qid": "", "rank": 11, "path": "tests/test_deprecated_validate_arguments.py", "score": 0.012098254753161565, "span_start": null, "span_end": null, "passage": "... Pydantic User Error, match='\"v  args\", \"v  kwargs\", \"v  positional only\" and \"v  duplicate kwargs\" are not permitted', ): @validate arguments def foo1(v  args: int): pass with pytest.raises( Pydantic..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/config.py", "score": 0.011742931107536884, "span_start": null, "span_end": null, "passage": "...le[..., None]   all   = 'Base Config', 'Config Dict', 'get config', 'Extra', 'inherit config', 'prepare config' class Extra(str, Enum): allow = 'allow' ignore = 'ignore' forbid = 'forbid' if not compi..."}, {"qid": "", "rank": 13, "path": "pydantic/main.py", "score": 0.010928407797644982, "span_start": null, "span_end": null, "passage": "...or instantiating the model.   pydantic complete  : Whether model building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 14, "path": "pydantic/functional_serializers.py", "score": 0.010695445169576332, "span_start": null, "span_end": null, "passage": "...serializers](../concepts/serialization.md#custom-serializers) for more information. Four signatures are supported: - `(self, value: Any, info: Field Serialization Info)` - `(self, value: Any, nxt: Ser..."}, {"qid": "", "rank": 15, "path": "tests/test_utils.py", "score": 0.010348819174901906, "span_start": null, "span_end": null, "passage": "...t issubclass(A, str) is True @pytest.mark.skipif(sys.version info < (3, 9), reason='generic aliases are not available in python < 3.9') def test lenient issubclass with generic aliases(): from collect..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_decorators_v1.py", "score": 0.009327823150543263, "span_start": null, "span_end": null, "passage": "... param name in ('field', 'config'): raise Pydantic User Error( 'The `field` and `config` parameters are not available in Pydantic V2, ' 'please use the `info` parameter instead.', code='validator-fiel..."}, {"qid": "", "rank": 17, "path": "pydantic/dataclasses.py", "score": 0.008891534945286415, "span_start": null, "span_end": null, "passage": "... init: A deprecated parameter included for backwards compatibility; in V2, all Pydantic dataclasses are validated on init. kw only: Determines if `  init  ` method parameters must be specified by keyw..."}, {"qid": "", "rank": 18, "path": "tests/test_deprecated.py", "score": 0.007355592700727845, "span_start": null, "span_end": null, "passage": "...th pytest.warns( Pydantic Deprecated Since20, match='Pydantic V1 style `@root validator` validators are deprecated.' ): class Pokemon List(Base Model): root: List[Pokemon] @root validator(pre=True) @c..."}, {"qid": "", "rank": 19, "path": "tests/test_validators.py", "score": 0.006699404740007142, "span_start": null, "span_end": null, "passage": "...idator, Wrap Validator V1 VALIDATOR DEPRECATION MATCH = r'Pydantic V1 style `@validator` validators are deprecated' def test annotated validator after() -> None: My Int = Annotated[int, After Validato..."}, {"qid": "", "rank": 20, "path": "pydantic/v1/class_validators.py", "score": 0.006684528162110081, "span_start": null, "span_end": null, "passage": "...ction Type): raise Config Error( \"validators should be used with fields and keyword arguments, not bare. \"  # noqa: Q000 \"E.g. usage should be `@validator('<field name>', ...)`\" ) elif not all(isinsta..."}], "latency_ms": 8.053064346313477, "gold_paths": ["HISTORY.md", "README.md"]}
{"qid": "lens_main_rag_design_7", "query": "How is the codebase organized by domain?", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_dataclasses.py", "score": 0.11652477775610776, "span_start": null, "span_end": null, "passage": "Attributes:   pydantic config  : Pydantic-specific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   p..."}, {"qid": "", "rank": 2, "path": "pydantic/fields.py", "score": 0.11120705653843443, "span_start": null, "span_end": null, "passage": "...rator: typing extensions.Callable[[str, Field Info], str] | None description: str | None examples: list[Any] | None exclude: bool | None gt: annotated types.Supports Gt | None ge: annotated types.Supp..."}, {"qid": "", "rank": 3, "path": "pydantic/root_model.py", "score": 0.11021897966805205, "span_start": null, "span_end": null, "passage": "A Pydantic `Base Model` for the root object of the model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fiel..."}, {"qid": "", "rank": 4, "path": "pydantic/dataclasses.py", "score": 0.10818327057733995, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 5, "path": "pydantic/_internal/_typing_extra.py", "score": 0.10780556583444931, "span_start": null, "span_end": null, "passage": "...ython.org/dev/peps/pep-0586) e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10..."}, {"qid": "", "rank": 6, "path": "pydantic/config.py", "score": 0.09877507484305374, "span_start": null, "span_end": null, "passage": "...puts are not permitted [type=extra forbidden, input value=20, input type=int] frozen: bool populate by name: bool use enum values: bool validate assignment: bool 1 validation error for User name Input..."}, {"qid": "", "rank": 7, "path": "pydantic/functional_serializers.py", "score": 0.09771368384058507, "span_start": null, "span_end": null, "passage": "This is particularly helpful when you want to customize the serialization for annotated types. Consider an input of `list`, which will be serialized into a space-delimited string. ```python from typin..."}, {"qid": "", "rank": 8, "path": "pydantic/validate_call_decorator.py", "score": 0.09474701914162782, "span_start": null, "span_end": null, "passage": "Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value. Usage may be either as a plain decorator `@validate call` or with arguments `@validate c..."}, {"qid": "", "rank": 9, "path": "pydantic/json_schema.py", "score": 0.09170658965702914, "span_start": null, "span_end": null, "passage": "...port warnings from collections import defaultdict from copy import deepcopy from dataclasses import is dataclass from enum import Enum from typing import ( TYPE CHECKING, Any, Callable, Counter, Dict,..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.08118273581061858, "span_start": null, "span_end": null, "passage": "This is used for any Annotated metadata so that we don't end up with conflicting modifications to the definition schema. Used internally by Pydantic, please do not rely on this implementation. See `Ge..."}, {"qid": "", "rank": 11, "path": "pydantic/type_adapter.py", "score": 0.07857136530736016, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 12, "path": "pydantic/v1/networks.py", "score": 0.07761404836519989, "span_start": null, "span_end": null, "passage": "...se Address,  Base Network, ) from typing import ( TYPE CHECKING, Any, Collection, Dict, Generator, List, Match, Optional, Pattern, Set, Tuple, Type, Union, cast, no type check, ) from pydantic.v1 impo..."}, {"qid": "", "rank": 13, "path": "pydantic/color.py", "score": 0.07719038474413112, "span_start": null, "span_end": null, "passage": "...rgba' def   init  (self, value: Color Type) -> None: self. rgba: RGBA self. original: Color Type if isinstance(value, (tuple, list)): self. rgba = parse tuple(value) elif isinstance(value, str): self...."}, {"qid": "", "rank": 14, "path": "pydantic/_internal/_validators.py", "score": 0.0766742021140144, "span_start": null, "span_end": null, "passage": "...ence[Any], /, validator: core schema.Validator Function Wrap Handler, ) -> typing.Sequence[Any]: (This is necessary to distinguish between a submodule and an attribute when there is a conflict.). If t..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.07548739834580125, "span_start": null, "span_end": null, "passage": "Args: cls: The class of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute nam..."}, {"qid": "", "rank": 16, "path": "tests/test_typing.py", "score": 0.07370591636895349, "span_start": null, "span_end": null, "passage": "...om pydantic. internal. typing extra import ( None Type, eval type lenient, get function type hints, is classvar, is literal type, is namedtuple, is none type, origin is union, parent frame namespace, ..."}, {"qid": "", "rank": 17, "path": "pydantic/alias_generators.py", "score": 0.07165115375709175, "span_start": null, "span_end": null, "passage": "Args: snake: The string to convert. Returns: The Pascal Case string. Args: snake: The string to convert. Returns: The converted camel Case string. Args: camel: The string to convert. Returns: The conv..."}, {"qid": "", "rank": 18, "path": "pydantic/_internal/_model_construction.py", "score": 0.06734073840278668, "span_start": null, "span_end": null, "passage": "warns about overriding of decorators. Args: cls name: The name of the class to be created. bases: The base classes of the class to be created. namespace: The attribute dictionary of the class to be cr..."}, {"qid": "", "rank": 19, "path": "pydantic/warnings.py", "score": 0.06712461282631654, "span_start": null, "span_end": null, "passage": "This warning is raised when using deprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality..."}, {"qid": "", "rank": 20, "path": "tests/mypy/modules/generics.py", "score": 0.06621001022612762, "span_start": null, "span_end": null, "passage": "...lidate(example) resp.custom method() doctype = resp.body.doctype T = Type Var('T', int, str) class History Field(Base Model, Generic[T]): value: Optional[T] class Domain Type(History Field[int]): pass..."}], "latency_ms": 5.206823348999023, "gold_paths": ["docs/index.md", "docs/why.md"]}
{"qid": "lens_main_rag_design_8", "query": "What external dependencies and services are used?", "results": [{"qid": "", "rank": 1, "path": "pydantic/_internal/_typing_extra.py", "score": 0.12158219742673804, "span_start": null, "span_end": null, "passage": "...isinstance because it fails <3.10. if v is None: return False return v.  class   == Final.  class   and (sys.version info < (3, 8) or getattr(v, ' name', None) == 'Final') def is finalvar(ann type: An..."}, {"qid": "", "rank": 2, "path": "pydantic/warnings.py", "score": 0.10436192852541702, "span_start": null, "span_end": null, "passage": "...eprecated functionality in Pydantic. It provides information on when the deprecation was introduced and the expected version in which the corresponding functionality will be removed. Attributes: messa..."}, {"qid": "", "rank": 3, "path": "pydantic/config.py", "score": 0.08249522665367771, "span_start": null, "span_end": null, "passage": "...r: bool str min length: int extra: Extra Values | None 1 validation error for User age Extra inputs are not permitted [type=extra forbidden, input value=20, input type=int] frozen: bool populate by na..."}, {"qid": "", "rank": 4, "path": "pydantic/_internal/_dataclasses.py", "score": 0.07559283704375486, "span_start": null, "span_end": null, "passage": "...ings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 5, "path": "pydantic/functional_serializers.py", "score": 0.07066571301285485, "span_start": null, "span_end": null, "passage": "...this serializer should be used. Accepts a string with values `'always'`, `'unless-none'`, `'json'`, and `'json-unless-none'`. Defaults to 'always'. Args: source type: The source type. handler: The `Ge..."}, {"qid": "", "rank": 6, "path": "pydantic/aliases.py", "score": 0.06911417260456088, "span_start": null, "span_end": null, "passage": "...` as a convenience to create various aliases. Attributes: alias: A callable that takes a field name and returns an alias for it. validation alias: A callable that takes a field name and returns a vali..."}, {"qid": "", "rank": 7, "path": "pydantic/deprecated/class_validators.py", "score": 0.05959133229728402, "span_start": null, "span_end": null, "passage": "...tor should be called on. pre (bool, optional): Whether this validator should be called before the standard validators (else after). Defaults to False. each item (bool, optional): For complex objects (..."}, {"qid": "", "rank": 8, "path": "pydantic/_internal/_docs_extraction.py", "score": 0.05320255316171511, "span_start": null, "span_end": null, "passage": "...s of the Pydantic model to inspect. use inspect: Whether to skip usage of frames to find the object and use the `inspect` module instead. Returns: A mapping containing attribute names and their corres..."}, {"qid": "", "rank": 9, "path": "pydantic/_internal/_schema_generation_shared.py", "score": 0.052196680723379296, "span_start": null, "span_end": null, "passage": "...hema. Used internally by Pydantic, please do not rely on this implementation. See `Get Json Schema Handler` for the handler API. This returns the input json schema if there is no `$ref` in json schema..."}, {"qid": "", "rank": 10, "path": "pydantic/v1/utils.py", "score": 0.05142340927778381, "span_start": null, "span_end": null, "passage": "...ass Attribute', 'path type', 'ROOT KEY', 'get unique discriminator alias', 'get discriminator alias and values', 'DUNDER ATTRIBUTES', ) ROOT KEY = '  root  ' IMMUTABLE NON COLLECTIONS TYPES: Set[Type[..."}, {"qid": "", "rank": 11, "path": "pydantic/_internal/_utils.py", "score": 0.04954932747153691, "span_start": null, "span_end": null, "passage": "...class(cls: Any, class or tuple: Any) -> bool:  # pragma: no cover try: return isinstance(cls, type) and issubclass(cls, class or tuple) except Type Error: if isinstance(cls,  typing extra.With Args Ty..."}, {"qid": "", "rank": 12, "path": "pydantic/fields.py", "score": 0.04525345759969651, "span_start": null, "span_end": null, "passage": "...the field. title: The title of the field. field title generator: A callable that takes a field name and returns title for it. description: The description of the field. examples: List of examples of t..."}, {"qid": "", "rank": 13, "path": "pydantic/type_adapter.py", "score": 0.04344383060929714, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/main.py", "score": 0.04155238436923867, "span_start": null, "span_end": null, "passage": "...rt Enum from functools import partial from pathlib import Path from types import Function Type, prepare class, resolve bases from typing import ( TYPE CHECKING, Abstract Set, Any, Callable, Class Var,..."}, {"qid": "", "rank": 15, "path": "pydantic/dataclasses.py", "score": 0.040628469972663214, "span_start": null, "span_end": null, "passage": "A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args..."}, {"qid": "", "rank": 16, "path": "pydantic/main.py", "score": 0.03704287084187809, "span_start": null, "span_end": null, "passage": "...or instantiating the model.   pydantic complete  : Whether model building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core schema used to build the Sch..."}, {"qid": "", "rank": 17, "path": "pydantic/v1/generics.py", "score": 0.03356193915869179, "span_start": null, "span_end": null, "passage": "...-> Type[Any]: def  cache key( params: Any) -> Cache Key: args = get args( params) if len(args) == 2 and isinstance(args[0], list): args = (tuple(args[0]), args[1]) return cls,  params, args cached =  ..."}, {"qid": "", "rank": 18, "path": "pydantic/functional_validators.py", "score": 0.03320614090297357, "span_start": null, "span_end": null, "passage": "...otated from pydantic import Base Model, Validation Error, Wrap Validator def validate timestamp(v, handler): if v == 'now': return datetime.now() try: return handler(v) except Validation Error: return..."}, {"qid": "", "rank": 19, "path": "tests/mypy/modules/metaclass_args.py", "score": 0.032363643968394896, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Config Class Used(Base Model): i: int = Field(2, alias='j') class Config: populate by name = True Config Class Used(i=None) class Metaclass Arguments No De"}, {"qid": "", "rank": 20, "path": "tests/mypy/outputs/1.0.1/mypy-plugin-very-strict_ini/metaclass_args.py", "score": 0.032363643968394896, "span_start": null, "span_end": null, "passage": "from pydantic import Base Model, Field class Config Class Used(Base Model): i: int = Field(2, alias='j') class Config: populate by name = True Config Class Used(i=None) class Metaclass Arguments No De"}], "latency_ms": 3.843545913696289, "gold_paths": ["HISTORY.md", "README.md"]}
{"qid": "lens_main_rag_design_9", "query": "How is backwards compatibility maintained?", "results": [{"qid": "", "rank": 1, "path": "tests/test_typing.py", "score": 0.08759058129868032, "span_start": null, "span_end": null, "passage": "...om pydantic. internal. typing extra import ( None Type, eval type lenient, get function type hints, is classvar, is literal type, is namedtuple, is none type, origin is union, parent frame namespace, ..."}, {"qid": "", "rank": 2, "path": "pydantic/_internal/_typing_extra.py", "score": 0.06646443263860705, "span_start": null, "span_end": null, "passage": "..., \"foo\"], 5, None]`. It can be either a `typing.Named Tuple` or `collections.namedtuple`. Can't use isinstance because it fails <3.10. if v is None: return False return v.  class   == Final.  class   ..."}, {"qid": "", "rank": 3, "path": "pydantic/dataclasses.py", "score": 0.0619379549345251, "span_start": null, "span_end": null, "passage": "...dantic-enhanced dataclass, similar to the standard Python `dataclass`, but with added validation. This function should be used similarly to `dataclasses.dataclass`. Args:  cls: The target `dataclass`...."}, {"qid": "", "rank": 4, "path": "pydantic/config.py", "score": 0.0371954539364195, "span_start": null, "span_end": null, "passage": "...trary types allowed: bool 1 validation error for Model pet Input should be an instance of Pet [type=is instance of, input value='Hedwig', input type=str] from attributes: bool loc by alias: bool A cal..."}, {"qid": "", "rank": 5, "path": "pydantic/v1/typing.py", "score": 0.035249300565990994, "span_start": null, "span_end": null, "passage": "...Abstract Set, Any, Callable as Typing Callable, Class Var, Dict, Forward Ref, Generator, Iterable, List, Mapping, New Type, Optional, Sequence, Set, Tuple, Type, Type Var, Union,  eval type, cast, get..."}, {"qid": "", "rank": 6, "path": "pydantic/type_adapter.py", "score": 0.0347665536930226, "span_start": null, "span_end": null, "passage": "and then looks for symbols to resolve forward references in those globals. On the other hand this function can be called with arbitrary objects, including type aliases, where `  module  ` (always `typ..."}, {"qid": "", "rank": 7, "path": "pydantic/fields.py", "score": 0.03281725075872716, "span_start": null, "span_end": null, "passage": "...rator: typing extensions.Callable[[str, Field Info], str] | None description: str | None examples: list[Any] | None exclude: bool | None gt: annotated types.Supports Gt | None ge: annotated types.Supp..."}, {"qid": "", "rank": 8, "path": "pydantic/v1/utils.py", "score": 0.03081772876365339, "span_start": null, "span_end": null, "passage": "...collections import Ordered Dict, defaultdict, deque from copy import deepcopy from itertools import islice, zip longest from types import Builtin Function Type, Code Type, Function Type, Generator Typ..."}, {"qid": "", "rank": 9, "path": "pydantic/root_model.py", "score": 0.03066161714933105, "span_start": null, "span_end": null, "passage": "...e model. Attributes: root: The root object of the model.   pydantic root model  : Whether the model is a Root Model.   pydantic private  : Private fields in the model.   pydantic extra  : Extra fields..."}, {"qid": "", "rank": 10, "path": "pydantic/_internal/_dataclasses.py", "score": 0.02935280135840762, "span_start": null, "span_end": null, "passage": "...pecific configuration settings for the dataclass.   pydantic complete  : Whether dataclass building is completed, or if there are still undefined fields.   pydantic core schema  : The pydantic-core sc..."}, {"qid": "", "rank": 11, "path": "pydantic/mypy.py", "score": 0.02889642182771969, "span_start": null, "span_end": null, "passage": "We might want to use this to print a warning if the mypy version being used is newer, or especially older, than we expect (or need). Args: version: The mypy version string. Return: The Pydantic mypy p..."}, {"qid": "", "rank": 12, "path": "tests/test_validators_dataclass.py", "score": 0.02852086702903512, "span_start": null, "span_end": null, "passage": "from dataclasses import asdict, is dataclass from typing import Any, List import pytest from dirty equals import Has Repr from pydantic import Validation Error, field validator, model validator from p..."}, {"qid": "", "rank": 13, "path": "pydantic/v1/annotated_types.py", "score": 0.026743447904468483, "span_start": null, "span_end": null, "passage": "...mport Required from pydantic.v1.main import Base Model, create model from pydantic.v1.typing import is typeddict, is typeddict special if TYPE CHECKING: from typing extensions import Typed Dict if sys..."}, {"qid": "", "rank": 14, "path": "pydantic/v1/fields.py", "score": 0.02516600326686661, "span_start": null, "span_end": null, "passage": "..., Any, Counter, Default Dict, Deque, Dict, Forward Ref, Frozen Set, Generator, Iterable, Iterator, List, Mapping, Optional, Pattern, Sequence, Set, Tuple, Type, Type Var, Union, ) from typing extensio..."}, {"qid": "", "rank": 15, "path": "pydantic/_internal/_validators.py", "score": 0.02477725422334428, "span_start": null, "span_end": null, "passage": "...ence[Any], /, validator: core schema.Validator Function Wrap Handler, ) -> typing.Sequence[Any]: (This is necessary to distinguish between a submodule and an attribute when there is a conflict.). If t..."}, {"qid": "", "rank": 16, "path": "pydantic/_internal/_model_construction.py", "score": 0.024739518818777256, "span_start": null, "span_end": null, "passage": "...ributes  ') if private attributes and item in private attributes: return private attributes[item] raise Attribute Error(item) @classmethod def   prepare  (cls, *args: Any, **kwargs: Any) -> dict[str, ..."}, {"qid": "", "rank": 17, "path": "pydantic/_internal/_utils.py", "score": 0.024503406781632396, "span_start": null, "span_end": null, "passage": "...n Function Type, Lambda Type, weakref.ref, Code Type, Module Type, Not Implemented.  class  , Ellipsis.  class  , } BUILTIN COLLECTIONS: set[type[Any]] = { list, set, tuple, frozenset, dict, Ordered D..."}, {"qid": "", "rank": 18, "path": "pydantic/v1/main.py", "score": 0.023895632325693944, "span_start": null, "span_end": null, "passage": "...s, resolve bases from typing import ( TYPE CHECKING, Abstract Set, Any, Callable, Class Var, Dict, List, Mapping, Optional, Tuple, Type, Type Var, Union, cast, no type check, overload, ) from typing e..."}, {"qid": "", "rank": 19, "path": "tests/test_deprecated.py", "score": 0.02345970996709361, "span_start": null, "span_end": null, "passage": "...rom pathlib import Path from types import Simple Namespace from typing import Any, Dict, Iterable, List, Type import pytest from pydantic core import Core Schema, core schema from typing extensions im..."}, {"qid": "", "rank": 20, "path": "tests/test_deprecated_fields.py", "score": 0.02224482843177037, "span_start": null, "span_end": null, "passage": "...ss Model(Base Model): a: Annotated[int, Field(deprecated='')] b: Annotated[int, Field(deprecated='This is deprecated')] c: Annotated[int, Field(deprecated=None)] assert Model.model json schema() == { ..."}], "latency_ms": 3.2548904418945312, "gold_paths": ["HISTORY.md", "README.md"]}
