# Minimal benchmark configuration for strict mode testing
# Only includes verified working systems

corpora:
  # Primary test corpus
  - id: lens_main
    git_url: https://github.com/pydantic/pydantic.git
    sha: v2.8.0
    description: Pydantic v2.8 - Modern Python data validation library

systems:
  # Qdrant vector database (VERIFIED WORKING)
  - id: qdrant
    kind: dense
    config:
      service_url: http://localhost:6333
      collection_name: code_search
      model: all-MiniLM-L6-v2
    description: Qdrant - Vector similarity search engine

  # Traditional BM25 baseline (fallback)
  - id: bm25_baseline
    kind: bm25
    config:
      k1: 1.2
      b: 0.75
      analyzer: code_aware
    description: Traditional BM25 baseline implementation

  # FAISS HNSW dense retrieval
  - id: faiss_hnsw
    kind: dense
    config:
      model: sentence-transformers/all-MiniLM-L6-v2
      index_type: hnsw
    description: FAISS HNSW dense retrieval with code embeddings

  # Symbol-based system
  - id: ctags_symbols
    kind: symbol
    config:
      languages: [python, typescript, javascript]
    description: Ctags-based symbol index

# Focused scenarios for testing
scenarios:
  - code.func      # Find function by natural language
  - code.symbol    # Find symbol by name
  - code.regex     # Regex patterns
  - code.repo      # Repo-level tasks
  - code.trace     # Call trace analysis
  - rag.code.qa    # Code Q&A
  - rag.api.qa     # API documentation Q&A
  - rag.design.qa  # Design pattern Q&A

# Evaluation parameters
k_retrieval: 20
k_rerank: 10
chunk_policy: code_units

# Strict mode thresholds
min_queries_per_scenario: 5  # Reduced for testing
min_success_rate: 0.0  # Allow zero for initial testing
max_latency_p95_ms: 5000  # Generous for initial testing

# Output configuration
output_formats: [csv, markdown, json]
generate_plots: true
