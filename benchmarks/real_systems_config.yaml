# Real Competitor Systems Configuration
# Uses Docker infrastructure for actual tool implementations

corpora:
  # Primary corpus: lens repository
  - id: lens_main
    git_url: https://github.com/pydantic/pydantic.git
    sha: v2.8.0
    description: Pydantic v2.8 - Modern Python data validation library

  # Secondary corpus: FastAPI for additional testing
  - id: fastapi_fixture
    git_url: https://github.com/tiangolo/fastapi.git
    sha: 0.111.0
    description: FastAPI - Modern Python web framework

systems:
  # Google's Zoekt code search engine
  - id: zoekt
    kind: regex
    config:
      id: zoekt  # Used by factory to identify specific system
      service_url: http://localhost:6070
      max_results: 100
    description: Zoekt - Google's fast code search engine using trigram indexing

  # Structural search with Comby
  - id: comby
    kind: regex  
    config:
      id: comby
      service_url: http://localhost:8081
      language: python
    description: Comby - Structural search and replace for code

  # Livegrep for fast regex
  - id: livegrep
    kind: regex
    config:
      id: livegrep
      service_url: http://localhost:9898
      max_matches: 100
    description: Livegrep - Fast regex search over large codebases

  # Real ripgrep implementation
  - id: ripgrep
    kind: regex
    config:
      id: ripgrep
      service_url: http://localhost:8080
      max_results: 100
    description: Ripgrep - Fast grep implementation with Unicode support

  # OpenSearch (Elasticsearch-compatible)
  - id: opensearch
    kind: bm25
    config:
      id: opensearch
      service_url: http://localhost:9200
      index_name: code_search
      analyzer: standard
    description: OpenSearch - Elasticsearch-compatible search engine

  # Milvus vector database
  - id: milvus
    kind: dense
    config:
      id: milvus
      service_url: http://localhost:19530
      collection_name: code_search
      dimension: 384
    description: Milvus - Open-source vector database for semantic search

  # FAISS similarity search
  - id: faiss_hnsw
    kind: dense
    config:
      model: sentence-transformers/all-MiniLM-L6-v2
      index_type: hnsw
      service_url: http://localhost:8084
    description: FAISS HNSW dense retrieval with code embeddings

  # Qdrant vector database
  - id: qdrant
    kind: dense
    config:
      service_url: http://localhost:6333
      collection_name: code_search
      model: all-MiniLM-L6-v2
    description: Qdrant - Vector similarity search engine

  # Symbol-based system using ctags
  - id: ctags_symbols
    kind: symbol
    config:
      id: ctags
      service_url: http://localhost:8083
      languages: [python, typescript, javascript, go, rust]
    description: Ctags-based symbol index with cross-references

  # Traditional BM25 (using existing implementation)
  - id: bm25_baseline
    kind: bm25
    config:
      k1: 1.2
      b: 0.75
      analyzer: code_aware
    description: Traditional BM25 baseline implementation

# Scenario configuration - focus on code search capabilities
scenarios:
  - code.func      # Find function/def by natural language
  - code.symbol    # Find symbol by name (case/underscore variations)
  - code.regex     # Regex/literal "where used" patterns
  - code.repo      # Repo-level tasks (auth middleware, error handling)

# Evaluation parameters
k_retrieval: 20
k_rerank: 10
chunk_policy: code_units  # Functions, classes, modules

# Quality thresholds for real systems
min_queries_per_scenario: 15
min_success_rate: 0.7
max_latency_p95_ms: 200

# Docker compose settings
docker:
  compose_file: docker-compose.yml
  services_timeout: 120  # seconds to wait for services to start
  health_check_retries: 5

# Output configuration
output_formats: [csv, markdown, json]
generate_plots: true
include_latency_breakdown: true
include_error_analysis: true