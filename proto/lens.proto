syntax = "proto3";

package lens.v1;

// Search request message
message SearchRequest {
  string query = 1;
  optional string file_path = 2;
  optional string language = 3;
  uint32 max_results = 4;
  bool include_context = 5;
  uint64 timeout_ms = 6;
  bool enable_lsp = 7;
}

// Search result message
message SearchResult {
  string file_path = 1;
  uint32 line_number = 2;
  uint32 column = 3;
  string content = 4;
  double score = 5;
  string result_type = 6;
  optional string language = 7;
  repeated string context_lines = 8;
}

// Search response message
message SearchResponse {
  repeated SearchResult results = 1;
  SearchMetrics metrics = 2;
  uint64 total_time_ms = 3;
  bool sla_compliant = 4;
}

// Search metrics message
message SearchMetrics {
  uint64 total_docs = 1;
  uint64 matched_docs = 2;
  uint32 duration_ms = 3;
  uint32 lsp_time_ms = 4;
  uint32 lsp_results_count = 5;
  double lsp_cache_hit_rate = 6;
  uint32 search_time_ms = 7;
  uint32 fusion_time_ms = 8;
  bool sla_compliant = 9;
  double result_diversity_score = 10;
  double confidence_score = 11;
  double coverage_score = 12;
}

// Health check messages
message HealthRequest {
  string service = 1;
}

message HealthResponse {
  string status = 1;
  string message = 2;
}

// Build info messages
message BuildInfoRequest {
}

message BuildInfoResponse {
  string version = 1;
  string commit = 2;
  string build_timestamp = 3;
  string features = 4;
}

// Handshake messages
message HandshakeRequest {
  string client_id = 1;
  string protocol_version = 2;
}

message HandshakeResponse {
  string server_id = 1;
  string protocol_version = 2;
  bool success = 3;
  string message = 4;
}

// The lens search service
service LensSearchService {
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc Health(HealthRequest) returns (HealthResponse);
  rpc GetBuildInfo(BuildInfoRequest) returns (BuildInfoResponse);
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse);
}